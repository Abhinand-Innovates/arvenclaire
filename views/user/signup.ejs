<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Arvenclaire - Create an Account</title>
  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <!-- Bootstrap Icons -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet">
  <link rel="stylesheet" href="../../styles/user/signup.css">
  <style>
    .error-message {
      color: #dc3545;
      font-size: 0.875rem;
      margin-top: 0.25rem;
      display: none;
    }

    .is-invalid~.error-message {
      display: block;
    }

    .is-invalid {
      border-color: #dc3545;
      background-image: none !important;
      background-repeat: no-repeat;
      background-position: right calc(0.375em + 0.1875rem) center;
      background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
    }

    .is-valid {
      border-color: #28a745;
      background-image: none !important;
    }

    .password-wrapper {
      position: relative;
    }

    .password-toggle {
      position: absolute;
      right: 15px;
      top: 10px;
      transform: translateY(0);
      cursor: pointer;
      color: #6c757d;
      z-index: 10;
      font-size: 1rem;
    }

    .password-toggle:hover {
      color: #000;
    }

    .password-wrapper .form-control {
      padding-right: 60px;
    }

    .btn-loading .spinner-border {
      width: 1.5rem;
      height: 1.5rem;
      margin-right: 0.5rem;
    }

    .btn-loading .btn-text {
      display: none;
    }

    .btn-loading {
      pointer-events: none;
      opacity: 0.65;
    }

    /* Only center the heading and paragraph text */
    .signup-form h2,
    .signup-form > p {
      text-align: center;
    }

    /* Light ash color for referral field */
    #referralCode {
      background-color: #e8e8e8 !important;
      border-color: #c0c0c0 !important;
      color: #4a4a4a !important;
    }

    #referralCode::placeholder {
      color: #808080 !important;
    }

    #referralCode:focus {
      background-color: #e0e0e0 !important;
      border-color: #b0b0b0 !important;
      box-shadow: 0 0 0 0.2rem rgba(176, 176, 176, 0.25) !important;
    }
  </style>
</head>

<body>
  <div class="page-container">
    <div class="signup-container">
      <div class="signup-image">
        <img src="/assets/register-img.jpg" style="width: 100%; height: 100%; object-fit: cover;" alt="Watch Haven">
      </div>
      <div class="signup-form">
        <h2 class="mb-3" style="font-weight: bolder;font-family: 'Times New Roman', Times, serif;">ARVENCLAIRE</h2>
        <p style="font-weight: bold;">Create your account</p>
        <form id="signupForm" novalidate>
          <div class="mb-3">
            <input type="text" id="fullname" name="fullname" class="form-control" placeholder="Fullname" required>
            <div class="error-message" id="fullname-error">Full name must be at least 4 characters long</div>
          </div>
          <div class="mb-3">
            <input type="tel" id="phone" name="phone" class="form-control" placeholder="Phone" required>
            <div class="error-message" id="phone-error">Please enter a valid phone number</div>
          </div>
          <div class="mb-3">
            <input type="email" id="email" name="email" class="form-control" placeholder="Email" required>
            <div class="error-message" id="email-error">Please enter a valid email address</div>
          </div>
          <div class="mb-3 password-wrapper">
            <input type="password" id="password" name="password" class="form-control" placeholder="Password">
            <i class="bi bi-lock password-toggle" id="password-toggle"></i>
            <div class="error-message" id="password-error">Give strong password</div>
          </div>
          <div class="mb-3 password-wrapper">
            <input type="password" id="confirmpassword" name="confirmpassword" class="form-control"
              placeholder="Confirm Password">
            <i class="bi bi-lock password-toggle" id="confirmpassword-toggle"></i>
            <div class="error-message" id="confirmpassword-error">Passwords do not match</div>
          </div>
          <div class="mb-3">
            <input type="text" id="referralCode" name="referralCode" class="form-control" placeholder="Referral Code (Optional)" value="">
            <div class="error-message" id="referralCode-error">Invalid referral code</div>
          </div>
          <button type="submit" class="btn btn-create py-2" id="signupButton">
            <span class="btn-text">Sign Up</span>
            <span class="spinner-border spinner-border-sm d-none" role="status" aria-hidden="true"></span>
          </button>
          <div class="d-flex align-items-center my-3">
            <hr class="flex-grow-1">
            <span class="mx-3 text-muted">or</span>
            <hr class="flex-grow-1">
          </div>
          <a href="/auth/google" class="btn btn-outline-secondary w-100 d-flex align-items-center justify-content-center p-2"
            role="button">
            <img src="../../assets/google-icon.png" alt="Google logo" width="20" height="20"
              style="margin-right: 10px;">
            Sign up with Google
          </a>


          <div class="login-link">
            Already have an account? <a href="/login">Log In</a>
          </div>
        </form>
      </div>
    </div>
  </div>
  <!-- Bootstrap JS -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    // Check for referral code in URL parameters
    const urlParams = new URLSearchParams(window.location.search);
    const refCode = urlParams.get('ref');
    if (refCode) {
      document.getElementById('referralCode').value = refCode;
      // Trigger validation for the pre-filled referral code
      document.getElementById('referralCode').dispatchEvent(new Event('input'));
    }

    const form = document.getElementById("signupForm");
    const signupButton = document.getElementById("signupButton");
    const fields = [
      {
        id: "fullname",
        validate: (value) => {
          // Check if starts with whitespace
          if (value.startsWith(' ')) return false;
          
          const trimmed = value.trim();
          // Check minimum length
          if (trimmed.length < 4) return false;
          
          // Check if contains only alphabets and whitespaces (no numbers or special characters)
          return /^[a-zA-Z\s]+$/.test(trimmed);
        },
        errorElement: "fullname-error",
        getErrorMessage: (value) => {
          if (value.length === 0) return "Full name is required";
          if (value.startsWith(' ')) return "Full name cannot start with whitespace";
          
          const trimmed = value.trim();
          if (trimmed.length < 4) return "Full name must be at least 4 characters";
          if (!/^[a-zA-Z\s]+$/.test(trimmed)) return "Full name can only contain alphabets and spaces";
          return "";
        }
      },
      {
        id: "phone",
        validate: (value) => /^[6-9]\d{9}$/.test(value.trim()),
        errorElement: "phone-error",
        getErrorMessage: (value) => {
          const trimmed = value.trim();
          if (trimmed.length === 0) return "Phone number is required";
          return "Phone number must be 10 digits and start with 6, 7, 8, or 9";
        }
      },
      {
        id: "email",
        validate: (value) => {
          const trimmed = value.trim();
          
          // Check if email contains whitespace
          if (/\s/.test(trimmed)) return false;
          
          // Check if email contains only lowercase letters (no uppercase allowed)
          if (/[A-Z]/.test(trimmed)) return false;
          
          // Check basic email structure
          if (!trimmed.includes('@') || trimmed.split('@').length !== 2) return false;
          
          const [localPart, domainPart] = trimmed.split('@');
          
          // Validate local part (before @): only lowercase alphabets and numbers
          if (!/^[a-z0-9]+$/.test(localPart)) return false;
          
          // Validate domain part (after @): only lowercase alphabets and dots
          if (!/^[a-z.]+$/.test(domainPart)) return false;
          
          // Check if domain has at least one dot and proper structure
          if (!domainPart.includes('.') || domainPart.startsWith('.') || domainPart.endsWith('.')) return false;
          
          // Check if domain parts are valid (only lowercase alphabets between dots)
          const domainParts = domainPart.split('.');
          for (const part of domainParts) {
            if (!/^[a-z]+$/.test(part)) return false;
          }
          
          return true;
        },
        errorElement: "email-error",
        getErrorMessage: (value) => {
          const trimmed = value.trim();
          if (trimmed.length === 0) return "Email is required";
          if (/\s/.test(trimmed)) return "Email cannot contain whitespaces";
          if (/[A-Z]/.test(trimmed)) return "Email must contain only lowercase letters";
          if (!trimmed.includes('@')) return "Email must contain @ symbol";
          
          const [localPart, domainPart] = trimmed.split('@');
          
          if (!localPart) return "Email must have content before @ symbol";
          if (!/^[a-z0-9]+$/.test(localPart)) return "Before @ symbol: only lowercase letters and numbers allowed";
          
          if (!domainPart) return "Email must have content after @ symbol";
          if (!/^[a-z.]+$/.test(domainPart)) return "After @ symbol: only lowercase letters and dots allowed";
          if (!domainPart.includes('.')) return "Domain must contain at least one dot";
          
          return "Please enter a valid email address with lowercase letters only";
        }
      },
      {
        id: "password",
        validate: (value) => /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/.test(value),
        errorElement: "password-error",
        getErrorMessage: (value) => {
          if (value.length === 0) return "Password is required";
          return "Password must be at least 8 characters with uppercase, lowercase, number and special character";
        }
      },
      {
        id: "confirmpassword",
        validate: (value) => value === document.getElementById("password").value,
        errorElement: "confirmpassword-error",
        getErrorMessage: (value) => {
          if (value.length === 0) return "Please confirm your password";
          return "Passwords do not match";
        }
      }
    ];

    function validateField(field) {
      const input = document.getElementById(field.id);
      const errorElement = document.getElementById(field.errorElement);
      const isValid = field.validate(input.value);

      if (isValid) {
        input.classList.remove("is-invalid");
        errorElement.style.display = "none";
      } else {
        input.classList.add("is-invalid");
        // Use custom error message if available
        if (field.getErrorMessage) {
          errorElement.textContent = field.getErrorMessage(input.value);
        }
        errorElement.style.display = "block";
      }

      return isValid;
    }

    // Function to clear all server error messages
    function clearServerErrors() {
      fields.forEach(field => {
        const input = document.getElementById(field.id);
        const errorElement = document.getElementById(field.errorElement);
        input.classList.remove("is-invalid");
        errorElement.style.display = "none";
      });
    }

    // Function to display server-side validation errors
    function displayServerError(message, fieldId = null) {
      // Clear any existing errors first
      clearServerErrors();

      // If server provided a specific field, use it directly
      if (fieldId && document.getElementById(fieldId)) {
        const input = document.getElementById(fieldId);
        const errorElement = document.getElementById(fieldId + "-error");

        if (input && errorElement) {
          input.classList.add("is-invalid");
          errorElement.textContent = message;
          errorElement.style.display = "block";
          input.focus();
          return;
        }
      }

      // Fallback: Map server messages to specific fields with exact matching
      const errorMappings = [
        {
          keywords: ["Full name", "fullname", "name"],
          messages: ["Full name must be at least 4 characters", "Full name should not contain numbers"],
          fieldId: "fullname"
        },
        {
          keywords: ["email", "Email"],
          messages: ["Please enter a valid email", "User already exists"],
          fieldId: "email"
        },
        {
          keywords: ["password", "Password"],
          messages: ["Password must be at least 8 characters"],
          fieldId: "password"
        },
        {
          keywords: ["phone", "Phone"],
          messages: ["Phone number must be 10 digits", "Phone must be 10 digits"],
          fieldId: "phone"
        }
      ];

      // Check if the error message matches a specific field
      let fieldFound = false;

      for (const mapping of errorMappings) {
        // Check if message contains any of the keywords or exact messages
        const matchesKeyword = mapping.keywords.some(keyword =>
          message.toLowerCase().includes(keyword.toLowerCase())
        );
        const matchesMessage = mapping.messages.some(msg =>
          message.includes(msg)
        );

        if (matchesKeyword || matchesMessage) {
          const input = document.getElementById(mapping.fieldId);
          const errorElement = document.getElementById(mapping.fieldId + "-error");

          if (input && errorElement) {
            input.classList.add("is-invalid");
            errorElement.textContent = message;
            errorElement.style.display = "block";
            fieldFound = true;

            // Focus on the field with error
            input.focus();
            break;
          }
        }
      }

      // If no specific field mapping found, show error on the first field (general error)
      if (!fieldFound) {
        const firstInput = document.getElementById("fullname");
        const firstErrorElement = document.getElementById("fullname-error");

        if (firstInput && firstErrorElement) {
          firstInput.classList.add("is-invalid");
          firstErrorElement.textContent = message;
          firstErrorElement.style.display = "block";
          firstInput.focus();
        }
      }
    }

    // Real-time validation on input
    fields.forEach(field => {
      const input = document.getElementById(field.id);
      input.addEventListener("input", () => {
        // Clear server error when user starts typing
        const errorElement = document.getElementById(field.errorElement);
        if (errorElement.style.display === "block") {
          input.classList.remove("is-invalid");
          errorElement.style.display = "none";
        }
        // Then run client-side validation
        validateField(field);
      });
    });

    // Referral code validation
    const referralCodeInput = document.getElementById("referralCode");
    const referralCodeError = document.getElementById("referralCode-error");
    let referralCodeTimeout;

    referralCodeInput.addEventListener("input", () => {
      const referralCode = referralCodeInput.value.trim();
      
      // Clear previous timeout
      if (referralCodeTimeout) {
        clearTimeout(referralCodeTimeout);
      }
      
      // Clear error state
      referralCodeInput.classList.remove("is-invalid", "is-valid");
      referralCodeError.style.display = "none";
      
      // If empty, it's valid (optional field)
      if (!referralCode) {
        return;
      }
      
      // Debounce validation
      referralCodeTimeout = setTimeout(async () => {
        try {
          const response = await fetch("/validate-referral-code", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({ referralCode }),
          });
          
          const data = await response.json();
          
          if (data.success) {
            if (data.valid) {
              referralCodeInput.classList.add("is-valid");
              referralCodeInput.classList.remove("is-invalid");
              referralCodeError.style.display = "none";
            } else {
              referralCodeInput.classList.add("is-invalid");
              referralCodeInput.classList.remove("is-valid");
              referralCodeError.textContent = data.message;
              referralCodeError.style.display = "block";
            }
          }
        } catch (error) {
          console.error("Error validating referral code:", error);
        }
      }, 500); // 500ms delay
    });

    // Password toggle functionality
    function setupPasswordToggle(inputId, toggleId) {
      const input = document.getElementById(inputId);
      const toggle = document.getElementById(toggleId);
      toggle.addEventListener("click", () => {
        const isPassword = input.type === "password";
        input.type = isPassword ? "text" : "password";
        toggle.classList.toggle("bi-unlock", isPassword);
        toggle.classList.toggle("bi-lock", !isPassword);
      });
    }

    setupPasswordToggle("password", "password-toggle");
    setupPasswordToggle("confirmpassword", "confirmpassword-toggle");

    form.addEventListener("submit", async (event) => {
      event.preventDefault();

      // Clear any previous server errors
      clearServerErrors();

      // Show loader and disable button
      signupButton.classList.add("btn-loading");
      signupButton.querySelector(".spinner-border").classList.remove("d-none");
      signupButton.querySelector(".btn-text").classList.add("d-none");

      let isValid = true;
      let firstInvalidField = null;

      fields.forEach(field => {
        if (!validateField(field)) {
          isValid = false;
          if (!firstInvalidField) {
            firstInvalidField = field;
          }
        }
      });

      if (!isValid) {
        // Focus on the first invalid field
        if (firstInvalidField) {
          document.getElementById(firstInvalidField.id).focus();
        }

        // Hide loader and enable button if validation fails
        signupButton.classList.remove("btn-loading");
        signupButton.querySelector(".spinner-border").classList.add("d-none");
        signupButton.querySelector(".btn-text").classList.remove("d-none");
        return;
      }

      const fullname = document.getElementById("fullname").value.trim();
      const phone = document.getElementById("phone").value.trim();
      const email = document.getElementById("email").value.trim();
      const password = document.getElementById("password").value;
      const referralCode = document.getElementById("referralCode").value.trim();

      try {
        const response = await fetch("/signup", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            fullname,
            phone,
            email,
            password,
            referralCode,
          }),
        });

        const data = await response.json();

        if (response.ok && data.success) {
          window.location.href = "/verify-otp";
        } else {
          // Display server-side validation errors below fields
          displayServerError(data.message || 'Signup failed.', data.field);
        }
      } catch (error) {
        console.error("Signup error:", error);
        displayServerError('An error occurred during signup. Please try again.', null);
      } finally {
        // Hide loader and enable button after request completes
        signupButton.classList.remove("btn-loading");
        signupButton.querySelector(".spinner-border").classList.add("d-none");
        signupButton.querySelector(".btn-text").classList.remove("d-none");
      }
    });
  </script>
</body>

</html>