<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Watch Haven - Enter New Password</title>
  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <!-- Bootstrap Icons -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet">
  <!-- SweetAlert2 CSS -->
  <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet">
  <!-- Animate.css -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" />
  <style>
    body, html {
      height: 100%;
    }
    .login-wrapper {
      height: 100vh;
    }
    .login-box {
      max-width: 500px;
      width: 100%;
      box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
      border-radius: 10px;
      overflow: hidden;
    }
    .error-message {
      color: #dc3545;
      font-size: 0.875rem;
      margin-top: 0.25rem;
      display: none;
    }
    .is-invalid~.error-message {
      display: block;
    }
    .is-invalid {
      border-color: #dc3545;
      background-image: none !important;
      background-repeat: no-repeat;
      background-position: right calc(0.375em + 0.1875rem) center;
      background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
    }
    .password-wrapper {
      position: relative;
    }
    .password-toggle {
      position: absolute;
      right: 15px;
      top: 2.5rem;
      transform: translateY(0);
      cursor: pointer;
      color: #6c757d;
      z-index: 10;
      font-size: 1rem;
    }
    .password-toggle:hover {
      color: #000;
    }
    .password-wrapper .form-control {
      padding-right: 60px;
    }
    .btn-outline-secondary {
      border: 2px solid #6c757d;
      color: #6c757d;
    }
    .btn-outline-secondary:hover {
      background-color: #6c757d;
      border-color: #6c757d;
    }
    
    /* Toast styles */
    .toast {
        background: white;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        margin-bottom: 10px;
        padding: 16px 20px;
        min-width: 300px;
        max-width: 400px;
        display: flex;
        align-items: center;
        gap: 12px;
        transform: translateX(100%);
        transition: all 0.3s ease;
        border-left: 4px solid;
    }
    
    .toast.show {
        transform: translateX(0);
    }
    
    .toast.success {
        border-left-color: #10b981;
    }
    
    .toast.error {
        border-left-color: #ef4444;
    }
    
    .toast.warning {
        border-left-color: #f59e0b;
    }
    
    .toast.info {
        border-left-color: #3b82f6;
    }
    
    .toast-icon {
        font-size: 20px;
        flex-shrink: 0;
    }
    
    .toast.success .toast-icon {
        color: #10b981;
    }
    
    .toast.error .toast-icon {
        color: #ef4444;
    }
    
    .toast.warning .toast-icon {
        color: #f59e0b;
    }
    
    .toast.info .toast-icon {
        color: #3b82f6;
    }
    
    .toast-content {
        flex: 1;
    }
    
    .toast-title {
        font-weight: 600;
        margin-bottom: 4px;
        color: #111827;
    }
    
    .toast-message {
        color: #6b7280;
        font-size: 14px;
    }
    
    .toast-close {
        background: none;
        border: none;
        color: #9ca3af;
        cursor: pointer;
        font-size: 18px;
        padding: 0;
        width: 20px;
        height: 20px;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    
    .toast-close:hover {
        color: #6b7280;
    }
    
    /* Responsive adjustments */
    @media (max-width: 768px) {
      .login-wrapper {
        padding: 15px;
      }
      .login-box {
        border-radius: 15px;
      }
      .p-5 {
        padding: 2rem !important;
      }
    }
    
    @media (max-width: 576px) {
      .p-5 {
        padding: 1.5rem !important;
      }
      h2 {
        font-size: 1.5rem;
      }
    }
  </style>
</head>

<body>
  <div class="container d-flex align-items-center justify-content-center login-wrapper">
    <div class="login-box">
      <!-- Form Column -->
      <div class="p-5 bg-white">
        <div class="text-center mb-4">
          <h2>Enter new password</h2>
          <p class="text-muted">Create a strong password</p>
        </div>

        <form id="newPasswordForm" novalidate>
          <div class="mb-3 password-wrapper">
            <label for="newPassword" class="form-label">Enter new password</label>
            <input type="password" class="form-control" id="newPassword" placeholder="Enter your new password" required>
            <i class="bi bi-lock password-toggle" id="newPassword-toggle"></i>
            <div class="error-message" id="newPassword-error">Password must be at least 8 characters</div>
          </div>

          <div class="mb-3 password-wrapper">
            <label for="confirmPassword" class="form-label">Confirm new password</label>
            <input type="password" class="form-control" id="confirmPassword" placeholder="Confirm your new password" required>
            <i class="bi bi-lock password-toggle" id="confirmPassword-toggle"></i>
            <div class="error-message" id="confirmPassword-error">Passwords do not match</div>
          </div>

          <button type="submit" class="btn btn-dark w-100 mb-3">Continue</button>

          <div class="text-center">
            <p class="mb-0">Remember your password? <a href="/login" class="text-decoration-none">Login</a></p>
          </div>
        </form>
      </div>
    </div>
  </div>

  <!-- Toast Container -->
  <div id="toast-container" style="position: fixed; bottom: 20px; right: 20px; z-index: 9999;"></div>

  <!-- Bootstrap JS -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <!-- SweetAlert2 JS -->
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  
  <!-- New Password Script -->
  <script>
    // Toast notification system
    function showToast(title, message, type = 'info', duration = 4000) {
        const container = document.getElementById('toast-container');
        const toast = document.createElement('div');
        toast.className = `toast ${type}`;
        
        const icons = {
            success: 'bi bi-check-circle-fill',
            error: 'bi bi-exclamation-circle-fill',
            warning: 'bi bi-exclamation-triangle-fill',
            info: 'bi bi-info-circle-fill'
        };
        
        toast.innerHTML = `
            <div class="toast-icon">
                <i class="${icons[type]}"></i>
            </div>
            <div class="toast-content">
                <div class="toast-title">${title}</div>
                <div class="toast-message">${message}</div>
            </div>
            <button class="toast-close" onclick="removeToast(this.parentElement)">
                <i class="bi bi-x"></i>
            </button>
        `;
        
        container.appendChild(toast);
        
        // Trigger animation
        setTimeout(() => toast.classList.add('show'), 100);
        
        // Auto remove
        setTimeout(() => removeToast(toast), duration);
    }
    
    function removeToast(toast) {
        if (toast && toast.parentElement) {
            toast.classList.remove('show');
            setTimeout(() => {
                if (toast.parentElement) {
                    toast.parentElement.removeChild(toast);
                }
            }, 300);
        }
    }

    document.addEventListener('DOMContentLoaded', () => {
      const newPasswordForm = document.getElementById('newPasswordForm');
      const fields = [
        {
          id: 'newPassword',
          validate: (value) => /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/.test(value),
          errorElement: 'newPassword-error'
        },
        {
          id: 'confirmPassword',
          validate: (value) => {
            const newPassword = document.getElementById('newPassword').value;
            return value === newPassword && value.length > 0;
          },
          errorElement: 'confirmPassword-error'
        }
      ];

      // Real-time validation
      function validateField(field) {
        const input = document.getElementById(field.id);
        const isValid = field.validate(input.value);
        input.classList.toggle('is-invalid', !isValid);
        return isValid;
      }

      fields.forEach(field => {
        const input = document.getElementById(field.id);
        input.addEventListener('input', () => {
          validateField(field);
          // Also validate confirm password when new password changes
          if (field.id === 'newPassword') {
            validateField(fields[1]); // Validate confirm password
          }
        });
      });

      // Password toggle functionality
      function setupPasswordToggle(inputId, toggleId) {
        const input = document.getElementById(inputId);
        const toggle = document.getElementById(toggleId);
        toggle.addEventListener('click', () => {
          const isPassword = input.type === 'password';
          input.type = isPassword ? 'text' : 'password';
          toggle.classList.toggle('bi-unlock', isPassword);
          toggle.classList.toggle('bi-lock', !isPassword);
        });
      }

      setupPasswordToggle('newPassword', 'newPassword-toggle');
      setupPasswordToggle('confirmPassword', 'confirmPassword-toggle');

      // Form submit handling
      newPasswordForm.addEventListener('submit', async (event) => {
        event.preventDefault();

        let isValid = true;
        fields.forEach(field => {
          if (!validateField(field)) {
            isValid = false;
          }
        });

        if (!isValid) {
          return;
        }

        const newPassword = document.getElementById('newPassword').value;
        const confirmPassword = document.getElementById('confirmPassword').value;

        // Show loading state
        const submitBtn = event.target.querySelector('button[type="submit"]');
        const originalText = submitBtn.innerHTML;
        submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2" role="status"></span>Updating...';
        submitBtn.disabled = true;

        try {
          const response = await fetch('/reset-password', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ newPassword, confirmPassword }),
            credentials: 'include',
          });

          const data = await response.json();

          if (data.success) {
            Swal.fire({
              icon: 'success',
              title: 'Password Updated Successfully',
              text: 'Your password has been updated. You can now login with your new password.',
              confirmButtonColor: '#000',
              confirmButtonText: 'Go to Login'
            }).then((result) => {
              if (result.isConfirmed) {
                window.location.href = '/login';
              }
            });
          } else {
            showToast('Update Failed', data.message || 'Failed to update password.', 'error');
          }
        } catch (error) {
          console.error('Password update error:', error);
          showToast('Error', 'An unexpected error occurred. Please try again later.', 'error');
        } finally {
          // Reset button state in case of error
          submitBtn.innerHTML = originalText;
          submitBtn.disabled = false;
        }
      });
    });
  </script>
</body>

</html>