<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Forgot Password OTP Verification</title>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&display=swap" rel="stylesheet">

    <link rel="stylesheet" href="../../styles/user/forgot-verify-otp.css">

</head>
<body>
    <div class="otp-card">
        <h2>Verify Your OTP</h2>
        <p>Enter the 6-digit code sent to your registered email</p>
        <div class="otp-container">
            <input type="text" class="otp-input" maxlength="1" inputmode="numeric" pattern="[0-9]*" />
            <input type="text" class="otp-input" maxlength="1" inputmode="numeric" pattern="[0-9]*" />
            <input type="text" class="otp-input" maxlength="1" inputmode="numeric" pattern="[0-9]*" />
            <input type="text" class="otp-input" maxlength="1" inputmode="numeric" pattern="[0-9]*" />
            <input type="text" class="otp-input" maxlength="1" inputmode="numeric" pattern="[0-9]*" />
            <input type="text" class="otp-input" maxlength="1" inputmode="numeric" pattern="[0-9]*" />
        </div>
        <div id="error-message"></div>
        <div id="timer">Timer: 00:30</div>
        <div class="btn">
            <button id="verify-btn" disabled>Verify OTP</button>
            <button id="resend-btn" disabled>Resend OTP</button>
        </div>
    </div>

    <!-- Toast Container -->
    <div id="toast-container" style="position: fixed; bottom: 20px; right: 20px; z-index: 9999;"></div>
    
    <style>
        .toast {
            background: white;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            margin-bottom: 10px;
            padding: 16px 20px;
            min-width: 300px;
            max-width: 400px;
            display: flex;
            align-items: center;
            gap: 12px;
            transform: translateX(100%);
            transition: all 0.3s ease;
            border-left: 4px solid;
        }
        
        .toast.show {
            transform: translateX(0);
        }
        
        .toast.success {
            border-left-color: #10b981;
        }
        
        .toast.error {
            border-left-color: #ef4444;
        }
        
        .toast.warning {
            border-left-color: #f59e0b;
        }
        
        .toast.info {
            border-left-color: #3b82f6;
        }
        
        .toast-icon {
            font-size: 20px;
            flex-shrink: 0;
        }
        
        .toast.success .toast-icon {
            color: #10b981;
        }
        
        .toast.error .toast-icon {
            color: #ef4444;
        }
        
        .toast.warning .toast-icon {
            color: #f59e0b;
        }
        
        .toast.info .toast-icon {
            color: #3b82f6;
        }
        
        .toast-content {
            flex: 1;
        }
        
        .toast-title {
            font-weight: 600;
            margin-bottom: 4px;
            color: #111827;
        }
        
        .toast-message {
            color: #6b7280;
            font-size: 14px;
        }
        
        .toast-close {
            background: none;
            border: none;
            color: #9ca3af;
            cursor: pointer;
            font-size: 18px;
            padding: 0;
            width: 20px;
            height: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .toast-close:hover {
            color: #6b7280;
        }
    </style>

    <script>
        // Toast notification system
        function showToast(title, message, type = 'info', duration = 4000) {
            const container = document.getElementById('toast-container');
            const toast = document.createElement('div');
            toast.className = `toast ${type}`;
            
            const icons = {
                success: 'fas fa-check-circle',
                error: 'fas fa-exclamation-circle',
                warning: 'fas fa-exclamation-triangle',
                info: 'fas fa-info-circle'
            };
            
            toast.innerHTML = `
                <div class="toast-icon">
                    <i class="${icons[type]}"></i>
                </div>
                <div class="toast-content">
                    <div class="toast-title">${title}</div>
                    <div class="toast-message">${message}</div>
                </div>
                <button class="toast-close" onclick="removeToast(this.parentElement)">
                    <i class="fas fa-times"></i>
                </button>
            `;
            
            container.appendChild(toast);
            
            // Trigger animation
            setTimeout(() => toast.classList.add('show'), 100);
            
            // Auto remove
            setTimeout(() => removeToast(toast), duration);
        }
        
        function removeToast(toast) {
            if (toast && toast.parentElement) {
                toast.classList.remove('show');
                setTimeout(() => {
                    if (toast.parentElement) {
                        toast.parentElement.removeChild(toast);
                    }
                }, 300);
            }
        }

        // OTP Validation Class
        class OTPValidator {
            constructor() {
                this.otpInputs = document.querySelectorAll('.otp-input');
                this.errorMessage = document.getElementById('error-message');
                this.verifyButton = document.getElementById('verify-btn');
                this.setupEventListeners();
            }

            setupEventListeners() {
                this.otpInputs.forEach((input, index) => {
                    input.addEventListener('input', (e) => this.handleInput(e, index));
                    input.addEventListener('keydown', (e) => this.handleKeyDown(e, index));
                    input.addEventListener('paste', (e) => this.handlePaste(e));
                    input.addEventListener('blur', () => this.validateInput(input));
                });
            }

            handleInput(e, index) {
                const value = e.target.value;
                
                if (!/^\d*$/.test(value)) {
                    e.target.value = '';
                    this.showError('Only numbers are allowed');
                    this.markInputAsError(e.target);
                    return;
                }

                this.clearError();
                this.markInputAsSuccess(e.target);

                if (value.length === 1 && index < this.otpInputs.length - 1) {
                    this.otpInputs[index + 1].focus();
                }

                this.toggleVerifyButton();
            }

            handleKeyDown(e, index) {
                if (e.key === 'Backspace') {
                    if (e.target.value === '' && index > 0) {
                        this.otpInputs[index - 1].focus();
                    }
                }
                
                if (e.key === 'ArrowLeft' && index > 0) {
                    this.otpInputs[index - 1].focus();
                    e.preventDefault();
                }
                if (e.key === 'ArrowRight' && index < this.otpInputs.length - 1) {
                    this.otpInputs[index + 1].focus();
                    e.preventDefault();
                }

                if (e.key === 'Enter') {
                    this.verifyOTP();
                }
            }

            handlePaste(e) {
                e.preventDefault();
                const pastedData = e.clipboardData.getData('text').trim();
                
                if (!/^\d{6}$/.test(pastedData)) {
                    this.showError('Please paste a valid 6-digit OTP');
                    return;
                }

                for (let i = 0; i < 6; i++) {
                    this.otpInputs[i].value = pastedData[i];
                    this.markInputAsSuccess(this.otpInputs[i]);
                }

                this.clearError();
                this.toggleVerifyButton();
                this.otpInputs[5].focus();
            }

            validateInput(input) {
                if (input.value && !/^\d$/.test(input.value)) {
                    this.markInputAsError(input);
                    this.showError('Invalid character entered');
                } else if (input.value) {
                    this.markInputAsSuccess(input);
                } else {
                    this.clearInputState(input);
                }
            }

            getOTPValue() {
                return Array.from(this.otpInputs).map(input => input.value.trim()).join('');
            }

            validateOTP() {
                const otpValue = this.getOTPValue();
                
                if (otpValue.length !== 6) {
                    this.showError('Please enter all 6 digits');
                    this.highlightEmptyInputs();
                    return false;
                }

                if (!/^\d{6}$/.test(otpValue)) {
                    this.showError('OTP must contain only numbers');
                    return false;
                }

                if (otpValue === '000000') {
                    this.showError('Invalid OTP. All zeros are not allowed.');
                    this.highlightAllInputsAsError();
                    return false;
                }

                const isSequential = /^(012345|123456|234567|345678|456789|567890|654321|543210|432109|321098|210987|109876)$/.test(otpValue);
                if (isSequential) {
                    this.showError('Suspicious OTP. Sequential numbers are not allowed.');
                    this.highlightAllInputsAsError();
                    return false;
                }

                if (timerManager.timeLeft <= 0) {
                    this.showError('OTP has expired. Please request a new one.');
                    this.highlightAllInputsAsError();
                    return false;
                }

                this.clearError();
                return true;
            }

            highlightEmptyInputs() {
                this.otpInputs.forEach(input => {
                    if (!input.value.trim()) {
                        this.markInputAsError(input);
                    }
                });
            }

            showError(message) {
                this.errorMessage.textContent = message;
                this.errorMessage.style.color = '#ff4d4d';
            }

            clearError() {
                this.errorMessage.textContent = '';
            }

            markInputAsError(input) {
                input.classList.remove('success');
                input.classList.add('error');
            }

            markInputAsSuccess(input) {
                input.classList.remove('error');
                input.classList.add('success');
            }

            clearInputState(input) {
                input.classList.remove('error', 'success');
            }

            clearAllInputs() {
                this.otpInputs.forEach(input => {
                    input.value = '';
                    this.clearInputState(input);
                });
                this.clearError();
                this.toggleVerifyButton();
                this.otpInputs[0].focus();
            }

            toggleVerifyButton() {
                const otpValue = this.getOTPValue();
                this.verifyButton.disabled = otpValue.length !== 6 || this.verifyButton.classList.contains('expired');
            }

            verifyOTP() {
                if (!this.validateOTP()) {
                    return;
                }

                const otpValue = this.getOTPValue();
                
                this.verifyButton.classList.add('loading');
                this.verifyButton.disabled = true;
                this.verifyButton.textContent = '';

                fetch("/forgot-verify-otp", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify({ otp: otpValue })
                })
                .then(response => response.json().catch(() => {
                    throw new Error('Invalid response format');
                }))
                .then(data => {
                    if (typeof data !== 'object' || data === null) {
                        throw new Error('Invalid response format');
                    }

                    if (data.success) {
                        clearInterval(timerManager.timerInterval);
                        sessionStorage.removeItem('forgotOtpTimerEndTime');
                        
                        showToast('Success!', 'OTP verified successfully', 'success');
                        setTimeout(() => {
                            if (data.redirectUrl && typeof data.redirectUrl === 'string') {
                                window.location.href = data.redirectUrl;
                            } else {
                                console.warn('No valid redirect URL provided');
                                window.location.href = '/reset-password';
                            }
                        }, 1500);
                    } else {
                        this.showError(data.message || 'Invalid OTP. Please try again.');
                        this.highlightAllInputsAsError();
                    }
                })
                .catch(error => {
                    console.error("Error:", error);
                    let errorMessage = "Unable to verify OTP. Please check your connection and try again.";
                    if (error.message.includes('Invalid response format')) {
                        errorMessage = "Server response was invalid. Please try again.";
                    } else if (error.message.includes('Failed to fetch')) {
                        errorMessage = "Network error. Please check your internet connection.";
                    }
                    this.showError(errorMessage);
                    this.highlightAllInputsAsError();
                })
                .finally(() => {
                    this.verifyButton.classList.remove('loading');
                    this.verifyButton.disabled = this.verifyButton.classList.contains('expired');
                    this.verifyButton.textContent = 'Verify OTP';
                });
            }

            highlightAllInputsAsError() {
                this.otpInputs.forEach(input => {
                    this.markInputAsError(input);
                });
            }
        }

        // Timer Management Class
        class TimerManager {
            constructor(duration = 30) {
                this.duration = duration;
                this.timerElement = document.getElementById('timer');
                this.resendButton = document.getElementById('resend-btn');
                this.verifyButton = document.getElementById('verify-btn');
                this.timeLeft = this.duration;
                this.timerInterval = null;
                this.initialize();
            }

            initialize() {
                const storedEndTime = sessionStorage.getItem('forgotOtpTimerEndTime');
                if (storedEndTime) {
                    const endTime = parseInt(storedEndTime, 10);
                    const currentTime = Date.now();
                    const remainingTimeMs = endTime - currentTime;
                    this.timeLeft = Math.max(0, Math.floor(remainingTimeMs / 1000));
                    
                    if (this.timeLeft <= 0) {
                        this.expire();
                        return;
                    }
                } else {
                    this.timeLeft = this.duration;
                    this.storeEndTime();
                }
                
                this.updateDisplay();
                this.start();
            }

            start() {
                this.timerInterval = setInterval(() => {
                    this.timeLeft--;
                    this.storeEndTime();
                    this.updateDisplay();
                    
                    if (this.timeLeft <= 0) {
                        this.expire();
                    }
                }, 1000);
            }

            updateDisplay() {
                const minutes = Math.floor(this.timeLeft / 60);
                const seconds = this.timeLeft % 60;
                this.timerElement.textContent = `Timer: ${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
                
                if (this.timeLeft <= 10) {
                    this.timerElement.style.color = '#ff4d4d';
                } else {
                    this.timerElement.style.color = '#1a1a1a';
                }
            }

            expire() {
                clearInterval(this.timerInterval);
                this.timerElement.textContent = 'Time expired';
                this.timerElement.classList.add('expired');
                this.resendButton.disabled = false;
                this.verifyButton.disabled = true;
                this.verifyButton.classList.add('expired');
                sessionStorage.removeItem('forgotOtpTimerEndTime');
                
                showToast('OTP Expired', 'Please request a new OTP', 'warning');
            }

            reset() {
                clearInterval(this.timerInterval);
                this.timeLeft = this.duration;
                this.timerElement.classList.remove('expired');
                this.resendButton.disabled = true;
                this.verifyButton.disabled = false;
                this.verifyButton.classList.remove('expired');
                this.storeEndTime();
                this.updateDisplay();
                this.start();
            }

            storeEndTime() {
                const endTime = Date.now() + (this.timeLeft * 1000);
                sessionStorage.setItem('forgotOtpTimerEndTime', endTime.toString());
            }
        }

        // Initialize components
        const otpValidator = new OTPValidator();
        const timerManager = new TimerManager(30);

        // Verify button event listener
        document.getElementById('verify-btn').addEventListener('click', () => {
            otpValidator.verifyOTP();
        });

        // Resend button event listener
        document.getElementById('resend-btn').addEventListener('click', () => {
            const resendBtn = document.getElementById('resend-btn');
            resendBtn.classList.add('loading');
            resendBtn.disabled = true;
            resendBtn.textContent = '';

            Swal.fire({
                title: 'Sending OTP...',
                allowOutsideClick: false,
                didOpen: () => {
                    Swal.showLoading();
                }
            });

            fetch('/resend-forgot-verify-otp', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({})
            })
            .then(response => response.json().catch(() => {
                throw new Error('Invalid response format');
            }))
            .then(data => {
                if (data.success) {
                    Swal.close();
                    showToast('OTP Sent', 'A new OTP has been sent to your email.', 'success');

                    timerManager.reset();
                    otpValidator.clearAllInputs();
                } else {
                    Swal.close();
                    showToast('Error', data.message || 'Failed to resend OTP. Please try again.', 'error');
                    resendBtn.disabled = false;
                }
            })
            .catch(error => {
                console.error('Error:', error);
                Swal.close();
                showToast('Error', 'Failed to resend OTP. Please try again.', 'error');
                resendBtn.disabled = false;
            })
            .finally(() => {
                resendBtn.classList.remove('loading');
                resendBtn.textContent = 'Resend OTP';
            });
        });

        // Auto-clear error message after 5 seconds
        let errorTimeout;
        const originalShowError = otpValidator.showError;
        otpValidator.showError = function(message) {
            originalShowError.call(this, message);
            clearTimeout(errorTimeout);
            errorTimeout = setTimeout(() => {
                this.clearError();
            }, 5000);
        };

        // Prevent form submission on Enter key globally
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Enter') {
                e.preventDefault();
                otpValidator.verifyOTP();
            }
        });

        // Focus management
        document.addEventListener('click', (e) => {
            if (!e.target.classList.contains('otp-input') && !e.target.classList.contains('btn')) {
                const emptyInput = Array.from(otpValidator.otpInputs).find(input => !input.value);
                if (emptyInput) {
                    emptyInput.focus();
                } else {
                    otpValidator.otpInputs[5].focus();
                }
            }
        });
    </script>
</body>
</html>