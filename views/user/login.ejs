<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Arvenclaire - Login</title>
  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <!-- Bootstrap Icons -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet">
  <!-- SweetAlert2 CSS -->
  <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet">
  <!-- Animate.css -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" />
  <link rel="stylesheet" href="../../styles/user/user-login.css">
  <!-- All styles are now in user-login.css -->
</head>

<body>
  <div class="container d-flex align-items-center justify-content-center login-wrapper">
    <div class="row login-box">
      <!-- Left Image Column -->
      <div class="col-md-6 d-none d-md-block p-0">
        <img src="../../assets/login-img.jpg" alt="Login Image" class="login-img">
      </div>

      <!-- Right Form Column -->
      <div class="col-md-6 p-5 bg-white">
        <div class="text-center mb-4">
          <h2 style="font-family: 'Times New Roman', Times, serif;font-weight: bolder;">ARVENCLAIRE</h2>
          <p class="text-muted" style="font-weight: bold;">Log into your account</p>
        </div>

        <form id="loginForm" novalidate>
          <div class="mb-3">
            <label for="email" class="form-label">Email address</label>
            <input type="email" class="form-control" id="email" placeholder="Enter your email" required>
            <div class="error-message" id="email-error">Please enter a valid email address</div>
          </div>

          <div class="mb-3 password-wrapper">
            <label for="password" class="form-label">Password</label>
            <input type="password" class="form-control" id="password" placeholder="Enter your password" required>
            <i class="bi bi-lock password-toggle" id="password-toggle"></i>
            <div class="error-message" id="password-error">Please enter a valid password</div>
          </div>

          <div class="mb-3 text-end">
            <a href="/forgot-password" class="forgot-password-link">Forgot Password?</a>
          </div>

          <button type="submit" class="btn btn-dark w-100 mb-3" id="loginBtn">
            <span id="loginBtnText">Log In</span>
            <span id="loginBtnSpinner" class="spinner-border spinner-border-sm d-none" role="status" aria-hidden="true"></span>
          </button>

          <div class="divider text-center text-muted my-3">or</div>

          <a href="/auth/google" class="btn btn-outline-secondary w-100 d-flex align-items-center justify-content-center p-2"
            role="button">
            <img src="../../assets/google-icon.png" alt="Google logo" width="20" height="20"
              style="margin-right: 10px;">
            Sign up with Google
          </a>

          <div class="text-center mt-3">
            Don't have an account? <a href="/signup" class="text-dark">Sign Up</a>
          </div>
        </form>
      </div>
    </div>
  </div>

  <!-- Toast Container -->
  <div id="toast-container" style="position: fixed; bottom: 20px; right: 20px; z-index: 9999;"></div>
  
  <style>
      .toast {
          background: white;
          border-radius: 8px;
          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
          margin-bottom: 10px;
          padding: 16px 20px;
          min-width: 300px;
          max-width: 400px;
          display: flex;
          align-items: center;
          gap: 12px;
          transform: translateX(100%);
          transition: all 0.3s ease;
          border-left: 4px solid;
      }
      
      .toast.show {
          transform: translateX(0);
      }
      
      .toast.success {
          border-left-color: #10b981;
      }
      
      .toast.error {
          border-left-color: #ef4444;
      }
      
      .toast.warning {
          border-left-color: #f59e0b;
      }
      
      .toast.info {
          border-left-color: #3b82f6;
      }
      
      .toast-icon {
          font-size: 20px;
          flex-shrink: 0;
      }
      
      .toast.success .toast-icon {
          color: #10b981;
      }
      
      .toast.error .toast-icon {
          color: #ef4444;
      }
      
      .toast.warning .toast-icon {
          color: #f59e0b;
      }
      
      .toast.info .toast-icon {
          color: #3b82f6;
      }
      
      .toast-content {
          flex: 1;
      }
      
      .toast-title {
          font-weight: 600;
          margin-bottom: 4px;
          color: #111827;
      }
      
      .toast-message {
          color: #6b7280;
          font-size: 14px;
      }
      
      .toast-close {
          background: none;
          border: none;
          color: #9ca3af;
          cursor: pointer;
          font-size: 18px;
          padding: 0;
          width: 20px;
          height: 20px;
          display: flex;
          align-items: center;
          justify-content: center;
      }
      
      .toast-close:hover {
          color: #6b7280;
      }
  </style>

  <!-- Bootstrap JS -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <!-- SweetAlert2 JS -->
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  
  <!-- Login Script -->
  <script>
    // Toast notification system
    function showToast(title, message, type = 'info', duration = 4000) {
        const container = document.getElementById('toast-container');
        const toast = document.createElement('div');
        toast.className = `toast ${type}`;
        
        const icons = {
            success: 'bi bi-check-circle-fill',
            error: 'bi bi-exclamation-circle-fill',
            warning: 'bi bi-exclamation-triangle-fill',
            info: 'bi bi-info-circle-fill'
        };
        
        toast.innerHTML = `
            <div class="toast-icon">
                <i class="${icons[type]}"></i>
            </div>
            <div class="toast-content">
                <div class="toast-title">${title}</div>
                <div class="toast-message">${message}</div>
            </div>
            <button class="toast-close" onclick="removeToast(this.parentElement)">
                <i class="bi bi-x"></i>
            </button>
        `;
        
        container.appendChild(toast);
        
        // Trigger animation
        setTimeout(() => toast.classList.add('show'), 100);
        
        // Auto remove
        setTimeout(() => removeToast(toast), duration);
    }
    
    function removeToast(toast) {
        if (toast && toast.parentElement) {
            toast.classList.remove('show');
            setTimeout(() => {
                if (toast.parentElement) {
                    toast.parentElement.removeChild(toast);
                }
            }, 300);
        }
    }

    document.addEventListener('DOMContentLoaded', () => {
      // Check if user was redirected due to being blocked
      const urlParams = new URLSearchParams(window.location.search);
      if (urlParams.get('blocked') === 'true') {
        // Show the blocked account modal immediately
        Swal.fire({
          icon: 'warning',
          title: 'Account Blocked',
          text: 'Your account has been blocked by the administrator. Please contact support for assistance.',
          confirmButtonColor: '#dc3545',
          confirmButtonText: 'Understood',
          allowOutsideClick: false,
          allowEscapeKey: false,
          customClass: {
            popup: 'blocked-user-modal'
          }
        }).then(() => {
          // Clean up the URL after user acknowledges
          window.history.replaceState({}, document.title, window.location.pathname);
        });
      }
      const loginForm = document.getElementById('loginForm');
      const fields = [
        {
          id: 'email',
          validate: (value) => /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(value.trim()),
          errorElement: 'email-error'
        },
        {
          id: 'password',
          validate: (value) => /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/.test(value),
          errorElement: 'password-error'
        }
      ];

      // Real-time validation
      function validateField(field) {
        const input = document.getElementById(field.id);
        const isValid = field.validate(input.value);
        input.classList.toggle('is-invalid', !isValid);
        return isValid;
      }

      fields.forEach(field => {
        const input = document.getElementById(field.id);
        input.addEventListener('input', () => validateField(field));
      });

     // Password toggle functionality
    function setupPasswordToggle(inputId, toggleId) {
      const input = document.getElementById(inputId);
      const toggle = document.getElementById(toggleId);
      toggle.addEventListener("click", () => {
        const isPassword = input.type === "password";
        input.type = isPassword ? "text" : "password";
        toggle.classList.toggle("bi-unlock", isPassword);
        toggle.classList.toggle("bi-lock", !isPassword);
      });
    }

    setupPasswordToggle("password", "password-toggle");

      // Loading state functions
      function setLoadingState(isLoading) {
        const loginBtn = document.getElementById('loginBtn');
        const loginBtnText = document.getElementById('loginBtnText');
        const loginBtnSpinner = document.getElementById('loginBtnSpinner');
        
        if (isLoading) {
          loginBtn.disabled = true;
          loginBtnText.textContent = 'Logging in...';
          loginBtnSpinner.classList.remove('d-none');
        } else {
          loginBtn.disabled = false;
          loginBtnText.textContent = 'Log In';
          loginBtnSpinner.classList.add('d-none');
        }
      }

      // Form submit handling
      loginForm.addEventListener('submit', async (event) => {
        event.preventDefault();

        let isValid = true;
        fields.forEach(field => {
          if (!validateField(field)) {
            isValid = false;
          }
        });

        if (!isValid) {
          return;
        }

        const email = document.getElementById('email').value.trim();
        const password = document.getElementById('password').value;

        // Set loading state
        setLoadingState(true);

        try {
          const response = await fetch('/login', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ email, password }),
            credentials: 'include',
          });

          if (response.redirected) {
            showToast('Login Successful', 'Welcome to Home page', 'success');
            setTimeout(() => {
              window.location.href = response.url;
            }, 1500);
            return;
          }

          const data = await response.json();

          if (!data.success) {
            showToast('Login Failed', data.message || 'An error occurred during login.', 'error');
            setLoadingState(false);
            return;
          }
        } catch (error) {
          console.error('Login error:', error);
          showToast('Error', 'An unexpected error occurred. Please try again later.', 'error');
          setLoadingState(false);
        }
      });
    });
  </script>
</body>

</html>