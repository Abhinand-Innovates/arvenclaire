<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Checkout</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet">

    <%- include("../partials/user/header") %>

    <link rel="stylesheet" href="../../styles/user/checkout.css">

</head>
<body>
    <div class="checkout-container">
        <!-- Breadcrumb -->
        <div class="breadcrumb-container">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/">Home</a></li>
                    <li class="breadcrumb-item"><a href="/shop">Shop</a></li>
                    <li class="breadcrumb-item"><a href="/cart">Cart</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Checkout</li>
                </ol>
            </nav>
        </div>

        <div class="checkout-content">
            <div class="checkout-main">
                <!-- Address Selection -->
                <div class="address-section fade-in">
                    <div class="section-header">
                        <h3 class="section-title">
                            <i class="fas fa-map-marker-alt"></i>
                            Delivery Address
                        </h3>
                        <a href="/address/add?returnTo=checkout" class="btn-add-address">
                            <i class="fas fa-plus"></i>
                            Add New Address
                        </a>
                    </div>

                    <% if (addresses && addresses.length > 0) { %>
                        <div class="addresses-grid">
                            <% addresses.forEach((address, index) => { %>
                                <div class="address-card <%= index === 0 ? 'selected' : '' %>" 
                                     data-address-id="<%= address._id %>"
                                     onclick="selectAddress(this)">
                                    <% if (address.isDefault) { %>
                                        <div class="default-star">
                                            <i class="fas fa-star"></i>
                                        </div>
                                    <% } %>
                                    <div class="address-type"><%= address.addressType %></div>
                                    <div class="address-name"><%= address.name %></div>
                                    <div class="address-details">
                                        <%= address.landMark %>, <%= address.city %><br>
                                        <%= address.state %> - <%= address.pincode %>
                                    </div>
                                    <div class="address-phone">
                                        <i class="fas fa-phone"></i> <%= address.phone %>
                                    </div>
                                    <div class="address-actions">
                                        <a href="/address/edit/<%= address._id %>?returnTo=checkout" class="btn-edit">
                                            <i class="fas fa-edit"></i> Edit
                                        </a>
                                    </div>
                                </div>
                            <% }); %>
                        </div>
                    <% } else { %>
                        <div class="text-center py-4">
                            <i class="fas fa-map-marker-alt fa-3x text-muted mb-3"></i>
                            <h5>No addresses found</h5>
                            <p class="text-muted">Please add a delivery address to continue</p>
                            <a href="/address/add?returnTo=checkout" class="btn-add-address">
                                <i class="fas fa-plus"></i>
                                Add Address
                            </a>
                        </div>
                    <% } %>
                </div>

                <!-- Products Section -->
                <div class="products-section fade-in">
                    <div class="section-header">
                        <h3 class="section-title">
                            <i class="fas fa-shopping-bag"></i>
                            Order Items (<%= cartItems.length %> items)
                        </h3>
                    </div>

                    <% cartItems.forEach(item => { %>
                        <%
                            const quantity = item.quantity;
                            
                            // Use offer details if available, otherwise fall back to sale price
                            let finalPrice = item.price || item.productId.salePrice; // Cart should have final price stored
                            let originalPrice = item.productId.salePrice; // Original sale price before offers
                            let discountPercentage = 0;
                            let discountPerItem = 0;
                            
                            if (item.productId.offerDetails && item.productId.offerDetails.hasOffer) {
                                finalPrice = item.productId.offerDetails.finalPrice;
                                originalPrice = item.productId.offerDetails.originalPrice;
                                discountPercentage = item.productId.offerDetails.bestOfferPercentage;
                                discountPerItem = originalPrice - finalPrice;
                            }
                            
                            const itemTotal = finalPrice * quantity;
                            const totalDiscountForItem = discountPerItem * quantity;
                        %>
                        <div class="product-item">
                            <img src="/uploads/products/<%= item.productId.mainImage %>"
                                 alt="<%= item.productId.productName %>"
                                 class="product-image">
                            <div class="product-details">
                                <div class="product-name"><%= item.productId.productName %></div>
                                <div class="product-brand">Brand: <%= item.productId.brand %></div>
                                <div class="product-price">
                                    <span class="current-price">₹<%= Math.round(finalPrice) %></span>
                                    <% if (discountPerItem > 0) { %>
                                        <span class="original-price">₹<%= Math.round(originalPrice) %></span>
                                        <span class="discount-badge"><%= discountPercentage %>% OFF</span>
                                    <% } %>
                                </div>
                                <div class="quantity-info">
                                    Quantity: <%= quantity %> | Total: ₹<%= Math.round(itemTotal) %>
                                    <% if (totalDiscountForItem > 0) { %>
                                        <br><small style="color: var(--success-color);">You save: ₹<%= Math.round(totalDiscountForItem) %> on this item</small>
                                    <% } %>
                                </div>
                            </div>
                        </div>
                    <% }); %>
                </div>
            </div>

            <!-- Sidebar -->
            <div class="sidebar">
                <!-- Coupon Section -->
                <div class="coupon-section fade-in">
                    <div class="coupon-header">
                        <i class="fas fa-tag"></i>
                        <h4 class="coupon-title">Apply Coupon</h4>
                    </div>
                    
                    <div class="coupon-form">
                        <button class="btn-apply-coupon" id="applyCouponBtn" onclick="applyCoupon()">
                            Apply Coupon
                        </button>
                        <div class="coupon-input-group">
                            <input type="text" 
                                   class="coupon-input" 
                                   id="couponInput" 
                                   placeholder="Enter coupon code"
                                   maxlength="20"
                                   pattern="[A-Z0-9]+"
                                   title="Coupon code should contain only letters and numbers">
                        </div>
                    </div>

                    <!-- Coupon Status Messages -->
                    <div id="couponSuccess" class="coupon-success" style="display: none;">
                        <i class="fas fa-check-circle"></i>
                        <span id="couponSuccessText"></span>
                    </div>
                    
                    <div id="couponError" class="coupon-error" style="display: none;">
                        <i class="fas fa-exclamation-circle"></i>
                        <span id="couponErrorText"></span>
                    </div>
                </div>

                <!-- Order Summary -->
                <div class="order-summary fade-in">
                    <h3 class="section-title mb-3">
                        <i class="fas fa-receipt"></i>
                        Order Summary
                    </h3>

                    <%
                        // Calculate totals similar to cart page
                        let totalItemCount = 0;
                        let availableItemsCount = 0;
                        let outOfStockItemsCount = 0;
                        let availableQuantity = 0;
                        let outOfStockQuantity = 0;
                        let subtotalFromRegularPrice = 0;
                        let totalDiscountAmount = 0;

                        cartItems.forEach(item => {
                            totalItemCount += item.quantity;
                            
                            // Check if item is out of stock (assuming we have this info)
                            const isOutOfStock = item.productId.quantity === 0;
                            
                            if (isOutOfStock) {
                                outOfStockItemsCount++;
                                outOfStockQuantity += item.quantity;
                            } else {
                                availableItemsCount++;
                                availableQuantity += item.quantity;
                                
                                // Calculate discount based on regular price vs final price
                                const regularPrice = item.productId.regularPrice;
                                const finalPrice = item.price || item.productId.salePrice;
                                const quantity = item.quantity;
                                
                                // Subtotal based on regular prices
                                subtotalFromRegularPrice += regularPrice * quantity;
                                
                                // Calculate discount per item and total discount
                                const discountPerItem = regularPrice - finalPrice;
                                totalDiscountAmount += discountPerItem * quantity;
                            }
                        });
                    %>

                    <!-- Availability Breakdown (show only if there are out-of-stock items) -->
                    <% if (outOfStockItemsCount > 0) { %>
                        <div class="availability-breakdown">
                            <div class="breakdown-title">Cart Breakdown</div>
                            <div class="breakdown-item available">
                                <span><i class="bi bi-check-circle"></i> Available Items</span>
                                <span class="count"><%= availableItemsCount %> (<%= availableQuantity %> items)</span>
                            </div>
                            <div class="breakdown-item unavailable">
                                <span><i class="bi bi-x-circle"></i> Out of Stock</span>
                                <span class="count"><%= outOfStockItemsCount %> (<%= outOfStockQuantity %> items)</span>
                            </div>
                        </div>
                    <% } %>

                    <div class="summary-row">
                        <span class="summary-label">Subtotal (<%= totalItemCount %> items)</span>
                        <span class="summary-value">₹<%= Math.round(subtotalFromRegularPrice) %></span>
                    </div>

                    <div class="summary-row">
                        <span class="summary-label">Discount</span>
                        <span class="summary-value" style="color: var(--success-color);">
                            <% if (totalDiscountAmount > 0) { %>
                                -₹<%= Math.round(totalDiscountAmount) %>
                            <% } else { %>
                                ₹0.00
                            <% } %>
                        </span>
                    </div>

                    <div class="summary-row">
                        <span class="summary-label">Shipping</span>
                        <span class="summary-value">
                            <% if (orderSummary.shippingCharges === 0) { %>
                                <span style="color: var(--success-color);">FREE</span>
                            <% } else { %>
                                ₹<%= Math.round(orderSummary.shippingCharges) %>
                            <% } %>
                        </span>
                    </div>

                    <div id="couponDiscountRow" class="summary-row" style="display: none;">
                        <span class="summary-label">Coupon Discount</span>
                        <span class="summary-value" style="color: var(--success-color);" id="couponDiscountAmount">-₹0.00</span>
                    </div>

                    <div class="summary-row">
                        <span class="summary-label">Total</span>
                        <span class="summary-value" id="finalTotal">₹<%= Math.round(orderSummary.finalAmount) %></span>
                    </div>

                    <!-- Payment Method Section -->
                    <div class="mt-3 pt-3" style="border-top: 2px solid var(--border-color);">
                        <h5 class="mb-3" style="font-size: 1rem; font-weight: 600; color: var(--text-primary); display: flex; align-items: center; gap: 0.5rem;">
                            <i class="fas fa-credit-card"></i>
                            Payment Method
                        </h5>
                        
                        <div class="payment-methods">
                            <!-- Wallet Payment -->
                            <div class="payment-option <%= (user.walletBalance && user.walletBalance >= orderSummary.finalAmount) ? '' : 'disabled' %>" 
                                 data-payment="Wallet" onclick="selectPaymentMethod(this)">
                                <div class="payment-header">
                                    <div class="payment-icon">
                                        <i class="fas fa-wallet"></i>
                                    </div>
                                    <div class="payment-title">Wallet Payment</div>
                                </div>
                                <div class="payment-description">Pay using your wallet balance</div>
                                <div class="payment-balance">Balance: ₹<%= Math.round(user.walletBalance || 0) %></div>
                                <% if (!user.walletBalance || user.walletBalance < orderSummary.finalAmount) { %>
                                    <div class="payment-insufficient">Insufficient balance</div>
                                <% } %>
                                <div class="payment-selected-indicator">
                                    <i class="fas fa-check"></i>
                                </div>
                            </div>

                            <!-- Online Payment -->
                            <div class="payment-option" data-payment="Online Payment" onclick="selectPaymentMethod(this)">
                                <div class="payment-header">
                                    <div class="payment-icon">
                                        <i class="fas fa-credit-card"></i>
                                    </div>
                                    <div class="payment-title">Online Payment</div>
                                </div>
                                <div class="payment-description">UPI, Cards, Net Banking & More</div>
                                <div class="payment-selected-indicator">
                                    <i class="fas fa-check"></i>
                                </div>
                            </div>

                            <!-- Cash on Delivery -->
                            <% if (isCODAvailable) { %>
                            <div class="payment-option selected" data-payment="Cash on Delivery" onclick="selectPaymentMethod(this)">
                                <div class="payment-header">
                                    <div class="payment-icon">
                                        <i class="fas fa-money-bill-wave"></i>
                                    </div>
                                    <div class="payment-title">Cash on Delivery</div>
                                </div>
                                <div class="payment-description">Pay when your order is delivered</div>
                                <div class="payment-selected-indicator">
                                    <i class="fas fa-check"></i>
                                </div>
                            </div>
                            <% } else { %>
                            <div class="payment-option disabled" data-payment="Cash on Delivery">
                                <div class="payment-header">
                                    <div class="payment-icon">
                                        <i class="fas fa-money-bill-wave"></i>
                                    </div>
                                    <div class="payment-title">Cash on Delivery</div>
                                </div>
                                <div class="payment-insufficient">Cash on delivery is not available for orders above ₹4000</div>
                            </div>
                            <% } %>
                        </div>
                    </div>

                    <button class="btn-place-order" onclick="placeOrder()"
                            <%= addresses.length === 0 ? 'disabled' : '' %>>
                        <i class="fas fa-check-circle"></i>
                        Place Order
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Coupon Modal -->
    <div class="coupon-modal-overlay" id="couponModalOverlay" onclick="closeCouponModal()">
        <div class="coupon-modal" id="couponModal" onclick="event.stopPropagation()">
            <div class="coupon-modal-header">
                <h3 class="coupon-modal-title">
                    <i class="fas fa-tags"></i>
                    Available Coupons
                </h3>
                <button class="coupon-modal-close" onclick="closeCouponModal()">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="coupon-modal-body">
                <div class="coupon-list" id="couponList">
                    <% if (coupons && coupons.length > 0) { %>
                        <% coupons.forEach((coupon, index) => { %>
                            <%
                                // Determine coupon status
                                let couponStatus = 'active';
                                let statusColor = '#10b981'; // green for active
                                let statusIcon = 'fas fa-check-circle';
                                
                                const currentDate = new Date();
                                const expiryDate = coupon.expiry ? new Date(coupon.expiry) : null;
                                
                                if (expiryDate && currentDate > expiryDate) {
                                    couponStatus = 'expired';
                                    statusColor = '#ef4444'; // red for expired
                                    statusIcon = 'fas fa-times-circle';
                                } else if (coupon.usedCount >= coupon.usageLimit) {
                                    couponStatus = 'used';
                                    statusColor = '#f59e0b'; // orange for used up
                                    statusIcon = 'fas fa-exclamation-circle';
                                }
                            %>
                            <div class="coupon-item <%= couponStatus === 'active' ? '' : 'coupon-disabled' %>" 
                                 onclick="<%= couponStatus === 'active' ? `selectCouponFromModal('${coupon.code}')` : '' %>">
                                
                                <!-- Coupon Header with Code and Status -->
                                <div class="coupon-header-section">
                                    <div class="coupon-code"><%= coupon.code %></div>
                                    <div class="coupon-status" style="background-color: <%= statusColor %>;">
                                        <i class="<%= statusIcon %>"></i>
                                        <span><%= couponStatus.toUpperCase() %></span>
                                    </div>
                                </div>
                                
                                <!-- Description -->
                                <div class="coupon-description"><%= coupon.description %></div>
                                
                                <!-- Discount Amount/Percentage -->
                                <div class="coupon-discount-info">
                                    <div class="coupon-discount">
                                        <% if (coupon.discountType === 'percentage') { %>
                                            <%= coupon.discount %>% OFF
                                        <% } else { %>
                                            ₹<%= coupon.discount %> OFF
                                        <% } %>
                                    </div>
                                </div>
                                
                                <!-- Coupon Details Grid -->
                                <div class="coupon-details-grid">
                                    <div class="coupon-detail-item">
                                        <div class="detail-label">
                                            <i class="fas fa-shopping-cart"></i>
                                            Min. Purchase
                                        </div>
                                        <div class="detail-value">₹<%= coupon.minPurchase || 0 %></div>
                                    </div>
                                    
                                    <div class="coupon-detail-item">
                                        <div class="detail-label">
                                            <i class="fas fa-calendar-alt"></i>
                                            Validity
                                        </div>
                                        <div class="detail-value">
                                            <% if (coupon.expiry) { %>
                                                <%= new Date(coupon.expiry).toLocaleDateString('en-IN', { 
                                                    day: '2-digit', 
                                                    month: 'short', 
                                                    year: 'numeric' 
                                                }) %>
                                            <% } else { %>
                                                No Expiry
                                            <% } %>
                                        </div>
                                    </div>
                                    
                                    <div class="coupon-detail-item">
                                        <div class="detail-label">
                                            <i class="fas fa-user"></i>
                                            Per User Limit
                                        </div>
                                        <div class="detail-value">
                                            <%= coupon.userUsageLimit || 'Unlimited' %>
                                        </div>
                                    </div>
                                </div>
                                
                                <!-- Select Button -->
                                <% if (couponStatus === 'active') { %>
                                    <button class="coupon-select-btn" onclick="event.stopPropagation(); selectCouponFromModal('<%= coupon.code %>')">
                                        Select This Coupon
                                    </button>
                                <% } else { %>
                                    <button class="coupon-select-btn coupon-disabled-btn" disabled>
                                        <% if (couponStatus === 'expired') { %>
                                            Coupon Expired
                                        <% } else { %>
                                            Usage Limit Reached
                                        <% } %>
                                    </button>
                                <% } %>
                            </div>
                        <% }); %>
                    <% } else { %>
                        <div class="no-coupons">
                            <i class="fas fa-tag"></i>
                            <h4>No Coupons Available</h4>
                            <p>There are no active coupons at the moment. Check back later for exciting offers!</p>
                        </div>
                    <% } %>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.7/dist/js/bootstrap.bundle.min.js" integrity="sha384-ndDqU0Gzau9qJ1lfW4pNLlhNTkCfHzAVBReH9diLvGRem5+R9g2FzA8ZGN954O5Q" crossorigin="anonymous"></script>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <script>
        let selectedAddressId = null;
        let selectedPaymentMethod = <% if (isCODAvailable) { %>'Cash on Delivery'<% } else { %>'Online Payment'<% } %>;
        let appliedCoupon = <% if (appliedCoupon) { %>{ code: '<%= appliedCoupon.code %>', discount: <%= appliedCoupon.discount %> }<% } else { %>null<% } %>;
        let originalTotal = <%= orderSummary.finalAmount + (appliedCoupon ? appliedCoupon.discount : 0) %>;
        let currentTotal = <%= orderSummary.finalAmount %>;
        let isCODAvailable = <%= isCODAvailable ? 'true' : 'false' %>;

        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            // Set first address as selected if available
            const firstAddress = document.querySelector('.address-card');
            if (firstAddress) {
                selectedAddressId = firstAddress.dataset.addressId;
            }

            // Set correct default payment method based on COD availability
            initializePaymentMethods();

            // Show toast notification if address operation was successful
            <% if (addressSuccess) { %>
                const Toast = Swal.mixin({
                    toast: true,
                    position: 'bottom-end',
                    showConfirmButton: false,
                    timer: 3000,
                    timerProgressBar: true,
                    background: '#ffffff',
                    color: '#000000',
                    iconColor: '#28a745'
                });

                Toast.fire({
                    icon: 'success',
                    title: '<%= addressSuccess %>'
                });
            <% } %>

            // Show coupon removed message if applicable
            <% if (couponRemovedMessage) { %>
                const CouponToast = Swal.mixin({
                    toast: true,
                    position: 'bottom-end',
                    showConfirmButton: false,
                    timer: 5000,
                    timerProgressBar: true,
                    background: '#ffffff',
                    color: '#000000',
                    iconColor: '#ffc107'
                });

                CouponToast.fire({
                    icon: 'warning',
                    title: '<%= couponRemovedMessage %>'
                });
            <% } %>
            
            // Initialize coupon state if one is already applied
            if (appliedCoupon) {
                const couponInput = document.getElementById('couponInput');
                couponInput.value = appliedCoupon.code;
                
                const applyBtn = document.getElementById('applyCouponBtn');
                applyBtn.textContent = 'Remove Coupon';
                applyBtn.className = 'btn-remove-coupon';
                applyBtn.onclick = removeCoupon;
                
                showCouponSuccess(`Coupon applied! You saved ₹${Math.round(appliedCoupon.discount)}`);
            }

            // Add Enter key support for coupon input
            const couponInput = document.getElementById('couponInput');
            couponInput.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    const applyBtn = document.getElementById('applyCouponBtn');
                    if (!applyBtn.disabled) {
                        const manualCoupon = couponInput.value.trim();
                        if (manualCoupon) {
                            applyCouponDirectly(manualCoupon);
                        } else {
                            openCouponModal();
                        }
                    }
                }
            });

            // Add input validation
            couponInput.addEventListener('input', function(e) {
                // Convert to uppercase and remove spaces
                e.target.value = e.target.value.toUpperCase().replace(/\s/g, '');
                
                // Clear any previous error messages when user starts typing
                hideCouponMessages();
            });
        });

        // Initialize payment methods based on COD availability
        function initializePaymentMethods() {
            // Remove selected class from all payment options first
            document.querySelectorAll('.payment-option').forEach(option => {
                option.classList.remove('selected');
            });

            // Select appropriate default payment method
            if (isCODAvailable) {
                // COD is available, select it as default
                const codOption = document.querySelector('.payment-option[data-payment="Cash on Delivery"]');
                if (codOption && !codOption.classList.contains('disabled')) {
                    codOption.classList.add('selected');
                    selectedPaymentMethod = 'Cash on Delivery';
                }
            } else {
                // COD not available, select Online Payment as default
                const onlineOption = document.querySelector('.payment-option[data-payment="Online Payment"]');
                if (onlineOption && !onlineOption.classList.contains('disabled')) {
                    onlineOption.classList.add('selected');
                    selectedPaymentMethod = 'Online Payment';
                } else {
                    // Fallback to Wallet if available
                    const walletOption = document.querySelector('.payment-option[data-payment="Wallet"]');
                    if (walletOption && !walletOption.classList.contains('disabled')) {
                        walletOption.classList.add('selected');
                        selectedPaymentMethod = 'Wallet';
                    }
                }
            }
        }

        // Address selection
        function selectAddress(element) {
            // Remove selected class from all cards
            document.querySelectorAll('.address-card').forEach(card => {
                card.classList.remove('selected');
            });

            // Add selected class to clicked card
            element.classList.add('selected');
            selectedAddressId = element.dataset.addressId;

            // Enable place order button
            const placeOrderBtn = document.querySelector('.btn-place-order');
            placeOrderBtn.disabled = false;
        }

        // Payment method selection
        function selectPaymentMethod(element) {
            // Check if payment option is disabled
            if (element.classList.contains('disabled')) {
                return;
            }

            // Remove selected class from all payment options
            document.querySelectorAll('.payment-option').forEach(option => {
                option.classList.remove('selected');
            });

            // Add selected class to clicked option
            element.classList.add('selected');
            selectedPaymentMethod = element.dataset.payment;
        }

        // Coupon functionality - Open modal or remove coupon
        function applyCoupon() {
            const applyBtn = document.getElementById('applyCouponBtn');
            
            // If coupon is already applied, remove it
            if (appliedCoupon) {
                removeCoupon();
                return;
            }
            
            // Check if user entered a coupon code manually
            const couponInput = document.getElementById('couponInput');
            const manualCoupon = couponInput.value.trim();
            
            if (manualCoupon) {
                // Apply the manually entered coupon
                applyCouponDirectly(manualCoupon);
            } else {
                // Open the coupon modal
                openCouponModal();
            }
        }

        // Apply coupon directly (for manual entry)
        async function applyCouponDirectly(couponCode) {
            const applyBtn = document.getElementById('applyCouponBtn');
            applyBtn.disabled = true;
            applyBtn.textContent = 'Applying...';
            
            try {
                const response = await fetch('/checkout/apply-coupon', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        couponCode: couponCode,
                        orderAmount: originalTotal
                    })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    // Apply discount
                    appliedCoupon = {
                        code: result.couponCode,
                        discount: result.discount
                    };
                    
                    currentTotal = originalTotal - result.discount;
                    updateOrderSummary();
                    showCouponSuccess(result.message);
                    
                    // Change button to remove coupon
                    applyBtn.textContent = 'Remove Coupon';
                    applyBtn.className = 'btn-remove-coupon';
                } else {
                    showCouponError(result.message);
                    // Reset button
                    applyBtn.textContent = 'Apply Coupon';
                    applyBtn.className = 'btn-apply-coupon';
                }
            } catch (error) {
                console.error('Error applying coupon:', error);
                showCouponError('Error applying coupon. Please try again.');
                // Reset button
                applyBtn.textContent = 'Apply Coupon';
                applyBtn.className = 'btn-apply-coupon';
            } finally {
                applyBtn.disabled = false;
            }
        }

        // Open coupon modal
        function openCouponModal() {
            const overlay = document.getElementById('couponModalOverlay');
            const modal = document.getElementById('couponModal');
            
            // Show overlay first
            overlay.classList.add('active');
            
            // Add a small delay for smooth animation
            setTimeout(() => {
                modal.classList.add('active');
            }, 50);
            
            // Prevent body scroll
            document.body.style.overflow = 'hidden';
        }

        // Close coupon modal
        function closeCouponModal() {
            const overlay = document.getElementById('couponModalOverlay');
            const modal = document.getElementById('couponModal');
            
            // Hide modal first
            modal.classList.remove('active');
            
            // Hide overlay after modal animation
            setTimeout(() => {
                overlay.classList.remove('active');
                // Restore body scroll
                document.body.style.overflow = 'auto';
            }, 500);
        }

        // Select coupon from modal
        function selectCouponFromModal(couponCode) {
            // Close modal first
            closeCouponModal();
            
            // Set the coupon code in input
            const couponInput = document.getElementById('couponInput');
            couponInput.value = couponCode;
            
            // Apply the selected coupon after modal closes
            setTimeout(() => {
                applyCouponDirectly(couponCode);
            }, 600);
        }

        // Add escape key support for modal
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape') {
                const overlay = document.getElementById('couponModalOverlay');
                if (overlay.classList.contains('active')) {
                    closeCouponModal();
                }
            }
        });

        async function removeCoupon() {
            const applyBtn = document.getElementById('applyCouponBtn');
            applyBtn.disabled = true;
            applyBtn.textContent = 'Removing...';

            try {
                const response = await fetch('/checkout/remove-coupon', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                });

                const result = await response.json();

                if (result.success) {
                    appliedCoupon = null;
                    currentTotal = originalTotal;
                    updateOrderSummary();
                    hideCouponMessages();

                    // Reset coupon input
                    document.getElementById('couponInput').value = '';

                    // Change button back to apply
                    applyBtn.textContent = 'Apply Coupon';
                    applyBtn.className = 'btn-apply-coupon';
                    applyBtn.onclick = applyCoupon;
                } else {
                    showCouponError(result.message || 'Error removing coupon');
                }
            } catch (error) {
                console.error('Error removing coupon:', error);
                showCouponError('Error removing coupon. Please try again.');
            } finally {
                applyBtn.disabled = false;
            }
        }

        

        function updateOrderSummary() {
            const couponRow = document.getElementById('couponDiscountRow');
            const couponAmount = document.getElementById('couponDiscountAmount');
            const finalTotal = document.getElementById('finalTotal');
            
            if (appliedCoupon && appliedCoupon.discount > 0) {
                couponRow.style.display = 'flex';
                couponAmount.textContent = `-₹${Math.round(appliedCoupon.discount)}`;
            } else {
                couponRow.style.display = 'none';
            }
            
            finalTotal.textContent = `₹${Math.round(currentTotal)}`;
            
            // Update COD availability based on new total
            updateCODAvailability();
        }

        function updateCODAvailability() {
            const newCODAvailable = currentTotal <= 4000;
            const codOption = document.querySelector('.payment-option[data-payment="Cash on Delivery"]');
            
            if (!codOption) return;
            
            if (newCODAvailable !== isCODAvailable) {
                // COD availability has changed
                isCODAvailable = newCODAvailable;
                
                if (isCODAvailable) {
                    // COD is now available
                    codOption.classList.remove('disabled');
                    codOption.onclick = function() { selectPaymentMethod(this); };
                    codOption.querySelector('.payment-description').textContent = 'Pay when your order is delivered';
                    const insufficientDiv = codOption.querySelector('.payment-insufficient');
                    if (insufficientDiv) {
                        insufficientDiv.remove();
                    }
                } else {
                    // COD is no longer available
                    codOption.classList.add('disabled');
                    codOption.onclick = null;
                    codOption.querySelector('.payment-description').textContent = 'Not available for orders above ₹4000';
                    
                    // Add insufficient message if not present
                    if (!codOption.querySelector('.payment-insufficient')) {
                        const insufficientDiv = document.createElement('div');
                        insufficientDiv.className = 'payment-insufficient';
                        insufficientDiv.textContent = 'Online Payment is not available for orders above ₹4000';
                        codOption.appendChild(insufficientDiv);
                    }
                    
                    // If COD was selected, switch to Online Payment
                    if (selectedPaymentMethod === 'Cash on Delivery') {
                        codOption.classList.remove('selected');
                        const onlineOption = document.querySelector('.payment-option[data-payment="Online Payment"]');
                        if (onlineOption && !onlineOption.classList.contains('disabled')) {
                            onlineOption.classList.add('selected');
                            selectedPaymentMethod = 'Online Payment';
                        }
                    }
                }
            }
        }

        function showCouponSuccess(message) {
            hideCouponMessages();
            const successDiv = document.getElementById('couponSuccess');
            const successText = document.getElementById('couponSuccessText');
            successText.textContent = message;
            successDiv.style.display = 'flex';
        }

        function showCouponError(message) {
            hideCouponMessages();
            const errorDiv = document.getElementById('couponError');
            const errorText = document.getElementById('couponErrorText');
            errorText.textContent = message;
            errorDiv.style.display = 'flex';
        }

        function hideCouponMessages() {
            document.getElementById('couponSuccess').style.display = 'none';
            document.getElementById('couponError').style.display = 'none';
        }



        // Place order
        async function placeOrder() {
            if (!selectedAddressId) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Address Required',
                    text: 'Please select a delivery address',
                    position: 'bottom-end',
                    background: '#ffffff',
                    color: '#000000',
                    confirmButtonColor: '#000000',
                    iconColor: '#ffc107'
                });
                return;
            }

            // Validate COD selection for orders above ₹4000
            if (selectedPaymentMethod === 'Cash on Delivery' && currentTotal > 4000) {
                Swal.fire({
                    icon: 'error',
                    title: 'Payment Method Not Available',
                    text: 'Cash on Delivery is not available for orders above ₹4000. Please select Online Payment or Wallet Payment.',
                    position: 'bottom-end',
                    background: '#ffffff',
                    color: '#000000',
                    confirmButtonColor: '#000000',
                    iconColor: '#dc3545'
                });
                return;
            }
            
            const placeOrderBtn = document.querySelector('.btn-place-order');
            const originalText = placeOrderBtn.innerHTML;

            // Show loading state
            placeOrderBtn.disabled = true;
            placeOrderBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Placing Order...';

            try {
                if (selectedPaymentMethod === 'Online Payment') {
                    // Handle Razorpay payment
                    await handleOnlinePayment();
                } else {
                    // Handle COD and Wallet payments
                    const response = await fetch('/checkout/place-order', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            selectedAddressId: selectedAddressId,
                            paymentMethod: selectedPaymentMethod,
                            appliedCoupon: appliedCoupon,
                            finalAmount: currentTotal
                        })
                    });

                    const result = await response.json();

                    if (result.success) {
                        // Redirect to order success page
                        window.location.href = `/order-success/${result.orderId}`;
                    } else {
                        throw new Error(result.message || 'Failed to place order');
                    }
                }
            } catch (error) {
                console.error('Error placing order:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Order Failed',
                    text: error.message || 'Failed to place order. Please try again.',
                    position: 'bottom-end',
                    background: '#ffffff',
                    color: '#000000',
                    confirmButtonColor: '#000000',
                    iconColor: '#dc3545'
                });

                // Reset button
                placeOrderBtn.disabled = false;
                placeOrderBtn.innerHTML = originalText;
            }
        }

        // Handle online payment with Razorpay
        async function handleOnlinePayment() {
            try {
                // Create Razorpay order
                const response = await fetch('/checkout/create-razorpay-order', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        selectedAddressId: selectedAddressId,
                        paymentMethod: 'Online Payment',
                        appliedCoupon: appliedCoupon,
                        finalAmount: currentTotal
                    })
                });

                const result = await response.json();

                if (!result.success) {
                    throw new Error(result.message || 'Failed to create payment order');
                }

                // Initialize Razorpay
                const options = {
                    key: result.razorpayKeyId,
                    amount: result.amount,
                    currency: result.currency,
                    name: 'ARVENCLAIRE',
                    description: 'Order Payment',
                    order_id: result.razorpayOrderId,
                    prefill: {
                        name: result.prefill.name,
                        email: result.prefill.email,
                        contact: result.prefill.contact
                    },
                    theme: {
                        color: '#000000'
                    },
                    handler: async function (response) {
                        // Payment successful - verify payment
                        try {
                            const verifyResponse = await fetch('/checkout/verify-payment', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({
                                    razorpay_order_id: response.razorpay_order_id,
                                    razorpay_payment_id: response.razorpay_payment_id,
                                    razorpay_signature: response.razorpay_signature,
                                    orderId: result.orderId
                                })
                            });

                            const verifyResult = await verifyResponse.json();

                            if (verifyResult.success) {
                                // Payment verified successfully
                                Swal.fire({
                                    icon: 'success',
                                    title: 'Payment Successful!',
                                    text: 'Your payment has been processed successfully.',
                                    position: 'bottom-end',
                                    showConfirmButton: false,
                                    timer: 2000,
                                    timerProgressBar: true
                                }).then(() => {
                                    window.location.href = `/order-success/${result.orderId}`;
                                });
                            } else {
                                throw new Error(verifyResult.message || 'Payment verification failed');
                            }
                        } catch (error) {
                            console.error('Payment verification error:', error);
                            
                            // Mark payment as failed and redirect to failure page
                            try {
                                await fetch('/checkout/payment-failed', {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json'
                                    },
                                    body: JSON.stringify({
                                        orderId: result.orderId,
                                        error: { description: 'Payment verification failed' }
                                    })
                                });
                                
                                // Redirect to failure page
                                window.location.href = `/order-failure/${result.orderId}`;
                            } catch (failureError) {
                                // Fallback: show alert if redirect fails
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Payment Verification Failed',
                                    text: 'There was an issue verifying your payment. Please contact support.',
                                    confirmButtonColor: '#ef4444'
                                });
                            }
                        }
                    },
                    modal: {
                        ondismiss: function() {
                            // Payment modal closed - reset button
                            const placeOrderBtn = document.querySelector('.btn-place-order');
                            placeOrderBtn.disabled = false;
                            placeOrderBtn.innerHTML = '<i class="fas fa-check-circle"></i> Place Order';
                        }
                    }
                };

                // Create Razorpay instance and open payment modal
                const rzp = new Razorpay(options);
                
                rzp.on('payment.failed', async function (response) {
                    // Payment failed
                    try {
                        await fetch('/checkout/payment-failed', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                                orderId: result.orderId,
                                error: response.error
                            })
                        });

                        // Redirect to failure page instead of showing alert
                        window.location.href = `/order-failure/${result.orderId}`;

                    } catch (error) {
                        console.error('Error handling payment failure:', error);
                        
                        // Fallback: show alert if redirect fails
                        Swal.fire({
                            icon: 'error',
                            title: 'Payment Failed',
                            text: response.error.description || 'Payment was not successful',
                            confirmButtonColor: '#ef4444'
                        });

                        // Reset button
                        const placeOrderBtn = document.querySelector('.btn-place-order');
                        placeOrderBtn.disabled = false;
                        placeOrderBtn.innerHTML = '<i class="fas fa-check-circle"></i> Place Order';
                    }
                });

                rzp.open();

            } catch (error) {
                console.error('Error creating Razorpay order:', error);
                throw error;
            }
        }

            </script>

    <%- include("../partials/user/footer") %>
</body>
</html>