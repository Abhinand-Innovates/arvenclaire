<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Email Change OTP - ArvanClaire</title>
    <!-- Bootstrap Icons -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.3/font/bootstrap-icons.css">
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- SweetAlert2 CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
    <link rel="stylesheet" href="../../../styles/user/header.css">
</head>
<body>
    <!-- Include Account Sidebar -->
    <%- include("../partials/user/account-sidebar") %>

    <link rel="stylesheet" href="../../styles/user/email-change-otp.css">

<div class="main-content">
    <!-- Breadcrumb -->
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="/profile">My Profile</a></li>
            <li class="breadcrumb-item"><a href="/profile/edit">Edit Profile</a></li>
            <li class="breadcrumb-item active" aria-current="page">Verify Email Change</li>
        </ol>
    </nav>

    <!-- OTP Container -->
    <div class="otp-container">
        <div class="otp-header">
            <h2>Verify Email Change</h2>
            <p>Enter the 6-digit code sent to your email</p>
        </div>
        
        <div class="otp-body">
            <div class="otp-info">
                <p>We've sent a verification code to:</p>
                <div class="email-display"><%= email %></div>
            </div>

            <form id="otpForm">
                <div class="otp-input-container">
                    <input type="text" class="otp-input" maxlength="1" id="otp1" data-index="0">
                    <input type="text" class="otp-input" maxlength="1" id="otp2" data-index="1">
                    <input type="text" class="otp-input" maxlength="1" id="otp3" data-index="2">
                    <input type="text" class="otp-input" maxlength="1" id="otp4" data-index="3">
                    <input type="text" class="otp-input" maxlength="1" id="otp5" data-index="4">
                    <input type="text" class="otp-input" maxlength="1" id="otp6" data-index="5">
                </div>
                
                <div class="error-message" id="otp-error"></div>

                <div class="timer-container">
                    <div class="timer" id="timer">45</div>
                </div>

                <div class="otp-actions">
                    <button type="submit" class="btn btn-primary" id="verifyBtn">
                        Verify OTP
                    </button>
                    <a href="/profile/edit" class="btn btn-secondary">
                        Cancel
                    </a>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- New Email Modal -->
<div id="newEmailModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h3 class="modal-title">Enter New Email</h3>
            <button type="button" class="close" onclick="closeNewEmailModal()">&times;</button>
        </div>
        <div class="modal-body">
            <div class="form-group">
                <label for="newEmail" class="form-label">New Email Address</label>
                <input type="email" class="form-control" id="newEmail"
                       placeholder="Enter your new email address">
                <div class="error-message" id="newEmail-error"></div>
            </div>
        </div>
        <div class="modal-footer">
            <button type="button" class="btn btn-secondary" onclick="closeNewEmailModal()">Cancel</button>
            <button type="button" class="btn btn-primary" onclick="changeEmail()" id="changeEmailBtn">
                Update Email
            </button>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    // Set active sidebar item
    document.addEventListener('DOMContentLoaded', function() {
        // Remove active class from all menu items
        const menuItems = document.querySelectorAll('.menu-item');
        menuItems.forEach(item => item.classList.remove('active'));

        // Add active class to profile menu item
        const profileMenuItem = document.querySelector('a[href="/profile"]');
        if (profileMenuItem) {
            profileMenuItem.classList.add('active');
        }
    });

    // OTP Input Management
    class OTPValidator {
        constructor() {
            this.inputs = document.querySelectorAll('.otp-input');
            this.setupEventListeners();
        }

        setupEventListeners() {
            this.inputs.forEach((input, index) => {
                input.addEventListener('input', (e) => this.handleInput(e, index));
                input.addEventListener('keydown', (e) => this.handleKeydown(e, index));
                input.addEventListener('paste', (e) => this.handlePaste(e));
            });
        }

        handleInput(e, index) {
            const value = e.target.value;

            // Only allow numbers
            if (!/^\d$/.test(value)) {
                e.target.value = '';
                return;
            }

            // Move to next input
            if (value && index < this.inputs.length - 1) {
                this.inputs[index + 1].focus();
            }

            this.clearError();
        }

        handleKeydown(e, index) {
            // Handle backspace
            if (e.key === 'Backspace' && !e.target.value && index > 0) {
                this.inputs[index - 1].focus();
            }
        }

        handlePaste(e) {
            e.preventDefault();
            const pasteData = e.clipboardData.getData('text');
            const digits = pasteData.replace(/\D/g, '').slice(0, 6);

            digits.split('').forEach((digit, index) => {
                if (this.inputs[index]) {
                    this.inputs[index].value = digit;
                }
            });

            // Focus on the next empty input or the last input
            const nextEmptyIndex = digits.length < 6 ? digits.length : 5;
            this.inputs[nextEmptyIndex].focus();
        }

        getOTPValue() {
            return Array.from(this.inputs).map(input => input.value).join('');
        }

        clearAllInputs() {
            this.inputs.forEach(input => {
                input.value = '';
                input.classList.remove('error');
            });
            this.inputs[0].focus();
        }

        highlightEmptyInputs() {
            this.inputs.forEach(input => {
                if (!input.value) {
                    input.classList.add('error');
                } else {
                    input.classList.remove('error');
                }
            });
        }

        highlightAllInputsAsError() {
            this.inputs.forEach(input => input.classList.add('error'));
        }

        clearError() {
            this.inputs.forEach(input => input.classList.remove('error'));
            const errorElement = document.getElementById('otp-error');
            if (errorElement) {
                errorElement.textContent = '';
                errorElement.classList.remove('show');
            }
        }

        showError(message) {
            const errorElement = document.getElementById('otp-error');
            if (errorElement) {
                errorElement.textContent = message;
                errorElement.classList.add('show');
            }
        }

        validateOTP() {
            const otpValue = this.getOTPValue();

            if (otpValue.length !== 6) {
                this.showError('Please enter all 6 digits');
                this.highlightEmptyInputs();
                return false;
            }

            if (!/^\d{6}$/.test(otpValue)) {
                this.showError('OTP must contain only numbers');
                return false;
            }

            if (otpValue === '000000') {
                this.showError('Invalid OTP. All zeros are not allowed.');
                this.highlightAllInputsAsError();
                return false;
            }

            const isSequential = /^(012345|123456|234567|345678|456789|567890|654321|543210|432109|321098|210987|109876)$/.test(otpValue);
            if (isSequential) {
                this.showError('Suspicious OTP. Sequential numbers are not allowed.');
                this.highlightAllInputsAsError();
                return false;
            }

            this.clearError();
            return true;
        }
    }

    // Timer Management
    class TimerManager {
        constructor(duration = 45) {
            this.duration = duration;
            this.timeLeft = duration;
            this.timerElement = document.getElementById('timer');
            this.interval = null;
            this.start();
        }

        start() {
            this.updateDisplay();
            this.interval = setInterval(() => {
                this.timeLeft--;
                this.updateDisplay();

                if (this.timeLeft <= 0) {
                    this.expire();
                }
            }, 1000);
        }

        updateDisplay() {
            if (this.timerElement) {
                this.timerElement.textContent = `${this.timeLeft}s`;

                if (this.timeLeft <= 10) {
                    this.timerElement.classList.add('expired');
                } else {
                    this.timerElement.classList.remove('expired');
                }
            }
        }

        expire() {
            clearInterval(this.interval);
            if (this.timerElement) {
                this.timerElement.textContent = 'Expired';
                this.timerElement.classList.add('expired');
            }

            // Disable verify button
            const verifyBtn = document.getElementById('verifyBtn');
            if (verifyBtn) {
                verifyBtn.disabled = true;
                verifyBtn.textContent = 'OTP Expired';
            }

            Swal.fire({
                icon: 'warning',
                title: 'OTP Expired',
                text: 'The OTP has expired. Please start the email change process again.',
                confirmButtonColor: '#000000'
            }).then(() => {
                window.location.href = '/profile/edit';
            });
        }

        reset() {
            clearInterval(this.interval);
            this.timeLeft = this.duration;
            this.start();
        }
    }

    // Initialize components
    const otpValidator = new OTPValidator();
    const timerManager = new TimerManager(45);

    // Form submission
    document.getElementById('otpForm').addEventListener('submit', async function(e) {
        e.preventDefault();

        if (!otpValidator.validateOTP()) {
            return;
        }

        const otp = otpValidator.getOTPValue();
        const verifyBtn = document.getElementById('verifyBtn');

        verifyBtn.disabled = true;
        verifyBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Verifying...';

        try {
            const response = await fetch('/profile/email-change-otp', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ otp })
            });

            const data = await response.json();

            if (data.success) {
                // Clear timer
                clearInterval(timerManager.interval);

                // Show SweetAlert2 success message first
                Swal.fire({
                    icon: 'success',
                    title: 'OTP Verified!',
                    text: 'Your current email has been verified successfully. You can now enter your new email address.',
                    confirmButtonColor: '#000000',
                    confirmButtonText: 'Continue',
                    allowOutsideClick: false,
                    allowEscapeKey: false
                }).then((result) => {
                    if (result.isConfirmed) {
                        // Auto-open new email modal after success message is dismissed
                        document.getElementById('newEmailModal').style.display = 'block';
                    }
                });
            } else {
                otpValidator.showError(data.message || 'Invalid OTP. Please try again.');
                otpValidator.highlightAllInputsAsError();
            }
        } catch (error) {
            console.error('Error:', error);
            otpValidator.showError('An error occurred while verifying OTP');
        } finally {
            verifyBtn.disabled = false;
            verifyBtn.innerHTML = 'Verify OTP';
        }
    });

    // New email modal functions
    function closeNewEmailModal() {
        document.getElementById('newEmailModal').style.display = 'none';
        clearNewEmailError();
    }



    function showNewEmailError(message) {
        const errorElement = document.getElementById('newEmail-error');
        const inputElement = document.getElementById('newEmail');
        if (errorElement) {
            errorElement.textContent = message;
            errorElement.classList.add('show');
        }
        if (inputElement) {
            inputElement.classList.add('error');
        }
    }

    function clearNewEmailError() {
        const errorElement = document.getElementById('newEmail-error');
        const inputElement = document.getElementById('newEmail');
        if (errorElement) {
            errorElement.textContent = '';
            errorElement.classList.remove('show');
        }
        if (inputElement) {
            inputElement.classList.remove('error');
        }
    }

    // Change email function
    async function changeEmail() {
        const newEmail = document.getElementById('newEmail').value.trim();

        if (!newEmail) {
            showNewEmailError('Please enter a new email address');
            return;
        }

        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(newEmail)) {
            showNewEmailError('Please enter a valid email address');
            return;
        }

        clearNewEmailError();

        const changeBtn = document.getElementById('changeEmailBtn');
        changeBtn.disabled = true;
        changeBtn.textContent = 'Updating...';

        try {
            const response = await fetch('/profile/change-email', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ newEmail })
            });

            const data = await response.json();

            if (data.success) {
                closeNewEmailModal();
                Swal.fire({
                    icon: 'success',
                    title: 'Success!',
                    text: 'Email address updated successfully',
                    confirmButtonColor: '#000000'
                }).then(() => {
                    window.location.href = '/profile';
                });
            } else {
                showNewEmailError(data.message || 'Failed to update email address');
            }
        } catch (error) {
            console.error('Error:', error);
            showNewEmailError('An error occurred while updating email');
        } finally {
            changeBtn.disabled = false;
            changeBtn.textContent = 'Update Email';
        }
    }

    // Close modal when clicking outside
    window.onclick = function(event) {
        const modal = document.getElementById('newEmailModal');
        if (event.target === modal) {
            closeNewEmailModal();
        }
    }

    // Real-time validation for new email input
    document.addEventListener('DOMContentLoaded', function() {
        // Focus on first OTP input on page load
        otpValidator.inputs[0].focus();

        // Add real-time validation for new email input
        const newEmailInput = document.getElementById('newEmail');
        if (newEmailInput) {
            newEmailInput.addEventListener('input', function() {
                const email = this.value.trim();
                if (email) {
                    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                    if (!emailRegex.test(email)) {
                        showNewEmailError('Please enter a valid email address');
                    } else {
                        clearNewEmailError();
                    }
                } else {
                    clearNewEmailError();
                }
            });

            newEmailInput.addEventListener('blur', function() {
                const email = this.value.trim();
                if (email && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
                    showNewEmailError('Please enter a valid email address');
                }
            });
        }
    });
</script>
</body>
</html>
