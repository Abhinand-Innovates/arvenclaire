x<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Order Details</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet">
    <%- include("../partials/user/account-sidebar") %>
    <link rel="stylesheet" href="../../styles/user/order-details.css">
</head>
<body>
    <!-- Main Content -->
    <div class="main-content">
        <!-- Breadcrumb -->
        <div class="breadcrumb-container">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/profile">My Account</a></li>
                    <li class="breadcrumb-item"><a href="/orders">My Orders</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Order Details</li>
                </ol>
            </nav>
        </div>

        <!-- Page Header -->
        <div class="page-header fade-in">
            <h1><i class="fas fa-receipt"></i> Order Details</h1>
            <p>View and manage your order information</p>
        </div>

        <div class="order-container">
            <div class="order-main">
                <!-- Order Information -->
                <div class="order-info-card fade-in">
                    <div class="card-header">
                        <h3 class="card-title">
                            <i class="fas fa-info-circle"></i>
                            Order Information
                        </h3>
                        <div class="order-status status-<%= order.status.toLowerCase().replace(/\s+/g, '-') %>">
                            <%= order.status %>
                        </div>
                    </div>

                    <div class="info-grid">
                        <div class="info-item">
                            <span class="info-label">Order ID</span>
                            <span class="info-value order-id-value"><%= order.orderId %></span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Order Date</span>
                            <span class="info-value">
                                <%= new Date(order.createdAt).toLocaleDateString('en-IN', {
                                    year: 'numeric',
                                    month: 'long',
                                    day: 'numeric'
                                }) %>
                            </span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Payment Method</span>
                            <span class="info-value"><%= order.paymentMethod %></span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Estimated Delivery</span>
                            <span class="info-value">
                                <%= new Date(order.estimatedDelivery).toLocaleDateString('en-IN', {
                                    year: 'numeric',
                                    month: 'long',
                                    day: 'numeric'
                                }) %>
                            </span>
                        </div>
                    </div>
                </div>

                <!-- Order Timeline -->
                <div class="order-info-card fade-in">
                    <div class="card-header">
                        <h3 class="card-title">
                            <i class="fas fa-clock"></i>
                            Order Timeline
                        </h3>
                    </div>

                    <div class="timeline">
                        <% order.orderTimeline.forEach(timeline => { %>
                            <div class="timeline-item">
                                <div class="timeline-content">
                                    <div class="timeline-status"><%= timeline.status %></div>
                                    <div class="timeline-description"><%= timeline.description %></div>
                                    <div class="timeline-date">
                                        <%= new Date(timeline.timestamp).toLocaleString('en-IN', {
                                            year: 'numeric',
                                            month: 'short',
                                            day: 'numeric',
                                            hour: '2-digit',
                                            minute: '2-digit'
                                        }) %>
                                    </div>
                                </div>
                            </div>
                        <% }); %>
                    </div>
                </div>

                <!-- Order Items -->
                <div class="order-info-card fade-in">
                    <div class="card-header">
                        <h3 class="card-title">
                            <i class="fas fa-box"></i>
                            Order Items (<%= order.orderedItems.length %>)
                        </h3>
                    </div>

                    <% order.orderedItems.forEach(item => { %>
                        <div class="order-item">
                            <img src="/uploads/products/<%= item.product.mainImage %>"
                                 alt="<%= item.product.productName %>"
                                 class="item-image">
                            <div class="item-details">
                                <div class="item-name"><%= item.product.productName %></div>
                                <div class="item-brand">Brand: <%= item.product.brand %></div>
                                <div class="item-price">
                                    <span class="current-price">₹<%= item.price.toFixed(2) %></span>
                                </div>
                                <div class="quantity-info">
                                    Quantity: <%= item.quantity %> | Total: ₹<%= item.totalPrice.toFixed(2) %>
                                </div>
                                <% if (item.status === 'Active' && !['Shipped', 'Delivered', 'Return Request', 'Returned', 'Cancelled'].includes(order.status)) { %>
                                    <div class="item-actions">
                                        <button class="btn-cancel-item" onclick="cancelOrderItem('<%= order.orderId %>', '<%= item._id %>')">
                                            <i class="fas fa-times"></i> Cancel
                                        </button>
                                    </div>
                                <% } %>
                            </div>
                            <div class="item-status <%= item.status.toLowerCase() %>">
                                <%= item.status %>
                            </div>
                        </div>
                    <% }); %>
                </div>

                <!-- Shipping Address -->
                <div class="order-info-card fade-in">
                    <div class="card-header">
                        <h3 class="card-title">
                            <i class="fas fa-map-marker-alt"></i>
                            Shipping Address
                        </h3>
                    </div>

                    <div class="address-details">
                        <div class="address-type" style="background: var(--text-primary); color: white; padding: 0.25rem 0.75rem; border-radius: 20px; font-size: 0.75rem; font-weight: 600; text-transform: uppercase; display: inline-block; margin-bottom: 0.75rem;">
                            <%= order.shippingAddress.addressType %>
                        </div>
                        <div style="font-weight: 600; color: var(--text-primary); margin-bottom: 0.5rem; font-size: 1rem;">
                            <%= order.shippingAddress.name %>
                        </div>
                        <div style="color: var(--text-secondary); line-height: 1.5; margin-bottom: 0.75rem; font-size: 0.875rem;">
                            <%= order.shippingAddress.landMark %>, <%= order.shippingAddress.city %><br>
                            <%= order.shippingAddress.state %> - <%= order.shippingAddress.pincode %>
                        </div>
                        <div style="color: var(--text-muted); font-size: 0.875rem; display: flex; align-items: center; gap: 0.5rem;">
                            <i class="fas fa-phone"></i> <%= order.shippingAddress.phone %>
                            <% if (order.shippingAddress.altPhone) { %>
                                | <%= order.shippingAddress.altPhone %>
                            <% } %>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Order Summary Sidebar -->
            <div class="order-summary fade-in">
                <h3 class="card-title mb-3">
                    <i class="fas fa-receipt"></i>
                    Order Summary
                </h3>

                <%
                    // Calculate current totals based on active items
                    const activeItems = order.orderedItems.filter(item => item.status === 'Active');
                    const cancelledItems = order.orderedItems.filter(item => item.status === 'Cancelled');
                    const currentSubtotal = activeItems.reduce((sum, item) => sum + item.totalPrice, 0);
                    const cancelledAmount = cancelledItems.reduce((sum, item) => sum + item.totalPrice, 0);
                    const originalOrderTotal = currentSubtotal + cancelledAmount;
                    
                    // Calculate proportional discount for active items only
                    let applicableDiscount = 0;
                    let currentTotal = 0;
                    
                    if (currentSubtotal > 0 && order.discount > 0 && originalOrderTotal > 0) {
                        // Calculate what proportion of the original order the active items represent
                        const activeItemsProportion = currentSubtotal / originalOrderTotal;
                        // Apply only the proportional discount to active items
                        applicableDiscount = Math.min(order.discount * activeItemsProportion, currentSubtotal);
                        currentTotal = Math.max(0, currentSubtotal - applicableDiscount + order.shippingCharges);
                    } else if (currentSubtotal > 0) {
                        currentTotal = currentSubtotal + order.shippingCharges;
                    }
                    
                    // Additional variables for cancel button logic
                    const canCancelOrder = !['Shipped', 'Delivered', 'Return Request', 'Returned', 'Cancelled'].includes(order.status);
                    const hasActiveItems = activeItems.length > 0;
                %>

                <div class="summary-row">
                    <span class="summary-label">Subtotal (Active Items)</span>
                    <span class="summary-value">₹<%= currentSubtotal.toFixed(2) %></span>
                </div>

                <% if (cancelledAmount > 0) { %>
                <div class="summary-row" style="color: #ef4444;">
                    <span class="summary-label">Cancelled Items</span>
                    <span class="summary-value">-₹<%= cancelledAmount.toFixed(2) %></span>
                </div>
                <% } %>

                <% if (order.discount > 0) { %>
                    <% if (cancelledAmount > 0 && applicableDiscount < order.discount) { %>
                    <div class="summary-row" style="color: #6c757d; font-size: 0.85em;">
                        <span class="summary-label">Original Discount</span>
                        <span class="summary-value">-₹<%= order.discount.toFixed(2) %></span>
                    </div>
                    <div class="summary-row" style="color: #ef4444; font-size: 0.85em;">
                        <span class="summary-label">Discount on Cancelled Items</span>
                        <span class="summary-value">+₹<%= (order.discount - applicableDiscount).toFixed(2) %></span>
                    </div>
                    <% } %>
                    <% if (applicableDiscount > 0) { %>
                    <div class="summary-row">
                        <span class="summary-label">
                            <% if (cancelledAmount > 0) { %>
                                Applicable Discount
                            <% } else { %>
                                Discount
                            <% } %>
                        </span>
                        <span class="summary-value" style="color: var(--success-color);">-₹<%= applicableDiscount.toFixed(2) %></span>
                    </div>
                    <% } %>
                <% } %>

                <% if (currentSubtotal > 0) { %>
                <div class="summary-row">
                    <span class="summary-label">Shipping</span>
                    <span class="summary-value">
                        <% if (order.shippingCharges === 0) { %>
                            <span style="color: var(--success-color);">FREE</span>
                        <% } else { %>
                            ₹<%= order.shippingCharges.toFixed(2) %>
                        <% } %>
                    </span>
                </div>
                <% } %>

                <div class="summary-row">
                    <span class="summary-label">
                        <% if (cancelledAmount > 0) { %>
                            Current Total
                        <% } else { %>
                            Total
                        <% } %>
                    </span>
                    <span class="summary-value">₹<%= currentTotal.toFixed(2) %></span>
                </div>

                <!-- Download Invoice Button -->
                <button class="btn-download-invoice" onclick="downloadInvoice('<%= order.orderId %>')">
                    <i class="fas fa-download"></i>
                    Download Invoice
                </button>

                <!-- Cancel Order Button / Return Button -->
                <% if (order.status === 'Delivered') { %>
                    <button class="btn-return-order" onclick="openReturnModal()">
                        <i class="fas fa-undo"></i>
                        Return Order
                    </button>
                <% } else if (canCancelOrder && hasActiveItems) { %>
                    <button class="btn-cancel-order" onclick="openCancelOrderModal()">
                        <i class="fas fa-times"></i>
                        <% if (order.status === 'Partially Cancelled') { %>
                            Cancel Remaining Items
                        <% } else { %>
                            Cancel Order
                        <% } %>
                    </button>
                <% } else if (!hasActiveItems && order.status === 'Partially Cancelled') { %>
                    <div style="margin-top: 1rem; padding: 0.75rem; background: #f8f9fa; border-radius: 8px; text-align: center; color: #6c757d; font-size: 0.875rem;">
                        <i class="fas fa-info-circle"></i>
                        All items have been cancelled
                    </div>
                <% } else { %>
                    <div style="margin-top: 1rem; padding: 0.75rem; background: #f8f9fa; border-radius: 8px; text-align: center; color: #6c757d; font-size: 0.875rem;">
                        <i class="fas fa-info-circle"></i>
                        Order cannot be cancelled at this stage
                    </div>
                <% } %>
            </div>
        </div>
    </div>

    <!-- Cancel Item Modal -->
    <div id="cancelItemModal" class="cancel-modal">
        <div class="cancel-modal-content">
            <div class="cancel-modal-header">
                <h3 class="cancel-modal-title">
                    <i class="fas fa-times-circle"></i>
                    Cancel Product
                </h3>
                <button class="cancel-modal-close" onclick="closeCancelModal()">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="cancel-modal-body">
                <div class="form-group">
                    <label for="cancelReason" class="form-label required">Cancellation Reason</label>
                    <select id="cancelReason" class="form-select" onchange="handleReasonChange()">
                        <option value="">Select a reason for cancellation</option>
                        <option value="Ordered by mistake">Ordered by mistake</option>
                        <option value="Found cheaper elsewhere">Found cheaper elsewhere</option>
                        <option value="Changed my mind">Changed my mind</option>
                        <option value="Product no longer needed">Product no longer needed</option>
                        <option value="Delivery taking too long">Delivery taking too long</option>
                        <option value="Financial constraints">Financial constraints</option>
                        <option value="Quality concerns">Quality concerns</option>
                        <option value="Other">Other</option>
                    </select>
                    <div id="reasonError" class="error-message">Please select a cancellation reason</div>
                </div>
                
                <div id="customReasonGroup" class="form-group custom-reason-group">
                    <label for="customReason" class="form-label required">Please specify your reason</label>
                    <textarea id="customReason" class="form-input" placeholder="Please provide your specific reason for cancellation..." rows="3"></textarea>
                    <div id="customReasonError" class="error-message">Please provide a custom reason</div>
                </div>
            </div>
            <div class="cancel-modal-footer">
                <button class="modal-btn modal-btn-cancel" onclick="closeCancelModal()">
                    <i class="fas fa-times"></i>
                    Cancel
                </button>
                <button id="confirmCancelBtn" class="modal-btn modal-btn-confirm" onclick="confirmCancellation()" disabled>
                    <i class="fas fa-check"></i>
                    Confirm Cancellation
                </button>
            </div>
        </div>
    </div>

    <!-- Cancel Order Modal -->
    <div id="cancelOrderModal" class="cancel-order-modal">
        <div class="cancel-order-modal-content">
            <div class="cancel-order-modal-header">
                <h3 class="cancel-order-modal-title">
                    <i class="fas fa-exclamation-triangle"></i>
                    <% if (order.status === 'Partially Cancelled') { %>
                        Cancel Remaining Items
                    <% } else { %>
                        Cancel Entire Order
                    <% } %>
                </h3>
                <button class="cancel-order-modal-close" onclick="closeCancelOrderModal()">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="cancel-order-modal-body">
                <!-- Cancellation Form -->
                <div class="form-group-enhanced">
                    <label for="cancelOrderReason" class="form-label-enhanced required">
                        <i class="fas fa-comment-alt"></i>
                        Cancellation Reason
                    </label>
                    <select id="cancelOrderReason" class="form-select-enhanced" onchange="handleOrderReasonChange()">
                        <option value="">
                            <% if (order.status === 'Partially Cancelled') { %>
                                Select a reason for cancelling remaining items
                            <% } else { %>
                                Select a reason for cancelling this order
                            <% } %>
                        </option>
                        <option value="Ordered by mistake">Ordered by mistake</option>
                        <option value="Found cheaper elsewhere">Found cheaper elsewhere</option>
                        <option value="Changed my mind">Changed my mind</option>
                        <option value="Products no longer needed">Products no longer needed</option>
                        <option value="Delivery taking too long">Delivery taking too long</option>
                        <option value="Financial constraints">Financial constraints</option>
                        <option value="Quality concerns">Quality concerns</option>
                        <option value="Duplicate order">Duplicate order</option>
                        <option value="Other">Other</option>
                    </select>
                    <div id="orderReasonError" class="error-message-enhanced">Please select a cancellation reason</div>
                </div>
                
                <div id="customOrderReasonGroup" class="form-group-enhanced custom-reason-group-enhanced">
                    <label for="customOrderReason" class="form-label-enhanced required">
                        <i class="fas fa-edit"></i>
                        Please specify your reason
                    </label>
                    <textarea id="customOrderReason" class="form-input-enhanced" placeholder="<% if (order.status === 'Partially Cancelled') { %>Please provide your specific reason for cancelling remaining items...<% } else { %>Please provide your specific reason for cancelling this entire order...<% } %>" rows="4"></textarea>
                    <div id="customOrderReasonError" class="error-message-enhanced">Please provide a custom reason</div>
                </div>
            </div>
            <div class="cancel-order-modal-footer">
                <button class="modal-btn-enhanced modal-btn-cancel-enhanced" onclick="closeCancelOrderModal()">
                    <i class="fas fa-arrow-left"></i>
                    <% if (order.status === 'Partially Cancelled') { %>
                        Keep Items
                    <% } else { %>
                        Keep Order
                    <% } %>
                </button>
                <button id="confirmOrderCancelBtn" class="modal-btn-enhanced modal-btn-confirm-enhanced" onclick="confirmOrderCancellation()" disabled>
                    <i class="fas fa-times-circle"></i>
                    <% if (order.status === 'Partially Cancelled') { %>
                        Cancel Remaining Items
                    <% } else { %>
                        Cancel Order
                    <% } %>
                </button>
            </div>
        </div>
    </div>

    <!-- Return Order Modal -->
    <div id="returnOrderModal" class="return-order-modal">
        <div class="return-order-modal-content">
            <div class="return-order-modal-header">
                <h3 class="return-order-modal-title">
                    <i class="fas fa-undo"></i>
                    Return Order Items
                </h3>
                <button class="return-order-modal-close" onclick="closeReturnModal()">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="return-order-modal-body">
                <!-- Return Instructions -->
                <div class="return-instructions">
                    <h4>
                        <i class="fas fa-info-circle"></i>
                        Return Policy
                    </h4>
                    <p>Select the items you want to return and provide a reason for each. Returns are processed within 7-14 business days. Items must be in original condition with all tags and packaging.</p>
                </div>

                <!-- Return Products Section -->
                <div class="return-products-section">
                    <h4 class="return-products-title">
                        <i class="fas fa-box-open"></i>
                        Select Items to Return
                    </h4>

                    <% 
                    const returnableItems = order.orderedItems.filter(item => item.status === 'Active');
                    returnableItems.forEach((item, index) => { 
                    %>
                        <div class="return-product-item" data-item-id="<%= item._id %>">
                            <div class="return-product-header">
                                <div class="return-product-checkbox">
                                    <input type="checkbox" 
                                           id="return-item-<%= index %>" 
                                           onchange="toggleReturnItem('<%= item._id %>', this.checked)">
                                </div>
                                <img src="/uploads/products/<%= item.product.mainImage %>"
                                     alt="<%= item.product.productName %>"
                                     class="return-product-image">
                                <div class="return-product-details">
                                    <div class="return-product-name"><%= item.product.productName %></div>
                                    <div class="return-product-brand">Brand: <%= item.product.brand %></div>
                                    <div class="return-product-price">
                                        <span class="return-current-price">₹<%= item.price.toFixed(2) %></span>
                                    </div>
                                    <div class="return-quantity-info">
                                        Quantity: <%= item.quantity %> | Total: ₹<%= item.totalPrice.toFixed(2) %>
                                    </div>
                                </div>
                            </div>

                            <!-- Return Reason Section (Hidden by default) -->
                            <div class="return-reason-section" id="return-reason-<%= item._id %>">
                                <label for="return-reason-select-<%= item._id %>" class="return-reason-label required">
                                    <i class="fas fa-comment-alt"></i>
                                    Return Reason
                                </label>
                                <select id="return-reason-select-<%= item._id %>" 
                                        class="return-reason-select" 
                                        onchange="handleReturnReasonChange('<%= item._id %>', this.value)">
                                    <option value="">Select a reason for return</option>
                                    <option value="Defective/Damaged product">Defective/Damaged product</option>
                                    <option value="Wrong item received">Wrong item received</option>
                                    <option value="Size/fit issues">Size/fit issues</option>
                                    <option value="Quality not as expected">Quality not as expected</option>
                                    <option value="Product not as described">Product not as described</option>
                                    <option value="Changed my mind">Changed my mind</option>
                                    <option value="Found better price elsewhere">Found better price elsewhere</option>
                                    <option value="Ordered by mistake">Ordered by mistake</option>
                                    <option value="Delivery delay">Delivery delay</option>
                                    <option value="Other">Other</option>
                                </select>
                                
                                <textarea id="return-custom-reason-<%= item._id %>" 
                                          class="return-custom-reason" 
                                          placeholder="Please provide specific details about your return reason..."
                                          oninput="validateReturnReason('<%= item._id %>')"></textarea>
                                
                                <div id="return-error-<%= item._id %>" class="return-error-message">
                                    Please select a return reason
                                </div>
                            </div>
                        </div>
                    <% }); %>
                </div>
            </div>
            <div class="return-order-modal-footer">
                <div class="return-selected-info">
                    <span id="return-selected-text">No items selected</span>
                </div>
                <div class="return-modal-buttons">
                    <button class="return-modal-btn return-modal-btn-cancel" onclick="closeReturnModal()">
                        <i class="fas fa-times"></i>
                        Cancel
                    </button>
                    <button id="submitReturnBtn" class="return-modal-btn return-modal-btn-submit" onclick="submitReturnRequest()" disabled>
                        <i class="fas fa-paper-plane"></i>
                        Submit Return Request
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
    <script>
        // Global variables for modal
        let currentOrderId = null;
        let currentItemId = null;

        // Open cancel modal
        function cancelOrderItem(orderId, itemId) {
            currentOrderId = orderId;
            currentItemId = itemId;
            
            // Reset form
            document.getElementById('cancelReason').value = '';
            document.getElementById('customReason').value = '';
            document.getElementById('customReasonGroup').classList.remove('show');
            document.getElementById('confirmCancelBtn').disabled = true;
            hideErrors();
            
            // Show modal
            document.getElementById('cancelItemModal').style.display = 'block';
            document.body.style.overflow = 'hidden';
        }

        // Close cancel modal
        function closeCancelModal() {
            document.getElementById('cancelItemModal').style.display = 'none';
            document.body.style.overflow = 'auto';
            currentOrderId = null;
            currentItemId = null;
        }

        // Handle reason dropdown change
        function handleReasonChange() {
            const reasonSelect = document.getElementById('cancelReason');
            const customReasonGroup = document.getElementById('customReasonGroup');
            const confirmBtn = document.getElementById('confirmCancelBtn');
            
            hideErrors();
            
            if (reasonSelect.value === 'Other') {
                customReasonGroup.classList.add('show');
                confirmBtn.disabled = true;
            } else if (reasonSelect.value) {
                customReasonGroup.classList.remove('show');
                confirmBtn.disabled = false;
            } else {
                customReasonGroup.classList.remove('show');
                confirmBtn.disabled = true;
            }
        }

        // Handle custom reason input
        document.getElementById('customReason').addEventListener('input', function() {
            const confirmBtn = document.getElementById('confirmCancelBtn');
            const customReason = this.value.trim();
            
            hideErrors();
            
            if (customReason) {
                confirmBtn.disabled = false;
            } else {
                confirmBtn.disabled = true;
            }
        });

        // Hide error messages
        function hideErrors() {
            document.getElementById('reasonError').classList.remove('show');
            document.getElementById('customReasonError').classList.remove('show');
        }

        // Show error message
        function showError(elementId, message) {
            const errorElement = document.getElementById(elementId);
            if (message) {
                errorElement.textContent = message;
            }
            errorElement.classList.add('show');
        }

        // Validate form
        function validateForm() {
            const reasonSelect = document.getElementById('cancelReason');
            const customReason = document.getElementById('customReason');
            
            hideErrors();
            
            if (!reasonSelect.value) {
                showError('reasonError');
                return false;
            }
            
            if (reasonSelect.value === 'Other' && !customReason.value.trim()) {
                showError('customReasonError');
                return false;
            }
            
            return true;
        }

        // Confirm cancellation
        async function confirmCancellation() {
            if (!validateForm()) {
                return;
            }
            
            const reasonSelect = document.getElementById('cancelReason');
            const customReason = document.getElementById('customReason');
            
            let reason = reasonSelect.value;
            if (reason === 'Other') {
                reason = customReason.value.trim();
            }
            
            try {
                const response = await fetch(`/orders/${currentOrderId}/items/${currentItemId}/cancel`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ reason: reason })
                });

                const result = await response.json();

                if (result.success) {
                    closeCancelModal();
                    
                    const Toast = Swal.mixin({
                        toast: true,
                        position: 'bottom-right',
                        showConfirmButton: false,
                        timer: 3000,
                        timerProgressBar: true
                    });

                    Toast.fire({
                        icon: 'success',
                        title: 'Product cancelled successfully'
                    });

                    setTimeout(() => {
                        window.location.reload();
                    }, 1500);
                } else {
                    closeCancelModal();
                    Swal.fire({
                        icon: 'error',
                        title: 'Cancellation Failed',
                        text: result.message || 'Failed to cancel product'
                    });
                }
            } catch (error) {
                console.error('Error cancelling product:', error);
                closeCancelModal();
                Swal.fire({
                    icon: 'error',
                    title: 'Error!',
                    text: 'Failed to cancel product. Please try again.'
                });
            }
        }

        // Close modal when clicking outside
        window.onclick = function(event) {
            const modal = document.getElementById('cancelItemModal');
            if (event.target === modal) {
                closeCancelModal();
            }
        }

        // Close modal with Escape key
        document.addEventListener('keydown', function(event) {
            if (event.key === 'Escape') {
                const modal = document.getElementById('cancelItemModal');
                if (modal.style.display === 'block') {
                    closeCancelModal();
                }
            }
        });

        // Order Cancellation Modal Functions
        function openCancelOrderModal() {
            // Reset form
            document.getElementById('cancelOrderReason').value = '';
            document.getElementById('customOrderReason').value = '';
            document.getElementById('customOrderReasonGroup').classList.remove('show');
            document.getElementById('confirmOrderCancelBtn').disabled = true;
            hideOrderErrors();
            
            // Show modal
            document.getElementById('cancelOrderModal').style.display = 'block';
            document.body.style.overflow = 'hidden';
        }

        function closeCancelOrderModal() {
            document.getElementById('cancelOrderModal').style.display = 'none';
            document.body.style.overflow = 'auto';
        }

        function handleOrderReasonChange() {
            const reasonSelect = document.getElementById('cancelOrderReason');
            const customReasonGroup = document.getElementById('customOrderReasonGroup');
            const confirmBtn = document.getElementById('confirmOrderCancelBtn');
            
            hideOrderErrors();
            
            if (reasonSelect.value === 'Other') {
                customReasonGroup.classList.add('show');
                confirmBtn.disabled = true;
            } else if (reasonSelect.value) {
                customReasonGroup.classList.remove('show');
                confirmBtn.disabled = false;
            } else {
                customReasonGroup.classList.remove('show');
                confirmBtn.disabled = true;
            }
        }

        // Handle custom reason input for order cancellation
        document.getElementById('customOrderReason').addEventListener('input', function() {
            const confirmBtn = document.getElementById('confirmOrderCancelBtn');
            const customReason = this.value.trim();
            
            hideOrderErrors();
            
            if (customReason) {
                confirmBtn.disabled = false;
            } else {
                confirmBtn.disabled = true;
            }
        });

        function hideOrderErrors() {
            document.getElementById('orderReasonError').classList.remove('show');
            document.getElementById('customOrderReasonError').classList.remove('show');
        }

        function showOrderError(elementId, message) {
            const errorElement = document.getElementById(elementId);
            if (message) {
                errorElement.textContent = message;
            }
            errorElement.classList.add('show');
        }

        function validateOrderForm() {
            const reasonSelect = document.getElementById('cancelOrderReason');
            const customReason = document.getElementById('customOrderReason');
            
            hideOrderErrors();
            
            if (!reasonSelect.value) {
                showOrderError('orderReasonError');
                return false;
            }
            
            if (reasonSelect.value === 'Other' && !customReason.value.trim()) {
                showOrderError('customOrderReasonError');
                return false;
            }
            
            return true;
        }

        async function confirmOrderCancellation() {
            if (!validateOrderForm()) {
                return;
            }
            
            const reasonSelect = document.getElementById('cancelOrderReason');
            const customReason = document.getElementById('customOrderReason');
            
            let reason = reasonSelect.value;
            if (reason === 'Other') {
                reason = customReason.value.trim();
            }
            
            try {
                const orderId = '<%= order.orderId %>';
                const response = await fetch(`/orders/${orderId}/cancel-entire`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ reason: reason })
                });

                const result = await response.json();

                if (result.success) {
                    closeCancelOrderModal();
                    
                    const Toast = Swal.mixin({
                        toast: true,
                        position: 'bottom-right',
                        showConfirmButton: false,
                        timer: 3000,
                        timerProgressBar: true
                    });

                    Toast.fire({
                        icon: 'success',
                        title: 'Order cancelled successfully'
                    });

                    setTimeout(() => {
                        window.location.reload();
                    }, 1500);
                } else {
                    closeCancelOrderModal();
                    Swal.fire({
                        icon: 'error',
                        title: 'Cancellation Failed',
                        text: result.message || 'Failed to cancel order'
                    });
                }
            } catch (error) {
                console.error('Error cancelling order:', error);
                closeCancelOrderModal();
                Swal.fire({
                    icon: 'error',
                    title: 'Error!',
                    text: 'Failed to cancel order. Please try again.'
                });
            }
        }

        // Close order modal when clicking outside
        window.addEventListener('click', function(event) {
            const orderModal = document.getElementById('cancelOrderModal');
            if (event.target === orderModal) {
                closeCancelOrderModal();
            }
        });

        // Close order modal with Escape key
        document.addEventListener('keydown', function(event) {
            if (event.key === 'Escape') {
                const orderModal = document.getElementById('cancelOrderModal');
                if (orderModal.style.display === 'block') {
                    closeCancelOrderModal();
                }
            }
        });

        // Return Order Modal Functions
        let selectedReturnItems = new Set();
        let returnReasons = new Map();

        function openReturnModal() {
            // Reset modal state
            selectedReturnItems.clear();
            returnReasons.clear();
            
            // Reset all checkboxes and forms
            document.querySelectorAll('.return-product-item input[type="checkbox"]').forEach(checkbox => {
                checkbox.checked = false;
            });
            
            document.querySelectorAll('.return-product-item').forEach(item => {
                item.classList.remove('selected');
            });
            
            document.querySelectorAll('.return-reason-section').forEach(section => {
                section.classList.remove('show');
            });
            
            // Reset all form fields
            document.querySelectorAll('.return-reason-select').forEach(select => {
                select.value = '';
            });
            
            document.querySelectorAll('.return-custom-reason').forEach(textarea => {
                textarea.value = '';
                textarea.classList.remove('show');
            });
            
            // Hide all error messages
            document.querySelectorAll('.return-error-message').forEach(error => {
                error.classList.remove('show');
            });
            
            // Reset footer
            updateReturnSelectedInfo();
            document.getElementById('submitReturnBtn').disabled = true;
            
            // Show modal
            document.getElementById('returnOrderModal').style.display = 'block';
            document.body.style.overflow = 'hidden';
        }

        function closeReturnModal() {
            document.getElementById('returnOrderModal').style.display = 'none';
            document.body.style.overflow = 'auto';
        }

        function toggleReturnItem(itemId, isChecked) {
            const productItem = document.querySelector(`[data-item-id="${itemId}"]`);
            const reasonSection = document.getElementById(`return-reason-${itemId}`);
            
            if (isChecked) {
                selectedReturnItems.add(itemId);
                productItem.classList.add('selected');
                reasonSection.classList.add('show');
            } else {
                selectedReturnItems.delete(itemId);
                returnReasons.delete(itemId);
                productItem.classList.remove('selected');
                reasonSection.classList.remove('show');
                
                // Reset form fields for this item
                const reasonSelect = document.getElementById(`return-reason-select-${itemId}`);
                const customReason = document.getElementById(`return-custom-reason-${itemId}`);
                const errorMsg = document.getElementById(`return-error-${itemId}`);
                
                reasonSelect.value = '';
                customReason.value = '';
                customReason.classList.remove('show');
                errorMsg.classList.remove('show');
            }
            
            updateReturnSelectedInfo();
            validateReturnForm();
        }

        function handleReturnReasonChange(itemId, selectedReason) {
            const customReasonTextarea = document.getElementById(`return-custom-reason-${itemId}`);
            const errorMsg = document.getElementById(`return-error-${itemId}`);
            
            // Hide error message when user selects a reason
            errorMsg.classList.remove('show');
            
            if (selectedReason === 'Other') {
                customReasonTextarea.classList.add('show');
                customReasonTextarea.focus();
                // Don't set the reason yet, wait for custom input
                returnReasons.delete(itemId);
            } else if (selectedReason) {
                customReasonTextarea.classList.remove('show');
                customReasonTextarea.value = '';
                returnReasons.set(itemId, selectedReason);
            } else {
                customReasonTextarea.classList.remove('show');
                customReasonTextarea.value = '';
                returnReasons.delete(itemId);
            }
            
            validateReturnForm();
        }

        function validateReturnReason(itemId) {
            const customReasonTextarea = document.getElementById(`return-custom-reason-${itemId}`);
            const customReason = customReasonTextarea.value.trim();
            const errorMsg = document.getElementById(`return-error-${itemId}`);
            
            // Hide error message when user types
            errorMsg.classList.remove('show');
            
            if (customReason) {
                returnReasons.set(itemId, customReason);
            } else {
                returnReasons.delete(itemId);
            }
            
            validateReturnForm();
        }

        function updateReturnSelectedInfo() {
            const selectedCount = selectedReturnItems.size;
            const selectedText = document.getElementById('return-selected-text');
            
            if (selectedCount === 0) {
                selectedText.textContent = 'No items selected';
            } else if (selectedCount === 1) {
                selectedText.innerHTML = '<span class="return-selected-count">1</span> item selected for return';
            } else {
                selectedText.innerHTML = `<span class="return-selected-count">${selectedCount}</span> items selected for return`;
            }
        }

        function validateReturnForm() {
            const submitBtn = document.getElementById('submitReturnBtn');
            let isValid = true;
            
            // Check if any items are selected
            if (selectedReturnItems.size === 0) {
                isValid = false;
            } else {
                // Check if all selected items have reasons
                for (const itemId of selectedReturnItems) {
                    if (!returnReasons.has(itemId)) {
                        isValid = false;
                        break;
                    }
                }
            }
            
            submitBtn.disabled = !isValid;
        }

        function validateAllReturnReasons() {
            let allValid = true;
            
            for (const itemId of selectedReturnItems) {
                const reasonSelect = document.getElementById(`return-reason-select-${itemId}`);
                const customReason = document.getElementById(`return-custom-reason-${itemId}`);
                const errorMsg = document.getElementById(`return-error-${itemId}`);
                
                if (!reasonSelect.value) {
                    errorMsg.textContent = 'Please select a return reason';
                    errorMsg.classList.add('show');
                    allValid = false;
                } else if (reasonSelect.value === 'Other' && !customReason.value.trim()) {
                    errorMsg.textContent = 'Please provide a custom reason';
                    errorMsg.classList.add('show');
                    allValid = false;
                } else {
                    errorMsg.classList.remove('show');
                }
            }
            
            return allValid;
        }

        async function submitReturnRequest() {
            // Validate all reasons before submitting
            if (!validateAllReturnReasons()) {
                return;
            }
            
            // For now, we'll submit a single return request for the entire order
            // with the first selected item's reason (since the current backend expects a single reason)
            const firstItemReason = returnReasons.values().next().value;
            
            try {
                // Show loading state
                const submitBtn = document.getElementById('submitReturnBtn');
                const originalText = submitBtn.innerHTML;
                submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Processing...';
                submitBtn.disabled = true;
                
                // Make actual API call to request return
                const response = await fetch(`/orders/<%= order.orderId %>/request-return`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ 
                        reason: firstItemReason || 'Return requested by customer'
                    })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    closeReturnModal();
                    
                    // Show success message
                    Swal.fire({
                        icon: 'success',
                        title: 'Return Request Submitted',
                        text: result.message || 'Return request has been submitted successfully. Admin will review your request.',
                        confirmButtonText: 'OK',
                        confirmButtonColor: '#f59e0b'
                    }).then(() => {
                        // Reload the page to show updated status
                        window.location.reload();
                    });
                } else {
                    // Reset button state
                    submitBtn.innerHTML = originalText;
                    submitBtn.disabled = false;
                    
                    Swal.fire({
                        icon: 'error',
                        title: 'Submission Failed',
                        text: result.message || 'Failed to submit return request. Please try again.',
                        confirmButtonColor: '#ef4444'
                    });
                }
                
            } catch (error) {
                console.error('Error submitting return request:', error);
                
                // Reset button state
                const submitBtn = document.getElementById('submitReturnBtn');
                submitBtn.innerHTML = '<i class="fas fa-paper-plane"></i> Submit Return Request';
                submitBtn.disabled = false;
                
                Swal.fire({
                    icon: 'error',
                    title: 'Submission Failed',
                    text: 'Failed to submit return request. Please try again.',
                    confirmButtonColor: '#ef4444'
                });
            }
        }

        // Close return modal when clicking outside
        window.addEventListener('click', function(event) {
            const returnModal = document.getElementById('returnOrderModal');
            if (event.target === returnModal) {
                closeReturnModal();
            }
        });

        // Close return modal with Escape key
        document.addEventListener('keydown', function(event) {
            if (event.key === 'Escape') {
                const returnModal = document.getElementById('returnOrderModal');
                if (returnModal.style.display === 'block') {
                    closeReturnModal();
                }
            }
        });

        // Download PDF invoice
        async function downloadInvoice(orderId) {
            // Get the button that was clicked
            const downloadBtn = event.target.closest('.btn-download-invoice');
            const originalText = downloadBtn.innerHTML;

            try {
                // Show loading state
                downloadBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Generating...';
                downloadBtn.disabled = true;

                // Make request to download invoice
                const response = await fetch(`/orders/${orderId}/download-invoice`);

                if (response.ok) {
                    // Get the PDF blob
                    const blob = await response.blob();

                    // Create download link
                    const url = window.URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = `Invoice-${orderId}.pdf`;
                    document.body.appendChild(a);
                    a.click();

                    // Cleanup
                    window.URL.revokeObjectURL(url);
                    document.body.removeChild(a);

                    // Show success toast
                    const Toast = Swal.mixin({
                        toast: true,
                        position: 'bottom-right',
                        showConfirmButton: false,
                        timer: 3000,
                        timerProgressBar: true
                    });

                    Toast.fire({
                        icon: 'success',
                        title: 'Invoice downloaded successfully'
                    });
                } else {
                    const errorData = await response.json();
                    throw new Error(errorData.message || 'Failed to download invoice');
                }
            } catch (error) {
                console.error('Error downloading invoice:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Download Failed',
                    text: error.message || 'Failed to download invoice. Please try again.'
                });
            } finally {
                // Reset button state
                downloadBtn.innerHTML = originalText;
                downloadBtn.disabled = false;
            }
        }
    </script>
</body>
</html>

