x<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Order Details</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet">
    <%- include("../partials/user/account-sidebar") %>
    <style>
        :root {
            --bg-primary: #ffffff;
            --bg-secondary: #f8f9fa;
            --bg-tertiary: #e9ecef;
            --border-color: #dee2e6;
            --text-primary: #000000;
            --text-secondary: #495057;
            --text-muted: #6c757d;
            --hover-color: #f5f5f5;
            --success-color: #10b981;
            --error-color: #ef4444;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            background-color: #f5f5f5;
            color: var(--text-primary);
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
            min-height: 100vh;
            padding-top: 80px;
        }

        .main-content {
            margin-left: 280px;
            padding: 1rem 2rem;
            min-height: 100vh;
        }

        .page-header {
            background: linear-gradient(135deg, var(--bg-primary) 0%, var(--bg-secondary) 100%);
            border-radius: 15px;
            padding: 2rem;
            margin-bottom: 2rem;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
            border: 1px solid var(--border-color);
        }

        .page-header h1 {
            color: var(--text-primary);
            font-size: 2rem;
            font-weight: 700;
            margin-bottom: 0.5rem;
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }

        .page-header h1 i {
            color: var(--success-color);
        }

        .page-header p {
            color: var(--text-secondary);
            margin-bottom: 0;
            font-size: 1.1rem;
        }

        .order-container {
            display: grid;
            grid-template-columns: 1fr 350px;
            gap: 2rem;
        }

        .order-main {
            display: flex;
            flex-direction: column;
            gap: 2rem;
        }

        .order-info-card {
            background: var(--bg-primary);
            border-radius: 15px;
            padding: 2rem;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
            border: 1px solid var(--border-color);
        }

        .card-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
            padding-bottom: 1rem;
            border-bottom: 2px solid var(--border-color);
        }

        .card-title {
            font-size: 1.25rem;
            font-weight: 600;
            color: var(--text-primary);
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .order-status {
            padding: 0.5rem 1rem;
            border-radius: 25px;
            font-size: 0.875rem;
            font-weight: 600;
            text-transform: uppercase;
        }

        .status-pending {
            background: #fef3c7;
            color: #92400e;
        }

        .status-processing {
            background: #dbeafe;
            color: #1e40af;
        }

        .status-shipped {
            background: #d1fae5;
            color: #065f46;
        }

        .status-delivered {
            background: #d1fae5;
            color: #065f46;
        }

        .status-cancelled {
            background: #fee2e2;
            color: #991b1b;
        }

        .status-partially-cancelled {
            background: #fef3c7;
            color: #92400e;
        }

        .status-return-request {
            background: #fef3c7;
            color: #92400e;
        }

        .status-returned {
            background: #fee2e2;
            color: #991b1b;
        }

        .info-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
        }

        .info-item {
            display: flex;
            flex-direction: column;
            gap: 0.25rem;
        }

        .info-label {
            color: var(--text-muted);
            font-size: 0.875rem;
            font-weight: 500;
        }

        .info-value {
            color: var(--text-primary);
            font-weight: 600;
        }

        .order-id-value {
            font-family: 'Courier New', monospace;
            background: var(--bg-secondary);
            padding: 0.5rem;
            border-radius: 6px;
            border: 1px solid var(--border-color);
        }

        /* Order Timeline */
        .timeline {
            position: relative;
            padding-left: 2rem;
        }

        .timeline::before {
            content: '';
            position: absolute;
            left: 15px;
            top: 0;
            bottom: 0;
            width: 2px;
            background: var(--border-color);
        }

        .timeline-item {
            position: relative;
            margin-bottom: 1.5rem;
        }

        .timeline-item::before {
            content: '';
            position: absolute;
            left: -23px;
            top: 5px;
            width: 12px;
            height: 12px;
            border-radius: 50%;
            background: var(--success-color);
            border: 3px solid var(--bg-primary);
            box-shadow: 0 0 0 2px var(--success-color);
        }

        .timeline-content {
            background: var(--bg-secondary);
            padding: 1rem;
            border-radius: 8px;
            border: 1px solid var(--border-color);
        }

        .timeline-status {
            font-weight: 600;
            color: var(--text-primary);
            margin-bottom: 0.25rem;
        }

        .timeline-description {
            color: var(--text-secondary);
            font-size: 0.875rem;
            margin-bottom: 0.5rem;
        }

        .timeline-date {
            color: var(--text-muted);
            font-size: 0.75rem;
        }

        /* Order Items */
        .order-item {
            display: flex;
            gap: 1rem;
            padding: 1rem 0;
            border-bottom: 1px solid var(--border-color);
            position: relative;
        }

        .order-item:last-child {
            border-bottom: none;
        }

        .item-image {
            width: 80px;
            height: 80px;
            border-radius: 8px;
            object-fit: contain;
            border: 1px solid var(--border-color);
        }

        .item-details {
            flex: 1;
        }

        .item-name {
            font-weight: 600;
            color: var(--text-primary);
            margin-bottom: 0.25rem;
        }

        .item-brand {
            color: var(--text-muted);
            font-size: 0.875rem;
            margin-bottom: 0.5rem;
        }

        .item-price {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            margin-bottom: 0.5rem;
        }

        .current-price {
            font-weight: 600;
            color: var(--text-primary);
        }

        .quantity-info {
            color: var(--text-secondary);
            font-size: 0.875rem;
        }

        .item-status {
            position: absolute;
            top: 1rem;
            right: 0;
            padding: 0.25rem 0.75rem;
            border-radius: 20px;
            font-size: 0.75rem;
            font-weight: 600;
            text-transform: uppercase;
        }

        .item-status.active {
            background: #d1fae5;
            color: #065f46;
        }

        .item-status.cancelled {
            background: #fee2e2;
            color: #991b1b;
        }

        .item-actions {
            margin-top: 0.5rem;
        }

        .btn-cancel-item {
            background: #ef4444;
            color: white;
            border: none;
            padding: 0.25rem 0.5rem;
            border-radius: 4px;
            font-size: 0.75rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 0.25rem;
        }

        .btn-cancel-item:hover {
            background: #dc2626;
        }

        .quantity-controls {
            margin-top: 0.5rem;
            padding: 0.75rem;
            background: #f8f9fa;
            border-radius: 8px;
            border: 1px solid #e9ecef;
        }

        .quantity-controls label {
            font-size: 0.875rem;
            font-weight: 600;
            color: var(--text-primary);
            margin-bottom: 0.5rem;
            display: block;
        }

        .quantity-input-group {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            margin-bottom: 0.75rem;
        }

        .quantity-input {
            width: 80px;
            padding: 0.375rem 0.5rem;
            border: 1px solid #ced4da;
            border-radius: 4px;
            font-size: 0.875rem;
            text-align: center;
        }

        .quantity-input:focus {
            outline: none;
            border-color: #007bff;
            box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
        }

        .quantity-info-text {
            font-size: 0.75rem;
            color: var(--text-muted);
        }

        
        /* Order Summary Sidebar */
        .order-summary {
            background: var(--bg-primary);
            border-radius: 15px;
            padding: 2rem;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
            border: 1px solid var(--border-color);
            height: fit-content;
            position: sticky;
            top: 100px;
        }

        .summary-row {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0.75rem 0;
            border-bottom: 1px solid var(--border-color);
        }

        .summary-row:last-child {
            border-bottom: none;
            font-weight: 600;
            font-size: 1.125rem;
            padding-top: 1rem;
            margin-top: 1rem;
            border-top: 2px solid var(--border-color);
        }

        .summary-label {
            color: var(--text-secondary);
        }

        .summary-value {
            color: var(--text-primary);
            font-weight: 600;
        }

        .btn-download-invoice {
            width: 100%;
            background: var(--text-primary);
            color: white;
            border: none;
            padding: 0.75rem;
            border-radius: 8px;
            font-weight: 600;
            margin-top: 1.5rem;
            transition: all 0.3s ease;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
        }

        .btn-download-invoice:hover {
            background: #333333;
            transform: translateY(-1px);
        }

        .btn-download-invoice:disabled {
            background: var(--text-muted);
            cursor: not-allowed;
            transform: none;
        }

        
        
        .btn-cancel-order {
            width: 100%;
            background: #ef4444;
            color: white;
            border: none;
            padding: 0.75rem;
            border-radius: 8px;
            font-weight: 600;
            margin-top: 1rem;
            transition: all 0.3s ease;
            cursor: pointer;
        }

        .btn-cancel-order:hover {
            background: #dc2626;
            transform: translateY(-1px);
        }

        /* Cancel Item Modal Styles */
        .cancel-modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            backdrop-filter: blur(4px);
        }

        .cancel-modal-content {
            background-color: var(--bg-primary);
            margin: 10% auto;
            padding: 0;
            border-radius: 15px;
            width: 90%;
            max-width: 500px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15);
            border: 1px solid var(--border-color);
            animation: modalSlideIn 0.3s ease-out;
        }

        @keyframes modalSlideIn {
            from {
                opacity: 0;
                transform: translateY(-50px) scale(0.9);
            }
            to {
                opacity: 1;
                transform: translateY(0) scale(1);
            }
        }

        .cancel-modal-header {
            background: linear-gradient(135deg, var(--bg-primary) 0%, var(--bg-secondary) 100%);
            padding: 1.5rem 2rem;
            border-bottom: 1px solid var(--border-color);
            border-radius: 15px 15px 0 0;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .cancel-modal-title {
            color: var(--text-primary);
            font-size: 1.25rem;
            font-weight: 600;
            margin: 0;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .cancel-modal-close {
            background: none;
            border: none;
            font-size: 1.5rem;
            color: var(--text-muted);
            cursor: pointer;
            padding: 0.25rem;
            border-radius: 50%;
            width: 32px;
            height: 32px;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.2s ease;
        }

        .cancel-modal-close:hover {
            background: var(--bg-tertiary);
            color: var(--text-primary);
        }

        .cancel-modal-body {
            padding: 2rem;
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-label {
            display: block;
            color: var(--text-primary);
            font-weight: 600;
            margin-bottom: 0.5rem;
            font-size: 0.875rem;
        }

        .form-label.required::after {
            content: ' *';
            color: #ef4444;
        }

        .form-select,
        .form-input {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid var(--border-color);
            border-radius: 8px;
            font-size: 0.875rem;
            color: var(--text-primary);
            background: var(--bg-primary);
            transition: all 0.2s ease;
        }

        .form-select:focus,
        .form-input:focus {
            outline: none;
            border-color: #007bff;
            box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.1);
        }

        .form-input {
            resize: vertical;
            min-height: 80px;
        }

        .custom-reason-group {
            display: none;
            animation: fadeInDown 0.3s ease-out;
        }

        .custom-reason-group.show {
            display: block;
        }

        @keyframes fadeInDown {
            from {
                opacity: 0;
                transform: translateY(-10px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .cancel-modal-footer {
            padding: 1.5rem 2rem;
            border-top: 1px solid var(--border-color);
            border-radius: 0 0 15px 15px;
            background: var(--bg-secondary);
            display: flex;
            gap: 1rem;
            justify-content: flex-end;
        }

        .modal-btn {
            padding: 0.75rem 1.5rem;
            border-radius: 8px;
            font-size: 0.875rem;
            font-weight: 600;
            border: none;
            cursor: pointer;
            transition: all 0.2s ease;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .modal-btn-cancel {
            background: var(--bg-primary);
            color: var(--text-secondary);
            border: 1px solid var(--border-color);
        }

        .modal-btn-cancel:hover {
            background: var(--bg-tertiary);
            color: var(--text-primary);
        }

        .modal-btn-confirm {
            background: #ef4444;
            color: white;
        }

        .modal-btn-confirm:hover {
            background: #dc2626;
        }

        .modal-btn-confirm:disabled {
            background: var(--text-muted);
            cursor: not-allowed;
        }

        .error-message {
            color: #ef4444;
            font-size: 0.75rem;
            margin-top: 0.5rem;
            display: none;
        }

        .error-message.show {
            display: block;
        }

        /* Cancel Order Modal Styles */
        .cancel-order-modal {
            display: none;
            position: fixed;
            z-index: 1001;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.6);
            backdrop-filter: blur(6px);
        }

        .cancel-order-modal-content {
            background: linear-gradient(135deg, var(--bg-primary) 0%, #fafafa 100%);
            margin: 8% auto;
            padding: 0;
            border-radius: 20px;
            width: 90%;
            max-width: 550px;
            box-shadow: 0 25px 50px rgba(0, 0, 0, 0.2);
            border: 1px solid var(--border-color);
            animation: orderModalSlideIn 0.4s cubic-bezier(0.175, 0.885, 0.32, 1.275);
            overflow: hidden;
        }

        @keyframes orderModalSlideIn {
            from {
                opacity: 0;
                transform: translateY(-80px) scale(0.8);
            }
            to {
                opacity: 1;
                transform: translateY(0) scale(1);
            }
        }

        .cancel-order-modal-header {
            background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
            padding: 2rem 2.5rem;
            border-radius: 20px 20px 0 0;
            position: relative;
            overflow: hidden;
        }

        .cancel-order-modal-header::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grid" width="10" height="10" patternUnits="userSpaceOnUse"><path d="M 10 0 L 0 0 0 10" fill="none" stroke="rgba(255,255,255,0.1)" stroke-width="0.5"/></pattern></defs><rect width="100" height="100" fill="url(%23grid)"/></svg>');
            opacity: 0.3;
        }

        .cancel-order-modal-title {
            color: white;
            font-size: 1.5rem;
            font-weight: 700;
            margin: 0;
            display: flex;
            align-items: center;
            gap: 0.75rem;
            position: relative;
            z-index: 1;
        }

        .cancel-order-modal-title i {
            font-size: 1.75rem;
            filter: drop-shadow(0 2px 4px rgba(0,0,0,0.3));
        }

        .cancel-order-modal-close {
            position: absolute;
            top: 1.5rem;
            right: 2rem;
            background: rgba(255, 255, 255, 0.2);
            border: none;
            font-size: 1.5rem;
            color: white;
            cursor: pointer;
            padding: 0.5rem;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease;
            z-index: 2;
        }

        .cancel-order-modal-close:hover {
            background: rgba(255, 255, 255, 0.3);
            transform: rotate(90deg);
        }

        .cancel-order-modal-body {
            padding: 2.5rem;
            background: var(--bg-primary);
        }

        
        .form-group-enhanced {
            margin-bottom: 2rem;
        }

        .form-label-enhanced {
            display: block;
            color: var(--text-primary);
            font-weight: 600;
            margin-bottom: 0.75rem;
            font-size: 0.95rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .form-label-enhanced.required::after {
            content: ' *';
            color: #ef4444;
            font-weight: 700;
        }

        .form-select-enhanced,
        .form-input-enhanced {
            width: 100%;
            padding: 1rem;
            border: 2px solid var(--border-color);
            border-radius: 12px;
            font-size: 0.9rem;
            color: var(--text-primary);
            background: var(--bg-primary);
            transition: all 0.3s ease;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        }

        .form-select-enhanced:focus,
        .form-input-enhanced:focus {
            outline: none;
            border-color: #ef4444;
            box-shadow: 0 0 0 4px rgba(239, 68, 68, 0.1);
            transform: translateY(-1px);
        }

        .form-input-enhanced {
            resize: vertical;
            min-height: 100px;
            font-family: inherit;
        }

        .custom-reason-group-enhanced {
            display: none;
            animation: enhancedFadeInDown 0.4s ease-out;
        }

        .custom-reason-group-enhanced.show {
            display: block;
        }

        @keyframes enhancedFadeInDown {
            from {
                opacity: 0;
                transform: translateY(-20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .cancel-order-modal-footer {
            padding: 2rem 2.5rem;
            border-top: 1px solid var(--border-color);
            background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
            display: flex;
            gap: 1rem;
            justify-content: flex-end;
        }

        .modal-btn-enhanced {
            padding: 0.875rem 2rem;
            border-radius: 12px;
            font-size: 0.9rem;
            font-weight: 600;
            border: none;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            position: relative;
            overflow: hidden;
        }

        .modal-btn-enhanced::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
            transition: left 0.5s;
        }

        .modal-btn-enhanced:hover::before {
            left: 100%;
        }

        .modal-btn-cancel-enhanced {
            background: linear-gradient(135deg, #6b7280 0%, #4b5563 100%);
            color: white;
            box-shadow: 0 4px 12px rgba(107, 114, 128, 0.3);
        }

        .modal-btn-cancel-enhanced:hover {
            background: linear-gradient(135deg, #4b5563 0%, #374151 100%);
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(107, 114, 128, 0.4);
        }

        .modal-btn-confirm-enhanced {
            background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
            color: white;
            box-shadow: 0 4px 12px rgba(239, 68, 68, 0.3);
        }

        .modal-btn-confirm-enhanced:hover {
            background: linear-gradient(135deg, #dc2626 0%, #b91c1c 100%);
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(239, 68, 68, 0.4);
        }

        .modal-btn-confirm-enhanced:disabled {
            background: linear-gradient(135deg, #9ca3af 0%, #6b7280 100%);
            cursor: not-allowed;
            transform: none;
            box-shadow: 0 2px 4px rgba(156, 163, 175, 0.2);
        }

        .error-message-enhanced {
            color: #ef4444;
            font-size: 0.8rem;
            margin-top: 0.75rem;
            display: none;
            padding: 0.5rem;
            background: rgba(239, 68, 68, 0.1);
            border-radius: 8px;
            border-left: 3px solid #ef4444;
        }

        .error-message-enhanced.show {
            display: block;
            animation: errorShake 0.5s ease-in-out;
        }

        @keyframes errorShake {
            0%, 100% { transform: translateX(0); }
            25% { transform: translateX(-5px); }
            75% { transform: translateX(5px); }
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .main-content {
                margin-left: 0;
                padding: 0.5rem 1rem;
                padding-top: 90px;
            }

            .order-container {
                grid-template-columns: 1fr;
                gap: 1rem;
            }

            .order-summary {
                position: static;
            }

            .page-header {
                padding: 1.5rem;
                margin-bottom: 1.5rem;
            }

            .page-header h1 {
                font-size: 1.5rem;
            }

            .order-info-card {
                padding: 1.5rem;
            }

            .info-grid {
                grid-template-columns: 1fr;
            }
        }

        .fade-in {
            animation: fadeIn 0.6s ease-in;
        }

        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        /* Breadcrumb Styles */
        .breadcrumb-container {
            margin-bottom: 1.5rem;
        }

        .breadcrumb {
            background: transparent;
            padding: 0;
            margin: 0;
            font-size: 0.9rem;
        }

        .breadcrumb-item {
            color: var(--text-muted);
        }

        .breadcrumb-item a {
            color: var(--text-primary);
            text-decoration: none;
            transition: color 0.3s ease;
        }

        .breadcrumb-item a:hover {
            color: var(--text-secondary);
        }

        .breadcrumb-item.active {
            color: var(--text-secondary);
            font-weight: 500;
        }
    </style>
</head>
<body>
    <!-- Main Content -->
    <div class="main-content">
        <!-- Breadcrumb -->
        <div class="breadcrumb-container">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/profile">My Account</a></li>
                    <li class="breadcrumb-item"><a href="/orders">My Orders</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Order Details</li>
                </ol>
            </nav>
        </div>

        <!-- Page Header -->
        <div class="page-header fade-in">
            <h1><i class="fas fa-receipt"></i> Order Details</h1>
            <p>View and manage your order information</p>
        </div>

        <div class="order-container">
            <div class="order-main">
                <!-- Order Information -->
                <div class="order-info-card fade-in">
                    <div class="card-header">
                        <h3 class="card-title">
                            <i class="fas fa-info-circle"></i>
                            Order Information
                        </h3>
                        <div class="order-status status-<%= order.status.toLowerCase().replace(/\s+/g, '-') %>">
                            <%= order.status %>
                        </div>
                    </div>

                    <div class="info-grid">
                        <div class="info-item">
                            <span class="info-label">Order ID</span>
                            <span class="info-value order-id-value"><%= order.orderId %></span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Order Date</span>
                            <span class="info-value">
                                <%= new Date(order.createdAt).toLocaleDateString('en-IN', {
                                    year: 'numeric',
                                    month: 'long',
                                    day: 'numeric'
                                }) %>
                            </span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Payment Method</span>
                            <span class="info-value"><%= order.paymentMethod %></span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Estimated Delivery</span>
                            <span class="info-value">
                                <%= new Date(order.estimatedDelivery).toLocaleDateString('en-IN', {
                                    year: 'numeric',
                                    month: 'long',
                                    day: 'numeric'
                                }) %>
                            </span>
                        </div>
                    </div>
                </div>

                <!-- Order Timeline -->
                <div class="order-info-card fade-in">
                    <div class="card-header">
                        <h3 class="card-title">
                            <i class="fas fa-clock"></i>
                            Order Timeline
                        </h3>
                    </div>

                    <div class="timeline">
                        <% order.orderTimeline.forEach(timeline => { %>
                            <div class="timeline-item">
                                <div class="timeline-content">
                                    <div class="timeline-status"><%= timeline.status %></div>
                                    <div class="timeline-description"><%= timeline.description %></div>
                                    <div class="timeline-date">
                                        <%= new Date(timeline.timestamp).toLocaleString('en-IN', {
                                            year: 'numeric',
                                            month: 'short',
                                            day: 'numeric',
                                            hour: '2-digit',
                                            minute: '2-digit'
                                        }) %>
                                    </div>
                                </div>
                            </div>
                        <% }); %>
                    </div>
                </div>

                <!-- Order Items -->
                <div class="order-info-card fade-in">
                    <div class="card-header">
                        <h3 class="card-title">
                            <i class="fas fa-box"></i>
                            Order Items (<%= order.orderedItems.length %>)
                        </h3>
                    </div>

                    <% order.orderedItems.forEach(item => { %>
                        <div class="order-item">
                            <img src="/uploads/products/<%= item.product.mainImage %>"
                                 alt="<%= item.product.productName %>"
                                 class="item-image">
                            <div class="item-details">
                                <div class="item-name"><%= item.product.productName %></div>
                                <div class="item-brand">Brand: <%= item.product.brand %></div>
                                <div class="item-price">
                                    <span class="current-price">₹<%= item.price.toFixed(2) %></span>
                                </div>
                                <div class="quantity-info">
                                    Quantity: <%= item.quantity %> | Total: ₹<%= item.totalPrice.toFixed(2) %>
                                </div>
                                <% if (item.status === 'Active' && !['Shipped', 'Delivered', 'Return Request', 'Returned', 'Cancelled'].includes(order.status)) { %>
                                    <div class="item-actions">
                                        <button class="btn-cancel-item" onclick="cancelOrderItem('<%= order.orderId %>', '<%= item._id %>')">
                                            <i class="fas fa-times"></i> Cancel
                                        </button>
                                    </div>
                                <% } %>
                            </div>
                            <div class="item-status <%= item.status.toLowerCase() %>">
                                <%= item.status %>
                            </div>
                        </div>
                    <% }); %>
                </div>

                <!-- Shipping Address -->
                <div class="order-info-card fade-in">
                    <div class="card-header">
                        <h3 class="card-title">
                            <i class="fas fa-map-marker-alt"></i>
                            Shipping Address
                        </h3>
                    </div>

                    <div class="address-details">
                        <div class="address-type" style="background: var(--text-primary); color: white; padding: 0.25rem 0.75rem; border-radius: 20px; font-size: 0.75rem; font-weight: 600; text-transform: uppercase; display: inline-block; margin-bottom: 0.75rem;">
                            <%= order.shippingAddress.addressType %>
                        </div>
                        <div style="font-weight: 600; color: var(--text-primary); margin-bottom: 0.5rem; font-size: 1rem;">
                            <%= order.shippingAddress.name %>
                        </div>
                        <div style="color: var(--text-secondary); line-height: 1.5; margin-bottom: 0.75rem; font-size: 0.875rem;">
                            <%= order.shippingAddress.landMark %>, <%= order.shippingAddress.city %><br>
                            <%= order.shippingAddress.state %> - <%= order.shippingAddress.pincode %>
                        </div>
                        <div style="color: var(--text-muted); font-size: 0.875rem; display: flex; align-items: center; gap: 0.5rem;">
                            <i class="fas fa-phone"></i> <%= order.shippingAddress.phone %>
                            <% if (order.shippingAddress.altPhone) { %>
                                | <%= order.shippingAddress.altPhone %>
                            <% } %>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Order Summary Sidebar -->
            <div class="order-summary fade-in">
                <h3 class="card-title mb-3">
                    <i class="fas fa-receipt"></i>
                    Order Summary
                </h3>

                <%
                    // Calculate current totals based on active items
                    const activeItems = order.orderedItems.filter(item => item.status === 'Active');
                    const cancelledItems = order.orderedItems.filter(item => item.status === 'Cancelled');
                    const currentSubtotal = activeItems.reduce((sum, item) => sum + item.totalPrice, 0);
                    const cancelledAmount = cancelledItems.reduce((sum, item) => sum + item.totalPrice, 0);
                    const originalOrderTotal = currentSubtotal + cancelledAmount;
                    
                    // Calculate proportional discount for active items only
                    let applicableDiscount = 0;
                    let currentTotal = 0;
                    
                    if (currentSubtotal > 0 && order.discount > 0 && originalOrderTotal > 0) {
                        // Calculate what proportion of the original order the active items represent
                        const activeItemsProportion = currentSubtotal / originalOrderTotal;
                        // Apply only the proportional discount to active items
                        applicableDiscount = Math.min(order.discount * activeItemsProportion, currentSubtotal);
                        currentTotal = Math.max(0, currentSubtotal - applicableDiscount + order.shippingCharges);
                    } else if (currentSubtotal > 0) {
                        currentTotal = currentSubtotal + order.shippingCharges;
                    }
                    
                    // Additional variables for cancel button logic
                    const canCancelOrder = !['Shipped', 'Delivered', 'Return Request', 'Returned', 'Cancelled'].includes(order.status);
                    const hasActiveItems = activeItems.length > 0;
                %>

                <div class="summary-row">
                    <span class="summary-label">Subtotal (Active Items)</span>
                    <span class="summary-value">₹<%= currentSubtotal.toFixed(2) %></span>
                </div>

                <% if (cancelledAmount > 0) { %>
                <div class="summary-row" style="color: #ef4444;">
                    <span class="summary-label">Cancelled Items</span>
                    <span class="summary-value">-₹<%= cancelledAmount.toFixed(2) %></span>
                </div>
                <% } %>

                <% if (order.discount > 0) { %>
                    <% if (cancelledAmount > 0 && applicableDiscount < order.discount) { %>
                    <div class="summary-row" style="color: #6c757d; font-size: 0.85em;">
                        <span class="summary-label">Original Discount</span>
                        <span class="summary-value">-₹<%= order.discount.toFixed(2) %></span>
                    </div>
                    <div class="summary-row" style="color: #ef4444; font-size: 0.85em;">
                        <span class="summary-label">Discount on Cancelled Items</span>
                        <span class="summary-value">+₹<%= (order.discount - applicableDiscount).toFixed(2) %></span>
                    </div>
                    <% } %>
                    <% if (applicableDiscount > 0) { %>
                    <div class="summary-row">
                        <span class="summary-label">
                            <% if (cancelledAmount > 0) { %>
                                Applicable Discount
                            <% } else { %>
                                Discount
                            <% } %>
                        </span>
                        <span class="summary-value" style="color: var(--success-color);">-₹<%= applicableDiscount.toFixed(2) %></span>
                    </div>
                    <% } %>
                <% } %>

                <% if (currentSubtotal > 0) { %>
                <div class="summary-row">
                    <span class="summary-label">Shipping</span>
                    <span class="summary-value">
                        <% if (order.shippingCharges === 0) { %>
                            <span style="color: var(--success-color);">FREE</span>
                        <% } else { %>
                            ₹<%= order.shippingCharges.toFixed(2) %>
                        <% } %>
                    </span>
                </div>
                <% } %>

                <div class="summary-row">
                    <span class="summary-label">
                        <% if (cancelledAmount > 0) { %>
                            Current Total
                        <% } else { %>
                            Total
                        <% } %>
                    </span>
                    <span class="summary-value">₹<%= currentTotal.toFixed(2) %></span>
                </div>

                <!-- Download Invoice Button -->
                <button class="btn-download-invoice" onclick="downloadInvoice('<%= order.orderId %>')">
                    <i class="fas fa-download"></i>
                    Download Invoice
                </button>

                <!-- Cancel Order Button -->
                <% if (canCancelOrder && hasActiveItems) { %>
                    <button class="btn-cancel-order" onclick="openCancelOrderModal()">
                        <i class="fas fa-times"></i>
                        <% if (order.status === 'Partially Cancelled') { %>
                            Cancel Remaining Items
                        <% } else { %>
                            Cancel Order
                        <% } %>
                    </button>
                <% } else if (!hasActiveItems && order.status === 'Partially Cancelled') { %>
                    <div style="margin-top: 1rem; padding: 0.75rem; background: #f8f9fa; border-radius: 8px; text-align: center; color: #6c757d; font-size: 0.875rem;">
                        <i class="fas fa-info-circle"></i>
                        All items have been cancelled
                    </div>
                <% } else { %>
                    <div style="margin-top: 1rem; padding: 0.75rem; background: #f8f9fa; border-radius: 8px; text-align: center; color: #6c757d; font-size: 0.875rem;">
                        <i class="fas fa-info-circle"></i>
                        Order cannot be cancelled at this stage
                    </div>
                <% } %>
            </div>
        </div>
    </div>

    <!-- Cancel Item Modal -->
    <div id="cancelItemModal" class="cancel-modal">
        <div class="cancel-modal-content">
            <div class="cancel-modal-header">
                <h3 class="cancel-modal-title">
                    <i class="fas fa-times-circle"></i>
                    Cancel Product
                </h3>
                <button class="cancel-modal-close" onclick="closeCancelModal()">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="cancel-modal-body">
                <div class="form-group">
                    <label for="cancelReason" class="form-label required">Cancellation Reason</label>
                    <select id="cancelReason" class="form-select" onchange="handleReasonChange()">
                        <option value="">Select a reason for cancellation</option>
                        <option value="Ordered by mistake">Ordered by mistake</option>
                        <option value="Found cheaper elsewhere">Found cheaper elsewhere</option>
                        <option value="Changed my mind">Changed my mind</option>
                        <option value="Product no longer needed">Product no longer needed</option>
                        <option value="Delivery taking too long">Delivery taking too long</option>
                        <option value="Financial constraints">Financial constraints</option>
                        <option value="Quality concerns">Quality concerns</option>
                        <option value="Other">Other</option>
                    </select>
                    <div id="reasonError" class="error-message">Please select a cancellation reason</div>
                </div>
                
                <div id="customReasonGroup" class="form-group custom-reason-group">
                    <label for="customReason" class="form-label required">Please specify your reason</label>
                    <textarea id="customReason" class="form-input" placeholder="Please provide your specific reason for cancellation..." rows="3"></textarea>
                    <div id="customReasonError" class="error-message">Please provide a custom reason</div>
                </div>
            </div>
            <div class="cancel-modal-footer">
                <button class="modal-btn modal-btn-cancel" onclick="closeCancelModal()">
                    <i class="fas fa-times"></i>
                    Cancel
                </button>
                <button id="confirmCancelBtn" class="modal-btn modal-btn-confirm" onclick="confirmCancellation()" disabled>
                    <i class="fas fa-check"></i>
                    Confirm Cancellation
                </button>
            </div>
        </div>
    </div>

    <!-- Cancel Order Modal -->
    <div id="cancelOrderModal" class="cancel-order-modal">
        <div class="cancel-order-modal-content">
            <div class="cancel-order-modal-header">
                <h3 class="cancel-order-modal-title">
                    <i class="fas fa-exclamation-triangle"></i>
                    <% if (order.status === 'Partially Cancelled') { %>
                        Cancel Remaining Items
                    <% } else { %>
                        Cancel Entire Order
                    <% } %>
                </h3>
                <button class="cancel-order-modal-close" onclick="closeCancelOrderModal()">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="cancel-order-modal-body">
                <!-- Cancellation Form -->
                <div class="form-group-enhanced">
                    <label for="cancelOrderReason" class="form-label-enhanced required">
                        <i class="fas fa-comment-alt"></i>
                        Cancellation Reason
                    </label>
                    <select id="cancelOrderReason" class="form-select-enhanced" onchange="handleOrderReasonChange()">
                        <option value="">
                            <% if (order.status === 'Partially Cancelled') { %>
                                Select a reason for cancelling remaining items
                            <% } else { %>
                                Select a reason for cancelling this order
                            <% } %>
                        </option>
                        <option value="Ordered by mistake">Ordered by mistake</option>
                        <option value="Found cheaper elsewhere">Found cheaper elsewhere</option>
                        <option value="Changed my mind">Changed my mind</option>
                        <option value="Products no longer needed">Products no longer needed</option>
                        <option value="Delivery taking too long">Delivery taking too long</option>
                        <option value="Financial constraints">Financial constraints</option>
                        <option value="Quality concerns">Quality concerns</option>
                        <option value="Duplicate order">Duplicate order</option>
                        <option value="Other">Other</option>
                    </select>
                    <div id="orderReasonError" class="error-message-enhanced">Please select a cancellation reason</div>
                </div>
                
                <div id="customOrderReasonGroup" class="form-group-enhanced custom-reason-group-enhanced">
                    <label for="customOrderReason" class="form-label-enhanced required">
                        <i class="fas fa-edit"></i>
                        Please specify your reason
                    </label>
                    <textarea id="customOrderReason" class="form-input-enhanced" placeholder="<% if (order.status === 'Partially Cancelled') { %>Please provide your specific reason for cancelling remaining items...<% } else { %>Please provide your specific reason for cancelling this entire order...<% } %>" rows="4"></textarea>
                    <div id="customOrderReasonError" class="error-message-enhanced">Please provide a custom reason</div>
                </div>
            </div>
            <div class="cancel-order-modal-footer">
                <button class="modal-btn-enhanced modal-btn-cancel-enhanced" onclick="closeCancelOrderModal()">
                    <i class="fas fa-arrow-left"></i>
                    <% if (order.status === 'Partially Cancelled') { %>
                        Keep Items
                    <% } else { %>
                        Keep Order
                    <% } %>
                </button>
                <button id="confirmOrderCancelBtn" class="modal-btn-enhanced modal-btn-confirm-enhanced" onclick="confirmOrderCancellation()" disabled>
                    <i class="fas fa-times-circle"></i>
                    <% if (order.status === 'Partially Cancelled') { %>
                        Cancel Remaining Items
                    <% } else { %>
                        Cancel Order
                    <% } %>
                </button>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
    <script>
        // Global variables for modal
        let currentOrderId = null;
        let currentItemId = null;

        // Open cancel modal
        function cancelOrderItem(orderId, itemId) {
            currentOrderId = orderId;
            currentItemId = itemId;
            
            // Reset form
            document.getElementById('cancelReason').value = '';
            document.getElementById('customReason').value = '';
            document.getElementById('customReasonGroup').classList.remove('show');
            document.getElementById('confirmCancelBtn').disabled = true;
            hideErrors();
            
            // Show modal
            document.getElementById('cancelItemModal').style.display = 'block';
            document.body.style.overflow = 'hidden';
        }

        // Close cancel modal
        function closeCancelModal() {
            document.getElementById('cancelItemModal').style.display = 'none';
            document.body.style.overflow = 'auto';
            currentOrderId = null;
            currentItemId = null;
        }

        // Handle reason dropdown change
        function handleReasonChange() {
            const reasonSelect = document.getElementById('cancelReason');
            const customReasonGroup = document.getElementById('customReasonGroup');
            const confirmBtn = document.getElementById('confirmCancelBtn');
            
            hideErrors();
            
            if (reasonSelect.value === 'Other') {
                customReasonGroup.classList.add('show');
                confirmBtn.disabled = true;
            } else if (reasonSelect.value) {
                customReasonGroup.classList.remove('show');
                confirmBtn.disabled = false;
            } else {
                customReasonGroup.classList.remove('show');
                confirmBtn.disabled = true;
            }
        }

        // Handle custom reason input
        document.getElementById('customReason').addEventListener('input', function() {
            const confirmBtn = document.getElementById('confirmCancelBtn');
            const customReason = this.value.trim();
            
            hideErrors();
            
            if (customReason) {
                confirmBtn.disabled = false;
            } else {
                confirmBtn.disabled = true;
            }
        });

        // Hide error messages
        function hideErrors() {
            document.getElementById('reasonError').classList.remove('show');
            document.getElementById('customReasonError').classList.remove('show');
        }

        // Show error message
        function showError(elementId, message) {
            const errorElement = document.getElementById(elementId);
            if (message) {
                errorElement.textContent = message;
            }
            errorElement.classList.add('show');
        }

        // Validate form
        function validateForm() {
            const reasonSelect = document.getElementById('cancelReason');
            const customReason = document.getElementById('customReason');
            
            hideErrors();
            
            if (!reasonSelect.value) {
                showError('reasonError');
                return false;
            }
            
            if (reasonSelect.value === 'Other' && !customReason.value.trim()) {
                showError('customReasonError');
                return false;
            }
            
            return true;
        }

        // Confirm cancellation
        async function confirmCancellation() {
            if (!validateForm()) {
                return;
            }
            
            const reasonSelect = document.getElementById('cancelReason');
            const customReason = document.getElementById('customReason');
            
            let reason = reasonSelect.value;
            if (reason === 'Other') {
                reason = customReason.value.trim();
            }
            
            try {
                const response = await fetch(`/orders/${currentOrderId}/items/${currentItemId}/cancel`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ reason: reason })
                });

                const result = await response.json();

                if (result.success) {
                    closeCancelModal();
                    
                    const Toast = Swal.mixin({
                        toast: true,
                        position: 'bottom-right',
                        showConfirmButton: false,
                        timer: 3000,
                        timerProgressBar: true
                    });

                    Toast.fire({
                        icon: 'success',
                        title: 'Product cancelled successfully'
                    });

                    setTimeout(() => {
                        window.location.reload();
                    }, 1500);
                } else {
                    closeCancelModal();
                    Swal.fire({
                        icon: 'error',
                        title: 'Cancellation Failed',
                        text: result.message || 'Failed to cancel product'
                    });
                }
            } catch (error) {
                console.error('Error cancelling product:', error);
                closeCancelModal();
                Swal.fire({
                    icon: 'error',
                    title: 'Error!',
                    text: 'Failed to cancel product. Please try again.'
                });
            }
        }

        // Close modal when clicking outside
        window.onclick = function(event) {
            const modal = document.getElementById('cancelItemModal');
            if (event.target === modal) {
                closeCancelModal();
            }
        }

        // Close modal with Escape key
        document.addEventListener('keydown', function(event) {
            if (event.key === 'Escape') {
                const modal = document.getElementById('cancelItemModal');
                if (modal.style.display === 'block') {
                    closeCancelModal();
                }
            }
        });

        // Order Cancellation Modal Functions
        function openCancelOrderModal() {
            // Reset form
            document.getElementById('cancelOrderReason').value = '';
            document.getElementById('customOrderReason').value = '';
            document.getElementById('customOrderReasonGroup').classList.remove('show');
            document.getElementById('confirmOrderCancelBtn').disabled = true;
            hideOrderErrors();
            
            // Show modal
            document.getElementById('cancelOrderModal').style.display = 'block';
            document.body.style.overflow = 'hidden';
        }

        function closeCancelOrderModal() {
            document.getElementById('cancelOrderModal').style.display = 'none';
            document.body.style.overflow = 'auto';
        }

        function handleOrderReasonChange() {
            const reasonSelect = document.getElementById('cancelOrderReason');
            const customReasonGroup = document.getElementById('customOrderReasonGroup');
            const confirmBtn = document.getElementById('confirmOrderCancelBtn');
            
            hideOrderErrors();
            
            if (reasonSelect.value === 'Other') {
                customReasonGroup.classList.add('show');
                confirmBtn.disabled = true;
            } else if (reasonSelect.value) {
                customReasonGroup.classList.remove('show');
                confirmBtn.disabled = false;
            } else {
                customReasonGroup.classList.remove('show');
                confirmBtn.disabled = true;
            }
        }

        // Handle custom reason input for order cancellation
        document.getElementById('customOrderReason').addEventListener('input', function() {
            const confirmBtn = document.getElementById('confirmOrderCancelBtn');
            const customReason = this.value.trim();
            
            hideOrderErrors();
            
            if (customReason) {
                confirmBtn.disabled = false;
            } else {
                confirmBtn.disabled = true;
            }
        });

        function hideOrderErrors() {
            document.getElementById('orderReasonError').classList.remove('show');
            document.getElementById('customOrderReasonError').classList.remove('show');
        }

        function showOrderError(elementId, message) {
            const errorElement = document.getElementById(elementId);
            if (message) {
                errorElement.textContent = message;
            }
            errorElement.classList.add('show');
        }

        function validateOrderForm() {
            const reasonSelect = document.getElementById('cancelOrderReason');
            const customReason = document.getElementById('customOrderReason');
            
            hideOrderErrors();
            
            if (!reasonSelect.value) {
                showOrderError('orderReasonError');
                return false;
            }
            
            if (reasonSelect.value === 'Other' && !customReason.value.trim()) {
                showOrderError('customOrderReasonError');
                return false;
            }
            
            return true;
        }

        async function confirmOrderCancellation() {
            if (!validateOrderForm()) {
                return;
            }
            
            const reasonSelect = document.getElementById('cancelOrderReason');
            const customReason = document.getElementById('customOrderReason');
            
            let reason = reasonSelect.value;
            if (reason === 'Other') {
                reason = customReason.value.trim();
            }
            
            try {
                const orderId = '<%= order.orderId %>';
                const response = await fetch(`/orders/${orderId}/cancel-entire`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ reason: reason })
                });

                const result = await response.json();

                if (result.success) {
                    closeCancelOrderModal();
                    
                    const Toast = Swal.mixin({
                        toast: true,
                        position: 'bottom-right',
                        showConfirmButton: false,
                        timer: 3000,
                        timerProgressBar: true
                    });

                    Toast.fire({
                        icon: 'success',
                        title: 'Order cancelled successfully'
                    });

                    setTimeout(() => {
                        window.location.reload();
                    }, 1500);
                } else {
                    closeCancelOrderModal();
                    Swal.fire({
                        icon: 'error',
                        title: 'Cancellation Failed',
                        text: result.message || 'Failed to cancel order'
                    });
                }
            } catch (error) {
                console.error('Error cancelling order:', error);
                closeCancelOrderModal();
                Swal.fire({
                    icon: 'error',
                    title: 'Error!',
                    text: 'Failed to cancel order. Please try again.'
                });
            }
        }

        // Close order modal when clicking outside
        window.addEventListener('click', function(event) {
            const orderModal = document.getElementById('cancelOrderModal');
            if (event.target === orderModal) {
                closeCancelOrderModal();
            }
        });

        // Close order modal with Escape key
        document.addEventListener('keydown', function(event) {
            if (event.key === 'Escape') {
                const orderModal = document.getElementById('cancelOrderModal');
                if (orderModal.style.display === 'block') {
                    closeCancelOrderModal();
                }
            }
        });

        // Download PDF invoice
        async function downloadInvoice(orderId) {
            // Get the button that was clicked
            const downloadBtn = event.target.closest('.btn-download-invoice');
            const originalText = downloadBtn.innerHTML;

            try {
                // Show loading state
                downloadBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Generating...';
                downloadBtn.disabled = true;

                // Make request to download invoice
                const response = await fetch(`/orders/${orderId}/download-invoice`);

                if (response.ok) {
                    // Get the PDF blob
                    const blob = await response.blob();

                    // Create download link
                    const url = window.URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = `Invoice-${orderId}.pdf`;
                    document.body.appendChild(a);
                    a.click();

                    // Cleanup
                    window.URL.revokeObjectURL(url);
                    document.body.removeChild(a);

                    // Show success toast
                    const Toast = Swal.mixin({
                        toast: true,
                        position: 'bottom-right',
                        showConfirmButton: false,
                        timer: 3000,
                        timerProgressBar: true
                    });

                    Toast.fire({
                        icon: 'success',
                        title: 'Invoice downloaded successfully'
                    });
                } else {
                    const errorData = await response.json();
                    throw new Error(errorData.message || 'Failed to download invoice');
                }
            } catch (error) {
                console.error('Error downloading invoice:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Download Failed',
                    text: error.message || 'Failed to download invoice. Please try again.'
                });
            } finally {
                // Reset button state
                downloadBtn.innerHTML = originalText;
                downloadBtn.disabled = false;
            }
        }
    </script>
</body>
</html>
