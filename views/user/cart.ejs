<%- include("../partials/user/header") %>

<style>
    /* Cart Page Styles */
    .cart-wrapper {
        background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
        min-height: 100vh;
        padding: 6rem 0 3rem 0;
    }

    .cart-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 2rem;
    }

    .cart-header {
        text-align: center;
        margin-bottom: 3rem;
    }

    .cart-title {
        font-size: 3rem;
        font-weight: 800;
        color: #111827;
        margin-bottom: 1rem;
        background: linear-gradient(135deg, #111827 0%, #374151 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }

    .cart-subtitle {
        font-size: 1.125rem;
        color: #6b7280;
        max-width: 600px;
        margin: 0 auto;
    }

    /* Cart Content */
    .cart-content {
        display: grid;
        grid-template-columns: 1fr 350px;
        gap: 2rem;
        align-items: start;
    }

    .cart-items {
        background: white;
        border-radius: 20px;
        padding: 2rem;
        box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1);
    }

    .cart-item {
        display: grid;
        grid-template-columns: 120px 1fr auto auto auto;
        gap: 1.5rem;
        align-items: center;
        padding: 1.5rem 0;
        border-bottom: 1px solid #e5e7eb;
        transition: all 0.3s ease;
    }

    .cart-item:last-child {
        border-bottom: none;
    }

    .cart-item:hover {
        background: #f8fafc;
        border-radius: 12px;
        padding: 1.5rem;
        margin: 0 -1rem;
    }

    .item-image {
        width: 120px;
        height: 120px;
        object-fit: cover;
        border-radius: 12px;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
    }

    .item-details {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    .item-brand {
        color: #6b7280;
        font-size: 0.875rem;
        font-weight: 500;
        text-transform: uppercase;
        letter-spacing: 0.05em;
    }

    .item-name {
        font-size: 1.125rem;
        font-weight: 600;
        color: #111827;
        margin: 0;
    }

    .item-price {
        font-size: 1rem;
        font-weight: 600;
        color: #111827;
    }

    .item-stock {
        font-size: 0.875rem;
        margin-top: 0.25rem;
    }

    .in-stock {
        color: #059669;
    }

    .out-of-stock {
        color: #dc2626;
    }

    .low-stock {
        color: #d97706;
    }

    /* Quantity Controls */
    .quantity-controls {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        background: #f8fafc;
        border-radius: 12px;
        padding: 0.5rem;
    }

    .qty-btn {
        width: 32px;
        height: 32px;
        border: none;
        background: #111827;
        color: white;
        border-radius: 8px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: all 0.2s ease;
        font-size: 14px;
        font-weight: 600;
    }

    .qty-btn:hover:not(:disabled) {
        background: #374151;
        transform: scale(1.05);
    }

    .qty-btn:disabled {
        background: #d1d5db;
        cursor: not-allowed;
        transform: none;
    }

    .qty-input {
        width: 50px;
        text-align: center;
        border: none;
        background: transparent;
        font-weight: 600;
        color: #111827;
        font-size: 1rem;
    }

    /* Quantity Controls Container */
    .quantity-controls-wrapper {
        position: relative;
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 0.75rem;
    }

    /* Quantity Limit Message */
    .quantity-limit-message {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.5rem;
        width: 100%;
        max-width: 200px;
        padding: 0.6rem 1rem;
        background: linear-gradient(135deg, #fef3c7 0%, #fde68a 100%);
        border: 1px solid #f59e0b;
        border-radius: 12px;
        font-size: 0.8rem;
        color: #92400e;
        font-weight: 600;
        text-align: center;
        box-shadow: 0 2px 8px rgba(245, 158, 11, 0.2);
        animation: slideInFromBottom 0.4s ease-out;
        position: relative;
        overflow: hidden;
    }

    .quantity-limit-message::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
        animation: shimmer 2s infinite;
    }

    .quantity-limit-message i {
        color: #f59e0b;
        font-size: 1rem;
        animation: pulse 2s infinite;
    }

    .quantity-limit-message span {
        font-size: 0.75rem;
        line-height: 1.2;
        letter-spacing: 0.025em;
    }

    @keyframes slideInFromBottom {
        from {
            opacity: 0;
            transform: translateY(10px) scale(0.95);
        }
        to {
            opacity: 1;
            transform: translateY(0) scale(1);
        }
    }

    @keyframes shimmer {
        0% {
            left: -100%;
        }
        100% {
            left: 100%;
        }
    }

    @keyframes pulse {
        0%, 100% {
            transform: scale(1);
        }
        50% {
            transform: scale(1.1);
        }
    }



    .item-total {
        font-size: 1.125rem;
        font-weight: 700;
        color: #111827;
        text-align: right;
    }

    .remove-btn {
        background: #dc2626;
        color: white;
        border: none;
        border-radius: 8px;
        padding: 0.5rem;
        cursor: pointer;
        transition: all 0.2s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        width: 36px;
        height: 36px;
    }

    .remove-btn:hover {
        background: #b91c1c;
        transform: scale(1.05);
    }

    /* Cart Summary */
    .cart-summary {
        background: white;
        border-radius: 20px;
        padding: 2rem;
        box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1);
        height: fit-content;
        position: sticky;
        top: 6rem;
    }

    .summary-title {
        font-size: 1.5rem;
        font-weight: 700;
        color: #111827;
        margin-bottom: 1.5rem;
        text-align: center;
    }

    .summary-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.75rem 0;
        border-bottom: 1px solid #e5e7eb;
    }

    .summary-row:last-child {
        border-bottom: none;
        font-size: 1.25rem;
        font-weight: 700;
        color: #111827;
        margin-top: 1rem;
        padding-top: 1rem;
        border-top: 2px solid #111827;
    }

    .summary-label {
        color: #6b7280;
        font-weight: 500;
    }

    .summary-value {
        font-weight: 600;
        color: #111827;
    }

    /* Action Buttons */
    .cart-actions {
        display: flex;
        flex-direction: column;
        gap: 1rem;
        margin-top: 2rem;
    }

    .btn-cart {
        padding: 1rem 2rem;
        border-radius: 12px;
        font-weight: 600;
        font-size: 1rem;
        border: none;
        cursor: pointer;
        transition: all 0.3s ease;
        text-decoration: none;
        text-align: center;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.5rem;
    }

    .btn-primary {
        background: #111827;
        color: white;
    }

    .btn-primary:hover {
        background: #374151;
        transform: translateY(-2px);
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
    }

    .btn-secondary {
        background: transparent;
        color: #111827;
        border: 2px solid #111827;
    }

    .btn-secondary:hover {
        background: #111827;
        color: white;
        transform: translateY(-2px);
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
    }

    /* Empty Cart */
    .empty-cart {
        text-align: center;
        padding: 4rem 2rem;
        background: white;
        border-radius: 20px;
        box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1);
    }

    .empty-icon {
        font-size: 4rem;
        color: #d1d5db;
        margin-bottom: 1.5rem;
    }

    .empty-title {
        font-size: 1.5rem;
        font-weight: 700;
        color: #111827;
        margin-bottom: 1rem;
    }

    .empty-text {
        color: #6b7280;
        margin-bottom: 2rem;
        font-size: 1.125rem;
    }

    /* Enhanced Out of Stock Styling */
    .cart-item.out-of-stock {
        opacity: 0.6;
        background: linear-gradient(135deg, #f9fafb 0%, #f3f4f6 100%);
        border: 1px dashed #d1d5db;
        position: relative;
    }

    .cart-item.out-of-stock::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: repeating-linear-gradient(
            45deg,
            transparent,
            transparent 10px,
            rgba(239, 68, 68, 0.1) 10px,
            rgba(239, 68, 68, 0.1) 20px
        );
        pointer-events: none;
        border-radius: 15px;
    }

    .cart-item.out-of-stock .item-image {
        filter: grayscale(100%) brightness(0.8);
        border: 2px solid #ef4444;
        position: relative;
    }

    .cart-item.out-of-stock .item-image::after {
        content: 'OUT OF STOCK';
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%) rotate(-15deg);
        background: rgba(239, 68, 68, 0.9);
        color: white;
        padding: 4px 8px;
        font-size: 0.7rem;
        font-weight: bold;
        border-radius: 4px;
        letter-spacing: 0.5px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
    }

    .cart-item.out-of-stock .item-details {
        opacity: 0.7;
    }

    .cart-item.out-of-stock .item-name {
        text-decoration: line-through;
        color: #6b7280;
    }

    .cart-item.out-of-stock .quantity-controls button {
        background: #f3f4f6 !important;
        color: #9ca3af !important;
        cursor: not-allowed !important;
        border-color: #d1d5db !important;
    }

    .cart-item.out-of-stock .quantity-controls input {
        background: #f9fafb !important;
        color: #6b7280 !important;
        border-color: #d1d5db !important;
    }

    .cart-item.out-of-stock .item-total {
        color: #9ca3af;
        text-decoration: line-through;
    }

    /* Out-of-Stock Management Styles */
    .out-of-stock-banner {
        background: linear-gradient(135deg, #fef2f2 0%, #fee2e2 100%);
        border: 1px solid #fecaca;
        border-radius: 12px;
        padding: 1rem;
        margin-bottom: 1.5rem;
        display: flex;
        align-items: center;
        justify-content: space-between;
        box-shadow: 0 2px 4px rgba(239, 68, 68, 0.1);
    }

    .out-of-stock-banner .banner-content {
        display: flex;
        align-items: center;
        gap: 0.75rem;
    }

    .out-of-stock-banner .banner-icon {
        color: #ef4444;
        font-size: 1.25rem;
    }

    .out-of-stock-banner .banner-text {
        color: #991b1b;
    }

    .out-of-stock-banner .banner-title {
        font-weight: 600;
        margin-bottom: 0.25rem;
    }

    .out-of-stock-banner .banner-subtitle {
        font-size: 0.875rem;
        opacity: 0.8;
    }

    .out-of-stock-banner .banner-actions {
        display: flex;
        gap: 0.5rem;
    }

    .btn-remove-unavailable {
        background: #ef4444;
        color: white;
        border: none;
        padding: 0.5rem 1rem;
        border-radius: 8px;
        font-size: 0.875rem;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s ease;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .btn-remove-unavailable:hover {
        background: #dc2626;
        transform: translateY(-1px);
        box-shadow: 0 4px 8px rgba(239, 68, 68, 0.3);
    }

    .btn-continue-shopping {
        background: transparent;
        color: #ef4444;
        border: 1px solid #ef4444;
        padding: 0.5rem 1rem;
        border-radius: 8px;
        font-size: 0.875rem;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s ease;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .btn-continue-shopping:hover {
        background: #ef4444;
        color: white;
        transform: translateY(-1px);
    }

    /* Cart Summary Enhancements */
    .cart-summary .availability-breakdown {
        background: #f8fafc;
        border-radius: 8px;
        padding: 0.75rem;
        margin-bottom: 1rem;
        border: 1px solid #e2e8f0;
    }

    .cart-summary .availability-breakdown .breakdown-title {
        font-size: 0.875rem;
        font-weight: 600;
        color: #374151;
        margin-bottom: 0.5rem;
    }

    .cart-summary .availability-breakdown .breakdown-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.25rem 0;
        font-size: 0.875rem;
    }

    .cart-summary .availability-breakdown .breakdown-item.available {
        color: #059669;
    }

    .cart-summary .availability-breakdown .breakdown-item.unavailable {
        color: #ef4444;
    }

    .cart-summary .availability-breakdown .breakdown-item .count {
        font-weight: 600;
    }

    /* Breadcrumb Styles */
    .breadcrumb-container {
        margin-bottom: 2rem;
    }

    .breadcrumb {
        background: transparent;
        padding: 0;
        margin: 0;
        font-size: 0.875rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .breadcrumb-item {
        color: #6b7280;
        display: flex;
        align-items: center;
    }

    .breadcrumb-item a {
        color: #6b7280;
        text-decoration: none;
        transition: color 0.2s ease;
    }

    .breadcrumb-item a:hover {
        color: #111827;
    }

    .breadcrumb-item.active {
        color: #111827;
        font-weight: 600;
    }

    .breadcrumb-item + .breadcrumb-item::before {
        content: '/';
        color: #d1d5db;
        margin-right: 0.5rem;
    }

    /* Responsive Design */
    @media (max-width: 768px) {
        .cart-wrapper {
            padding: 5rem 0 2rem 0;
        }

        .cart-container {
            padding: 0 1rem;
        }

        .cart-title {
            font-size: 2.25rem;
        }

        .cart-content {
            grid-template-columns: 1fr;
            gap: 2rem;
        }

        .cart-summary {
            position: static;
            order: -1;
        }

        .cart-item {
            grid-template-columns: 80px 1fr;
            gap: 1rem;
        }

        .item-image {
            width: 80px;
            height: 80px;
        }

        .quantity-controls-wrapper,
        .item-total,
        .remove-btn {
            grid-column: 1 / -1;
            justify-self: start;
            margin-top: 1rem;
        }

        .quantity-controls-wrapper {
            width: 100%;
            max-width: none;
        }

        .quantity-limit-message {
            max-width: 100%;
            font-size: 0.7rem;
            padding: 0.5rem 0.75rem;
        }

        .quantity-limit-message span {
            font-size: 0.7rem;
        }

        .cart-actions {
            flex-direction: column;
        }

        .breadcrumb {
            font-size: 0.75rem;
        }
    }
</style>

<div class="cart-wrapper">
    <div class="cart-container">
        <!-- Breadcrumb Navigation -->
        <div class="breadcrumb-container">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/">Home</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Cart</li>
                </ol>
            </nav>
        </div>

        <!-- Cart Header -->
        <div class="cart-header">
            <h1 class="cart-title">Shopping Cart</h1>
            <p class="cart-subtitle">Review your items and proceed to checkout when ready</p>
        </div>

        <% if (cartItems && cartItems.length > 0) { %>
            <%
                // Calculate out-of-stock items for banner
                const outOfStockItems = cartItems.filter(item => item.productId.quantity === 0);
                const availableItems = cartItems.filter(item => item.productId.quantity > 0);
            %>

            <!-- Out-of-Stock Banner (show only if there are out-of-stock items) -->
            <% if (outOfStockItems.length > 0) { %>
                <div class="out-of-stock-banner" id="outOfStockBanner">
                    <div class="banner-content">
                        <i class="bi bi-exclamation-triangle-fill banner-icon"></i>
                        <div class="banner-text">
                            <div class="banner-title">
                                <%= outOfStockItems.length %> item<%= outOfStockItems.length > 1 ? 's' : '' %> in your cart <%= outOfStockItems.length > 1 ? 'are' : 'is' %> out of stock
                            </div>
                            <div class="banner-subtitle">
                                These items cannot be purchased and won't be included in checkout
                            </div>
                        </div>
                    </div>
                    <div class="banner-actions">
                        <button class="btn-remove-unavailable" onclick="removeAllOutOfStockItems()">
                            <i class="bi bi-trash"></i>
                            Remove Unavailable
                        </button>
                        <a href="/shop" class="btn-continue-shopping">
                            <i class="bi bi-plus-circle"></i>
                            Add More Items
                        </a>
                    </div>
                </div>
            <% } %>

            <!-- Cart Content -->
            <div class="cart-content">
                <!-- Cart Items -->
                <div class="cart-items">
                    <% cartItems.forEach(item => { %>
                        <%
                            const isOutOfStock = item.productId.quantity === 0;
                            const isLowStock = item.productId.quantity > 0 && item.productId.quantity <= 5;
                            const stockClass = isOutOfStock ? 'out-of-stock' : (isLowStock ? 'low-stock' : 'in-stock');
                        %>
                        <div class="cart-item <%= isOutOfStock ? 'out-of-stock' : '' %>"
                             data-product-id="<%= item.productId._id %>"
                             data-regular-price="<%= item.productId.regularPrice %>"
                             data-sale-price="<%= item.productId.salePrice %>"
                             data-product-offer="<%= item.productId.productOffer || 0 %>"
                             data-product-stock="<%= item.productId.quantity %>"
                             data-is-out-of-stock="<%= isOutOfStock %>">
                            <!-- Product Image -->
                            <img src="/uploads/products/<%= item.productId.mainImage %>"
                                 alt="<%= item.productId.productName %>"
                                 class="item-image"
                                 onerror="this.src='https://images.unsplash.com/photo-1523275335684-37898b6baf30?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&q=80'">

                            <!-- Product Details -->
                            <div class="item-details">
                                <div class="item-brand"><%= item.productId.brand %></div>
                                <h3 class="item-name"><%= item.productId.productName %></h3>
                                <div class="item-price">₹<%= item.price.toFixed(2) %></div>
                                <div class="item-stock <%= stockClass %>">
                                    <% if (isOutOfStock) { %>
                                        <i class="bi bi-x-circle"></i> Out of Stock
                                    <% } else if (isLowStock) { %>
                                        <i class="bi bi-exclamation-triangle"></i> Only <%= item.productId.quantity %> left
                                    <% } else { %>
                                        <i class="bi bi-check-circle"></i> In Stock
                                    <% } %>
                                </div>
                            </div>

                            <!-- Quantity Controls Wrapper -->
                            <div class="quantity-controls-wrapper">
                                <!-- Quantity Controls -->
                                <div class="quantity-controls">
                                    <button class="qty-btn" onclick="updateQuantity('<%= item.productId._id %>', <%= item.quantity - 1 %>)"
                                            <%= (item.quantity <= 1) ? 'disabled' : '' %>>
                                        <i class="bi bi-dash"></i>
                                    </button>
                                    <input type="number" class="qty-input" value="<%= item.quantity %>"
                                           min="1" max="5" readonly>
                                    <button class="qty-btn" onclick="updateQuantity('<%= item.productId._id %>', <%= item.quantity + 1 %>)"
                                            <%= (item.quantity >= 5 || item.quantity >= item.productId.quantity || isOutOfStock) ? 'disabled' : '' %>
                                            <% if (item.quantity >= 5) { %>
                                                title="Maximum 5 items allowed per product"
                                            <% } else if (item.quantity >= item.productId.quantity) { %>
                                                title="Not enough stock available"
                                            <% } else if (isOutOfStock) { %>
                                                title="Product is out of stock"
                                            <% } %>>
                                        <i class="bi bi-plus"></i>
                                    </button>
                                </div>

                                <!-- Quantity Limit Message (positioned at bottom) -->
                                <% if (item.quantity >= 5) { %>
                                    <div class="quantity-limit-message">
                                        <i class="bi bi-exclamation-triangle-fill"></i>
                                        <span>Maximum limit reached<br><small>(5 items per product)</small></span>
                                    </div>
                                <% } %>
                            </div>

                            <!-- Item Total -->
                            <div class="item-total">₹<%= item.totalPrice.toFixed(2) %></div>

                            <!-- Remove Button -->
                            <button class="remove-btn" onclick="removeFromCart('<%= item.productId._id %>')" title="Remove item">
                                <i class="bi bi-trash"></i>
                            </button>
                        </div>
                    <% }) %>
                </div>

                <!-- Cart Summary -->
                <div class="cart-summary">
                    <h3 class="summary-title">Order Summary</h3>

                    <%
                        let subtotal = 0; // Based on regular prices
                        let totalDiscount = 0;
                        let totalItemCount = 0;
                        let availableItemsCount = 0;
                        let availableQuantity = 0;
                        let outOfStockQuantity = 0;
                        let amountAfterDiscount = 0; // Amount customer actually pays

                        cartItems.forEach(item => {
                            totalItemCount += item.quantity; // Count all items (quantities)

                            if (item.productId.quantity > 0) {
                                // Subtotal based on regular prices
                                const regularPrice = item.productId.regularPrice;
                                const salePrice = item.productId.salePrice;
                                const quantity = item.quantity;
                                
                                subtotal += regularPrice * quantity;
                                amountAfterDiscount += item.totalPrice; // This is sale price * quantity
                                availableItemsCount++;
                                availableQuantity += quantity;

                                // Calculate proportional discount
                                const itemDiscount = (regularPrice - salePrice) * quantity;
                                totalDiscount += itemDiscount;
                            } else {
                                outOfStockQuantity += item.quantity;
                            }
                        });

                        const shipping = amountAfterDiscount > 500 ? 0 : 50; // Free shipping based on amount after discount
                        const total = amountAfterDiscount + shipping; // Final amount customer pays
                        const outOfStockItemsCount = cartItems.length - availableItemsCount;
                    %>

                    <!-- Availability Breakdown -->
                    <% if (outOfStockItemsCount > 0) { %>
                        <div class="availability-breakdown">
                            <div class="breakdown-title">Cart Breakdown</div>
                            <div class="breakdown-item available">
                                <span><i class="bi bi-check-circle"></i> Available Items</span>
                                <span class="count"><%= availableItemsCount %> (<%= availableQuantity %> items)</span>
                            </div>
                            <div class="breakdown-item unavailable">
                                <span><i class="bi bi-x-circle"></i> Out of Stock</span>
                                <span class="count"><%= outOfStockItemsCount %> (<%= outOfStockQuantity %> items)</span>
                            </div>
                        </div>
                    <% } %>

                    <div class="summary-row">
                        <span class="summary-label">Subtotal (<%= totalItemCount %> items)</span>
                        <span class="summary-value">₹<%= subtotal.toFixed(2) %></span>
                    </div>

                    <div class="summary-row">
                        <span class="summary-label">Discount</span>
                        <span class="summary-value" style="color: #059669;">
                            <% if (totalDiscount > 0) { %>
                                -₹<%= totalDiscount.toFixed(2) %>
                            <% } else { %>
                                ₹0.00
                            <% } %>
                        </span>
                    </div>

                    <div class="summary-row">
                        <span class="summary-label">Shipping</span>
                        <span class="summary-value">
                            <% if (shipping === 0) { %>
                                <span style="color: #059669;">FREE</span>
                            <% } else { %>
                                ₹<%= shipping.toFixed(2) %>
                            <% } %>
                        </span>
                    </div>

                    <div class="summary-row">
                        <span class="summary-label">Total</span>
                        <span class="summary-value">₹<%= total.toFixed(2) %></span>
                    </div>

                    <!-- Action Buttons -->
                    <div class="cart-actions">
                        <% if (availableItemsCount > 0) { %>
                            <button class="btn-cart btn-primary" onclick="proceedToCheckout()" id="checkoutBtn">
                                <i class="bi bi-credit-card"></i>
                                Proceed to Checkout (<%= availableItemsCount %> item<%= availableItemsCount > 1 ? 's' : '' %>)
                            </button>
                        <% } else { %>
                            <button class="btn-cart btn-primary" disabled style="opacity: 0.5; cursor: not-allowed;" id="checkoutBtn" onclick="showCheckoutUnavailableMessage()">
                                <i class="bi bi-x-circle"></i>
                                <% if (outOfStockItemsCount > 0) { %>
                                    Cannot Checkout - All Items Out of Stock
                                <% } else { %>
                                    No Available Items
                                <% } %>
                            </button>
                        <% } %>

                        <% if (outOfStockItemsCount > 0) { %>
                            <button class="btn-cart btn-secondary" onclick="removeAllOutOfStockItems()" style="background: #ef4444; color: white; border-color: #ef4444;">
                                <i class="bi bi-trash"></i>
                                Remove Out of Stock Items
                            </button>
                        <% } %>

                        <a href="/shop" class="btn-cart btn-secondary">
                            <i class="bi bi-arrow-left"></i>
                            Continue Shopping
                        </a>

                        <button class="btn-cart btn-secondary" onclick="clearCart()" style="color: #dc2626; border-color: #dc2626;">
                            <i class="bi bi-trash"></i>
                            Clear Cart
                        </button>
                    </div>
                </div>
            </div>
        <% } else { %>
            <!-- Empty Cart -->
            <div class="empty-cart">
                <div class="empty-icon">
                    <i class="bi bi-cart-x"></i>
                </div>
                <h2 class="empty-title">Your Cart is Empty</h2>
                <p class="empty-text">Looks like you haven't added any items to your cart yet. Start shopping to fill it up!</p>
                <a href="/shop" class="btn-cart btn-primary">
                    <i class="bi bi-bag"></i>
                    Start Shopping
                </a>
            </div>
        <% } %>
    </div>
</div>

<!-- SweetAlert2 JavaScript -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
    // Update cart item quantity
    async function updateQuantity(productId, newQuantity) {
        if (newQuantity < 1) {
            // If quantity would be 0, directly remove the item
            removeFromCart(productId);
            return;
        }

        if (newQuantity > 5) {
            showSweetAlert('Maximum limit reached! You can only add up to 5 items per product.', 'error');
            return;
        }

        // Prevent multiple simultaneous requests for the same product
        const cartItem = document.querySelector(`[data-product-id="${productId}"]`);
        if (cartItem.dataset.updating === 'true') {
            return;
        }

        // Frontend stock validation before API call
        const productStock = parseInt(cartItem.dataset.productStock || 0);
        const isOutOfStock = cartItem.classList.contains('out-of-stock');

        // Check if product is out of stock
        if (isOutOfStock || productStock === 0) {
            showSweetAlert('This product is currently out of stock.', 'error');
            return;
        }

        // Check if requested quantity exceeds available stock
        if (newQuantity > productStock) {
            showSweetAlert(`Only ${productStock} items available in stock. Cannot add more than available quantity.`, 'error');
            return;
        }

        try {
            // Mark as updating
            cartItem.dataset.updating = 'true';

            // Show loading state
            const qtyButtons = cartItem.querySelectorAll('.qty-btn');
            qtyButtons.forEach(btn => {
                btn.disabled = true;
                btn.innerHTML = '<i class="bi bi-arrow-repeat" style="animation: spin 1s linear infinite;"></i>';
            });

            const response = await fetch('/cart/update', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ productId, quantity: newQuantity })
            });

            const result = await response.json();

            if (result.success) {
                // Update the UI
                const qtyInput = cartItem.querySelector('.qty-input');
                const itemTotal = cartItem.querySelector('.item-total');

                qtyInput.value = newQuantity;
                itemTotal.textContent = `₹${result.itemTotal.toFixed(2)}`;

                // Update cart counter
                updateCartCounter(result.cartCount);

                // Update button states immediately after successful update
                updateButtonStates(productId);

                // Recalculate totals
                updateCartTotals();
            } else {
                // Enhanced error handling with specific stock validation messages
                let errorMessage = result.message || 'Failed to update quantity';

                if (result.code === 'OUT_OF_STOCK') {
                    errorMessage = 'This product is currently out of stock.';
                } else if (result.code === 'INSUFFICIENT_STOCK') {
                    errorMessage = `Only ${result.availableStock || 0} items available in stock.`;
                } else if (result.code === 'CART_QUANTITY_LIMIT') {
                    errorMessage = 'Maximum limit reached! You can only add up to 5 items per product.';
                }

                showSweetAlert(errorMessage, 'error');

                // If stock-related error, update the frontend stock data
                if (result.code === 'OUT_OF_STOCK' || result.code === 'INSUFFICIENT_STOCK') {
                    if (result.availableStock !== undefined) {
                        cartItem.dataset.productStock = result.availableStock;
                        if (result.availableStock === 0) {
                            cartItem.classList.add('out-of-stock');
                        }
                        // Update button states with new stock information
                        updateButtonStates(productId);
                    }
                }
            }
        } catch (error) {
            console.error('Error updating quantity:', error);
            showSweetAlert('Failed to update cart. Please try again.', 'error');
        } finally {
            // Remove updating flag
            cartItem.dataset.updating = 'false';

            // Restore buttons
            const qtyButtons = cartItem.querySelectorAll('.qty-btn');
            qtyButtons[0].innerHTML = '<i class="bi bi-dash"></i>';
            qtyButtons[1].innerHTML = '<i class="bi bi-plus"></i>';

            // Re-enable buttons based on current state
            updateButtonStates(productId);
        }
    }

    // Remove item from cart
    async function removeFromCart(productId) {
        try {
            const response = await fetch('/cart/remove', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ productId })
            });

            const data = await response.json();

            if (data.success) {
                // Remove the item from UI
                const cartItem = document.querySelector(`[data-product-id="${productId}"]`);
                cartItem.style.transition = 'all 0.3s ease';
                cartItem.style.opacity = '0';
                cartItem.style.transform = 'translateX(-100%)';

                setTimeout(() => {
                    cartItem.remove();

                    // Check if cart is empty
                    const remainingItems = document.querySelectorAll('.cart-item');
                    if (remainingItems.length === 0) {
                        location.reload(); // Reload to show empty cart state
                    } else {
                        updateCartTotals();
                    }
                }, 300);

                // Update cart counter
                updateCartCounter(data.cartCount);

                showSweetAlert('Item removed from cart', 'success');
            } else {
                showSweetAlert(data.message || 'Failed to remove item', 'error');
            }
        } catch (error) {
            console.error('Error removing item:', error);
            showSweetAlert('Failed to remove item. Please try again.', 'error');
        }
    }

    // Clear entire cart
    async function clearCart() {
        try {
            const response = await fetch('/cart/clear', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                }
            });

            const data = await response.json();

            if (data.success) {
                // Update cart counter
                updateCartCounter(0);

                showSweetAlert('Cart cleared successfully', 'success');
                setTimeout(() => {
                    location.reload(); // Reload to show empty cart state
                }, 1000);
            } else {
                showSweetAlert(data.message || 'Failed to clear cart', 'error');
            }
        } catch (error) {
            console.error('Error clearing cart:', error);
            showSweetAlert('Failed to clear cart. Please try again.', 'error');
        }
    }

    // Enhanced checkout function with comprehensive validation
    function proceedToCheckout() {
        // Check if there are available items
        const availableItems = document.querySelectorAll('.cart-item:not(.out-of-stock)');
        const outOfStockItems = document.querySelectorAll('.cart-item.out-of-stock');

        if (availableItems.length === 0) {
            if (outOfStockItems.length > 0) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Cannot Proceed to Checkout',
                    html: `
                        <p>All items in your cart are currently out of stock.</p>
                        <p><strong>Options:</strong></p>
                        <ul style="text-align: left; margin: 1rem 0;">
                            <li>Remove out-of-stock items and add available products</li>
                            <li>Continue shopping to find alternative products</li>
                            <li>Check back later when items are restocked</li>
                        </ul>
                    `,
                    showCancelButton: true,
                    confirmButtonText: 'Remove Out of Stock Items',
                    cancelButtonText: 'Continue Shopping',
                    confirmButtonColor: '#ef4444',
                    cancelButtonColor: '#111827'
                }).then((result) => {
                    if (result.isConfirmed) {
                        removeAllOutOfStockItems();
                    } else if (result.dismiss === Swal.DismissReason.cancel) {
                        window.location.href = '/shop';
                    }
                });
            } else {
                Swal.fire({
                    icon: 'info',
                    title: 'Empty Cart',
                    text: 'Your cart is empty. Add some products to proceed.',
                    confirmButtonColor: '#111827'
                }).then(() => {
                    window.location.href = '/shop';
                });
            }
            return;
        }

        // Validate stock levels for available items
        let hasStockIssues = false;
        const stockIssues = [];

        availableItems.forEach(item => {
            const productId = item.dataset.productId;
            const currentQty = parseInt(item.querySelector('.qty-input').value);
            const availableStock = parseInt(item.dataset.productStock || 0);
            const productName = item.querySelector('.item-name').textContent;

            if (currentQty > availableStock) {
                hasStockIssues = true;
                stockIssues.push({
                    name: productName,
                    requested: currentQty,
                    available: availableStock
                });
            }
        });

        if (hasStockIssues) {
            let issueText = 'The following items have stock issues:\n\n';
            stockIssues.forEach(issue => {
                issueText += `• ${issue.name}: Requested ${issue.requested}, Available ${issue.available}\n`;
            });
            issueText += '\nPlease adjust quantities before proceeding.';

            Swal.fire({
                icon: 'warning',
                title: 'Stock Issues Detected',
                text: issueText,
                confirmButtonColor: '#111827'
            });
            return;
        }

        // Redirect to checkout page
        window.location.href = '/checkout';
    }

    // Function to show message when checkout is unavailable
    function showCheckoutUnavailableMessage() {
        const outOfStockItems = document.querySelectorAll('.cart-item.out-of-stock');

        Swal.fire({
            icon: 'error',
            title: 'Checkout Unavailable',
            html: `
                <p>Cannot proceed to checkout because all items in your cart are out of stock.</p>
                <p><strong>${outOfStockItems.length}</strong> item${outOfStockItems.length > 1 ? 's are' : ' is'} currently unavailable.</p>
                <br>
                <p>Would you like to remove these items and continue shopping?</p>
            `,
            showCancelButton: true,
            confirmButtonText: 'Remove & Shop',
            cancelButtonText: 'Keep Items',
            confirmButtonColor: '#ef4444',
            cancelButtonColor: '#6b7280'
        }).then((result) => {
            if (result.isConfirmed) {
                removeAllOutOfStockItems();
            }
        });
    }

    // Function to remove all out-of-stock items from cart
    async function removeAllOutOfStockItems() {
        const outOfStockItems = document.querySelectorAll('.cart-item.out-of-stock');

        if (outOfStockItems.length === 0) {
            showSweetAlert('No out-of-stock items to remove.', 'info');
            return;
        }

        // Show confirmation dialog
        const result = await Swal.fire({
            icon: 'question',
            title: 'Remove Out-of-Stock Items',
            html: `
                <p>Are you sure you want to remove <strong>${outOfStockItems.length}</strong> out-of-stock item${outOfStockItems.length > 1 ? 's' : ''} from your cart?</p>
                <p><em>This action cannot be undone.</em></p>
            `,
            showCancelButton: true,
            confirmButtonText: 'Yes, Remove All',
            cancelButtonText: 'Cancel',
            confirmButtonColor: '#ef4444',
            cancelButtonColor: '#6b7280'
        });

        if (!result.isConfirmed) {
            return;
        }

        // Show loading state
        const loadingAlert = Swal.fire({
            title: 'Removing Items...',
            html: 'Please wait while we remove out-of-stock items.',
            allowOutsideClick: false,
            allowEscapeKey: false,
            showConfirmButton: false,
            didOpen: () => {
                Swal.showLoading();
            }
        });

        try {
            // Use the new bulk removal endpoint
            const response = await fetch('/cart/remove-out-of-stock', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                }
            });

            const data = await response.json();

            // Close loading alert
            loadingAlert.close();

            if (data.success) {
                const removedCount = data.removedCount;

                // Remove out-of-stock items from UI with animation
                outOfStockItems.forEach(item => {
                    item.style.transition = 'all 0.3s ease';
                    item.style.opacity = '0';
                    item.style.transform = 'translateX(-100%)';
                    setTimeout(() => {
                        item.remove();
                    }, 300);
                });

                // Update cart counter
                updateCartCounter(data.cartCount);

                // Update cart totals and UI
                setTimeout(() => {
                    updateCartTotals();

                    // Hide out-of-stock banner
                    const banner = document.getElementById('outOfStockBanner');
                    if (banner) {
                        banner.style.transition = 'all 0.3s ease';
                        banner.style.opacity = '0';
                        banner.style.transform = 'translateY(-20px)';
                        setTimeout(() => {
                            banner.remove();
                        }, 300);
                    }

                    // Check if cart is now empty
                    const remainingItems = document.querySelectorAll('.cart-item');
                    if (remainingItems.length === 0) {
                        setTimeout(() => {
                            location.reload(); // Reload to show empty cart state
                        }, 500);
                    }
                }, 500);

                // Show success message
                if (removedCount > 0) {
                    showSweetAlert(`Successfully removed ${removedCount} out-of-stock item${removedCount > 1 ? 's' : ''} from your cart.`, 'success');
                } else {
                    showSweetAlert('No out-of-stock items were found to remove.', 'info');
                }
            } else {
                showSweetAlert(data.message || 'Failed to remove out-of-stock items.', 'error');
            }

        } catch (error) {
            loadingAlert.close();
            console.error('Error during bulk removal:', error);
            showSweetAlert('An error occurred while removing items. Please try again.', 'error');
        }
    }

    // Update button states for a specific product
    function updateButtonStates(productId) {
        const cartItem = document.querySelector(`[data-product-id="${productId}"]`);
        if (!cartItem) return;

        const qtyButtons = cartItem.querySelectorAll('.qty-btn');
        const currentQty = parseInt(cartItem.querySelector('.qty-input').value);
        const isOutOfStock = cartItem.classList.contains('out-of-stock');
        const productStock = parseInt(cartItem.dataset.productStock || 0);

        // Update minus button
        qtyButtons[0].disabled = currentQty <= 1 || isOutOfStock;
        // Update onclick attribute for minus button
        qtyButtons[0].setAttribute('onclick', `updateQuantity('${productId}', ${currentQty - 1})`);

        // Update plus button - check quantity limit, stock limit, and out of stock
        const isAtMaxQuantity = currentQty >= 5;
        const isAtStockLimit = currentQty >= productStock;

        qtyButtons[1].disabled = isAtMaxQuantity || isAtStockLimit || isOutOfStock;

        // Update tooltip for plus button
        if (isAtMaxQuantity) {
            qtyButtons[1].setAttribute('title', 'Maximum 5 items allowed per product');
        } else if (isAtStockLimit) {
            qtyButtons[1].setAttribute('title', 'Not enough stock available');
        } else if (isOutOfStock) {
            qtyButtons[1].setAttribute('title', 'Product is out of stock');
        } else {
            qtyButtons[1].removeAttribute('title');
        }

        // Update onclick attribute for plus button
        if (qtyButtons[1].disabled) {
            qtyButtons[1].setAttribute('onclick', `showLimitMessage('${productId}')`);
        } else {
            qtyButtons[1].setAttribute('onclick', `updateQuantity('${productId}', ${currentQty + 1})`);
        }

        // Update quantity limit message
        updateQuantityLimitMessage(cartItem, currentQty);
    }

    // Function to update quantity limit message
    function updateQuantityLimitMessage(cartItem, currentQty) {
        const quantityControlsWrapper = cartItem.querySelector('.quantity-controls-wrapper');
        let existingMessage = cartItem.querySelector('.quantity-limit-message');
        const productStock = parseInt(cartItem.dataset.productStock || 0);
        const isOutOfStock = cartItem.classList.contains('out-of-stock');

        // Determine what message to show
        let shouldShowMessage = false;
        let messageContent = '';

        if (currentQty >= 5) {
            shouldShowMessage = true;
            messageContent = `
                <i class="bi bi-exclamation-triangle-fill"></i>
                <span>Maximum limit reached<br><small>(5 items per product)</small></span>
            `;
        } else if (isOutOfStock || productStock === 0) {
            shouldShowMessage = true;
            messageContent = `
                <i class="bi bi-x-circle-fill"></i>
                <span>Out of stock<br><small>(Cannot add more items)</small></span>
            `;
        } else if (currentQty >= productStock && productStock > 0) {
            shouldShowMessage = true;
            messageContent = `
                <i class="bi bi-exclamation-triangle-fill"></i>
                <span>Stock limit reached<br><small>(${productStock} items available)</small></span>
            `;
        }

        if (shouldShowMessage) {
            if (!existingMessage) {
                // Create new message with enhanced styling
                const messageDiv = document.createElement('div');
                messageDiv.className = 'quantity-limit-message';
                messageDiv.innerHTML = messageContent;

                // Append to the wrapper (will appear at bottom)
                quantityControlsWrapper.appendChild(messageDiv);

                // Add a subtle animation to draw attention
                setTimeout(() => {
                    messageDiv.style.animation = 'slideInFromBottom 0.4s ease-out, pulse 2s infinite 0.5s';
                }, 100);
            } else {
                // Update existing message content
                existingMessage.innerHTML = messageContent;
            }
        } else {
            // Remove message with fade out animation
            if (existingMessage) {
                existingMessage.style.animation = 'fadeOut 0.3s ease-out';
                setTimeout(() => {
                    existingMessage.remove();
                }, 300);
            }
        }
    }

    // Add fadeOut animation to CSS
    const additionalStyles = document.createElement('style');
    additionalStyles.textContent = `
        @keyframes fadeOut {
            from {
                opacity: 1;
                transform: translateY(0) scale(1);
            }
            to {
                opacity: 0;
                transform: translateY(-10px) scale(0.95);
            }
        }
    `;
    document.head.appendChild(additionalStyles);

    // Function to show limit message when disabled button is clicked
    function showLimitMessage(productId) {
        const cartItem = document.querySelector(`[data-product-id="${productId}"]`);
        if (!cartItem) return;

        const currentQty = parseInt(cartItem.querySelector('.qty-input').value);
        const isOutOfStock = cartItem.classList.contains('out-of-stock');
        const productStock = parseInt(cartItem.dataset.productStock || 0);
        const productName = cartItem.querySelector('.item-name').textContent;

        if (currentQty >= 5) {
            showSweetAlert('Maximum limit reached! You can only add up to 5 items per product.', 'error');
        } else if (isOutOfStock || productStock === 0) {
            showSweetAlert(`${productName} is currently out of stock.`, 'error');
        } else if (currentQty >= productStock) {
            showSweetAlert(`Only ${productStock} items of ${productName} available in stock. You already have the maximum available quantity in your cart.`, 'error');
        } else {
            // Fallback message
            showSweetAlert('Cannot increase quantity at this time.', 'error');
        }
    }

    // Update cart totals with subtotal based on regular prices
    function updateCartTotals() {
        let subtotal = 0; // Based on regular prices
        let totalItemCount = 0; // Total quantity of all items
        let totalDiscount = 0;
        let availableItemsCount = 0;
        let amountAfterDiscount = 0; // Amount customer actually pays

        document.querySelectorAll('.cart-item').forEach(item => {
            const isOutOfStock = item.classList.contains('out-of-stock');
            const quantity = parseInt(item.querySelector('.qty-input').value);
            const productId = item.dataset.productId;

            // Count all items (sum of quantities)
            totalItemCount += quantity;

            if (!isOutOfStock) {
                const regularPrice = parseFloat(item.dataset.regularPrice);
                const salePrice = parseFloat(item.dataset.salePrice);
                const itemTotal = parseFloat(item.querySelector('.item-total').textContent.replace('₹', ''));
                
                // Subtotal based on regular prices
                subtotal += regularPrice * quantity;
                
                // Amount customer actually pays (sale price total)
                amountAfterDiscount += itemTotal;
                availableItemsCount++;

                // Calculate proportional discount: (Regular Price - Sale Price) × Quantity
                const itemDiscount = (regularPrice - salePrice) * quantity;
                totalDiscount += Math.max(0, itemDiscount); // Ensure non-negative discount

                // Update individual item discount display if needed
                updateItemDiscountDisplay(item, regularPrice, salePrice, quantity);
            }

            // Update button states for each item
            updateButtonStates(productId);
        });

        const shipping = amountAfterDiscount > 500 ? 0 : 50; // Free shipping based on amount after discount
        const total = amountAfterDiscount + shipping; // Total = Amount after discount + Shipping

        // Update summary
        const summaryRows = document.querySelectorAll('.summary-row');
        if (summaryRows.length >= 4) {
            // Update subtotal with correct item count (total quantity)
            summaryRows[0].querySelector('.summary-value').textContent = `₹${subtotal.toFixed(2)}`;
            summaryRows[0].querySelector('.summary-label').textContent = `Subtotal (${totalItemCount} items)`;

            // Update discount with calculated amount (proportional to quantity)
            const discountValue = summaryRows[1].querySelector('.summary-value');
            if (totalDiscount > 0) {
                discountValue.innerHTML = `<span style="color: #059669;">-₹${totalDiscount.toFixed(2)}</span>`;
            } else {
                discountValue.innerHTML = '<span style="color: #059669;">₹0.00</span>';
            }

            // Update shipping
            const shippingValue = summaryRows[2].querySelector('.summary-value');
            if (shipping === 0) {
                shippingValue.innerHTML = '<span style="color: #059669;">FREE</span>';
            } else {
                shippingValue.textContent = `₹${shipping.toFixed(2)}`;
            }

            // Update total
            summaryRows[3].querySelector('.summary-value').textContent = `₹${total.toFixed(2)}`;
        }

        // Update checkout button with enhanced logic
        const checkoutBtn = document.getElementById('checkoutBtn');
        if (checkoutBtn) {
            const outOfStockItems = document.querySelectorAll('.cart-item.out-of-stock');

            if (availableItemsCount === 0) {
                checkoutBtn.disabled = true;
                checkoutBtn.style.opacity = '0.5';
                checkoutBtn.style.cursor = 'not-allowed';

                if (outOfStockItems.length > 0) {
                    checkoutBtn.innerHTML = '<i class="bi bi-x-circle"></i> Cannot Checkout - All Items Out of Stock';
                    checkoutBtn.onclick = showCheckoutUnavailableMessage;
                } else {
                    checkoutBtn.innerHTML = '<i class="bi bi-x-circle"></i> No Available Items';
                }
            } else {
                checkoutBtn.disabled = false;
                checkoutBtn.style.opacity = '1';
                checkoutBtn.style.cursor = 'pointer';
                checkoutBtn.innerHTML = `<i class="bi bi-credit-card"></i> Proceed to Checkout (${availableItemsCount} item${availableItemsCount > 1 ? 's' : ''})`;
                checkoutBtn.onclick = proceedToCheckout;
            }
        }

        // Update availability breakdown if it exists
        updateAvailabilityBreakdown(availableItemsCount, totalItemCount - availableItemsCount);
    }

    // Function to update individual item discount display
    function updateItemDiscountDisplay(item, regularPrice, salePrice, quantity) {
        const discountPerItem = regularPrice - salePrice;
        const totalItemDiscount = discountPerItem * quantity;
        
        // Find or create discount display element
        let discountDisplay = item.querySelector('.item-discount-info');
        
        if (totalItemDiscount > 0) {
            if (!discountDisplay) {
                // Create discount display element
                discountDisplay = document.createElement('div');
                discountDisplay.className = 'item-discount-info';
                discountDisplay.style.cssText = `
                    font-size: 0.75rem;
                    color: #059669;
                    font-weight: 600;
                    margin-top: 0.25rem;
                    display: flex;
                    align-items: center;
                    gap: 0.25rem;
                `;
                
                // Insert after item price
                const itemDetails = item.querySelector('.item-details');
                const itemPrice = itemDetails.querySelector('.item-price');
                itemPrice.parentNode.insertBefore(discountDisplay, itemPrice.nextSibling);
            }
            
            // Update discount text with proportional amount
            const discountPercentage = Math.round((discountPerItem / regularPrice) * 100);
            discountDisplay.innerHTML = `
                <i class="bi bi-tag-fill"></i>
                You save ₹${totalItemDiscount.toFixed(2)} (${discountPercentage}% off × ${quantity})
            `;
        } else if (discountDisplay) {
            // Remove discount display if no discount
            discountDisplay.remove();
        }
    }

    // Function to update availability breakdown in cart summary
    function updateAvailabilityBreakdown(availableCount, outOfStockCount) {
        const breakdown = document.querySelector('.availability-breakdown');
        if (!breakdown) return;

        // Calculate quantities
        let availableQuantity = 0;
        let outOfStockQuantity = 0;

        document.querySelectorAll('.cart-item').forEach(item => {
            const quantity = parseInt(item.querySelector('.qty-input').value);
            const isOutOfStock = item.classList.contains('out-of-stock');

            if (isOutOfStock) {
                outOfStockQuantity += quantity;
            } else {
                availableQuantity += quantity;
            }
        });

        // Update the breakdown content
        const availableItem = breakdown.querySelector('.breakdown-item.available .count');
        const unavailableItem = breakdown.querySelector('.breakdown-item.unavailable .count');

        if (availableItem) {
            availableItem.textContent = `${availableCount} (${availableQuantity} items)`;
        }

        if (unavailableItem) {
            unavailableItem.textContent = `${outOfStockCount} (${outOfStockQuantity} items)`;
        }

        // Hide breakdown if no out-of-stock items
        if (outOfStockCount === 0) {
            breakdown.style.transition = 'all 0.3s ease';
            breakdown.style.opacity = '0';
            breakdown.style.transform = 'translateY(-10px)';
            setTimeout(() => {
                breakdown.style.display = 'none';
            }, 300);
        } else {
            breakdown.style.display = 'block';
            breakdown.style.opacity = '1';
            breakdown.style.transform = 'translateY(0)';
        }
    }

    // Helper function to update cart counter
    function updateCartCounter(count) {
        const cartCounter = document.querySelector('#cartCount');
        if (cartCounter) {
            if (count > 0) {
                cartCounter.textContent = count;
                cartCounter.style.display = 'flex';
            } else {
                cartCounter.style.display = 'none';
            }
        }
    }

    // Enhanced function to validate and update stock information for all cart items
    async function validateCartStock() {
        const cartItems = document.querySelectorAll('.cart-item');
        let stockIssuesDetected = false;
        const stockIssues = [];

        for (const item of cartItems) {
            const productId = item.dataset.productId;
            const currentQty = parseInt(item.querySelector('.qty-input').value);
            const currentStock = parseInt(item.dataset.productStock || 0);
            const productName = item.querySelector('.item-name').textContent;

            // Check if item became out of stock
            if (currentStock === 0 && !item.classList.contains('out-of-stock')) {
                item.classList.add('out-of-stock');
                item.dataset.isOutOfStock = 'true';
                console.log(`Product ${productName} is now out of stock`);
                stockIssuesDetected = true;
            }

            // Check if item came back in stock
            if (currentStock > 0 && item.classList.contains('out-of-stock')) {
                item.classList.remove('out-of-stock');
                item.dataset.isOutOfStock = 'false';
                console.log(`Product ${productName} is back in stock`);
                stockIssuesDetected = true;
            }

            // Update button states based on current stock
            updateButtonStates(productId);

            // If current quantity exceeds stock, collect issue
            if (currentQty > currentStock && currentStock > 0) {
                stockIssues.push({
                    name: productName,
                    requested: currentQty,
                    available: currentStock
                });
                console.warn(`Warning: ${productName} quantity (${currentQty}) exceeds available stock (${currentStock})`);
            }
        }

        // Update cart totals and UI if stock status changed
        if (stockIssuesDetected) {
            updateCartTotals();

            // Update out-of-stock banner
            const outOfStockItems = document.querySelectorAll('.cart-item.out-of-stock');
            const banner = document.getElementById('outOfStockBanner');

            if (outOfStockItems.length > 0 && !banner) {
                // Need to add banner - reload page for simplicity
                console.log('Stock status changed - page reload recommended');
            } else if (outOfStockItems.length === 0 && banner) {
                // Remove banner
                banner.style.transition = 'all 0.3s ease';
                banner.style.opacity = '0';
                banner.style.transform = 'translateY(-20px)';
                setTimeout(() => {
                    banner.remove();
                }, 300);
            }
        }

        // Show stock issues if any
        if (stockIssues.length > 0) {
            let issueText = 'Stock level changes detected:\n\n';
            stockIssues.forEach(issue => {
                issueText += `• ${issue.name}: You have ${issue.requested}, but only ${issue.available} available\n`;
            });

            console.warn('Stock validation issues:', stockIssues);
        }
    }

    // Page load animation and stock validation
    document.addEventListener('DOMContentLoaded', function() {
        const cartItems = document.querySelectorAll('.cart-item');
        const cartSummary = document.querySelector('.cart-summary');

        // Animate cart items
        cartItems.forEach((item, index) => {
            item.style.opacity = '0';
            item.style.transform = 'translateY(20px)';
            item.style.transition = 'all 0.6s ease';

            setTimeout(() => {
                item.style.opacity = '1';
                item.style.transform = 'translateY(0)';
            }, index * 100);
        });

        // Animate cart summary
        if (cartSummary) {
            cartSummary.style.opacity = '0';
            cartSummary.style.transform = 'translateX(20px)';
            cartSummary.style.transition = 'all 0.6s ease';

            setTimeout(() => {
                cartSummary.style.opacity = '1';
                cartSummary.style.transform = 'translateX(0)';
            }, 300);
        }

        // Validate stock information after page load
        setTimeout(() => {
            validateCartStock();
        }, 500);

        // Set up periodic stock validation (every 30 seconds)
        setInterval(() => {
            validateCartStockFromServer();
        }, 30000);
    });

    // Function to validate cart stock from server
    async function validateCartStockFromServer() {
        try {
            const response = await fetch('/cart/validate');
            const data = await response.json();

            if (data.success) {
                let stockChangesDetected = false;
                const currentOutOfStock = document.querySelectorAll('.cart-item.out-of-stock').length;
                const serverOutOfStock = data.outOfStockCount;

                // Check if stock status changed
                if (currentOutOfStock !== serverOutOfStock) {
                    stockChangesDetected = true;
                    console.log('Stock status changes detected from server');

                    // Show notification about stock changes
                    if (serverOutOfStock > currentOutOfStock) {
                        showSweetAlert('Some items in your cart are now out of stock. Please review your cart.', 'warning');
                    } else if (serverOutOfStock < currentOutOfStock) {
                        showSweetAlert('Some previously out-of-stock items are now available!', 'success');
                    }

                    // Reload page to reflect changes
                    setTimeout(() => {
                        location.reload();
                    }, 2000);
                }

                // Update stock data for existing items
                data.availableItems.forEach(serverItem => {
                    const cartItem = document.querySelector(`[data-product-id="${serverItem.productId}"]`);
                    if (cartItem) {
                        const currentStock = parseInt(cartItem.dataset.productStock);
                        if (currentStock !== serverItem.stock) {
                            cartItem.dataset.productStock = serverItem.stock;
                            updateButtonStates(serverItem.productId);
                        }
                    }
                });
            }
        } catch (error) {
            console.error('Error validating cart stock from server:', error);
        }
    }

    // Helper function to show stock warnings with visual feedback
    function showStockWarning(cartItem, message) {
        // Add visual warning class
        cartItem.classList.add('stock-warning');

        // Remove warning class after animation
        setTimeout(() => {
            cartItem.classList.remove('stock-warning');
        }, 500);

        // Show warning message
        showSweetAlert(message, 'warning');
    }

    // Helper function to check if user can proceed with current cart
    function canProceedToCheckout() {
        const availableItems = document.querySelectorAll('.cart-item:not(.out-of-stock)');
        const outOfStockItems = document.querySelectorAll('.cart-item.out-of-stock');

        return {
            canProceed: availableItems.length > 0,
            availableCount: availableItems.length,
            outOfStockCount: outOfStockItems.length,
            totalItems: availableItems.length + outOfStockItems.length
        };
    }

    // Add CSS animations for enhanced user experience
    const style = document.createElement('style');
    style.textContent = `
        @keyframes spin {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
        }

        @keyframes slideInFromBottom {
            from {
                opacity: 0;
                transform: translateY(20px) scale(0.95);
            }
            to {
                opacity: 1;
                transform: translateY(0) scale(1);
            }
        }

        @keyframes pulse {
            0%, 100% {
                transform: scale(1);
            }
            50% {
                transform: scale(1.05);
            }
        }

        @keyframes shake {
            0%, 100% { transform: translateX(0); }
            25% { transform: translateX(-5px); }
            75% { transform: translateX(5px); }
        }

        .cart-item.out-of-stock {
            animation: slideInFromBottom 0.5s ease-out;
        }

        .out-of-stock-banner {
            animation: slideInFromBottom 0.6s ease-out;
        }

        .btn-remove-unavailable:active {
            animation: pulse 0.2s ease-out;
        }

        .quantity-limit-message {
            animation: slideInFromBottom 0.4s ease-out;
        }

        .cart-item.stock-warning {
            animation: shake 0.5s ease-out;
        }
    `;
    document.head.appendChild(style);
</script>

<%- include("../partials/user/footer") %>
