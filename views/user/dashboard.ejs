<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Dashboard - ArvanClaire</title>
<!-- Bootstrap Icons -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.3/font/bootstrap-icons.css">
<!-- Bootstrap CSS -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<!-- SweetAlert2 CSS -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
<link rel="stylesheet" href="../../styles/user/dashboard.css">

</head>
<body>
<!-- Include Header Content -->
<%- include("../partials/user/header") %>

    <section class="static-image-section">
        <div class="static-image-container">
            <video autoplay muted loop playsinline class="static-image">
                <source src="../../assets/watch video.mp4" type="video/mp4">
                Your browser does not support the video tag.
            </video>
            <div class="image-overlay">
                <div class="image-content">
                    <h2 class="image-title">Premium Watch Collection</h2>
                    <p class="image-subtitle">Discover timeless elegance and craftsmanship</p>
                </div>
            </div>
        </div>
    </section>

    <!-- New Arrivals Section -->
    <section class="container mb-5" id="new-arrivals">
        <h2 class="section-title">New Arrivals</h2>
        <p class="section-subtitle">Discover our latest collection of premium timepieces</p>

        <% if (products && products.length> 0) { %>
            <!-- Products Grid (shows 4 at a time) -->
            <div class="row" id="newArrivalsGrid">
                <!-- Products will be loaded here by JavaScript -->
            </div>

            <!-- Carousel Controls (only show if more than 4 products) -->
            <% if (products.length> 4) { %>
                <div class="carousel-controls">
                    <button class="carousel-btn prev" id="newArrivalsPrev" disabled></button>
                    <button class="carousel-btn next" id="newArrivalsNext"></button>

                    <div class="d-flex justify-content-center">
                        <div class="carousel-indicators d-flex gap-2" id="newArrivalsIndicators">
                            <!-- Dots will be generated by JavaScript -->
                        </div>
                    </div>
                </div>
                <% } %>

                    <div class="text-center mt-4">
                        <a href="/shop" class="view-more-btn">View All Products</a>
                    </div>

                    <!-- Hidden products data for JavaScript -->
                    <script type="application/json" id="newArrivalsData">
                <%- JSON.stringify(products) %>
            </script>

                    <!-- Hidden wishlist data for JavaScript -->
                    <script type="application/json" id="userWishlistData">
                <%- JSON.stringify(userWishlistProductIds || []) %>
            </script>

                    <% } else { %>
                        <div class="col-12 text-center py-5">
                            <div class="no-products-message">
                                <i class="fas fa-box-open fa-3x text-muted mb-3"></i>
                                <h4 class="text-muted">No Products Available</h4>
                                <p class="text-muted">There are currently no products to display. Please check back
                                    later.</p>
                            </div>
                        </div>
                        <% } %>
    </section>

    <!-- Black Theme Banner Section with Carousel -->
    <section class="banner-section">
        <div class="banner-carousel" id="bannerCarousel">
            <!-- Banner Navigation Buttons Inside -->
            <button class="banner-nav-btn banner-prev" id="bannerPrev"></button>
            <button class="banner-nav-btn banner-next" id="bannerNext"></button>

            <div class="banner-slide active">
    <div class="banner-card black-theme" style="position: relative; overflow: hidden;">
        <!-- Video Background -->
        <video autoplay muted loop playsinline class="banner-video" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; object-fit: cover; z-index: 0;">
            <source src="../../assets/banner-video-1.mp4" type="video/mp4" />
            Your browser does not support the video tag.
        </video>

        <!-- Content Overlay -->
        <div class="banner-content" style="position: relative; z-index: 1;">
            <h2 class="banner-title">Premium Watch Collection</h2>
            <p class="banner-subtitle">
                Experience luxury timepieces crafted with precision and elegance.
                Discover our exclusive collection of premium watches designed for the modern connoisseur.
            </p>
            <a href="/shop" class="banner-btn">Explore Collection</a>
        </div>
    </div>
</div>


            <div class="banner-slide">
                <div class="banner-card black-theme"
                    style="background-image: url('../../assets/men-category.jpg'); background-size: cover; background-position: center;">
                    <div class="banner-content">
                        <h2 class="banner-title">Premium Mens Collection</h2>
                        <p class="banner-subtitle">Experience luxury timepieces crafted with precision and elegance.
                            Discover our exclusive collection of premium watches designed for the modern connoisseur.
                        </p>
                        <a href="/shop" class="banner-btn">Explore Collection</a>
                    </div>
                </div>
            </div>
            <div class="banner-slide">
                <div class="banner-card black-theme"
                    style="background-image: url('../../assets/women-category.jpg'); background-size: cover; background-position: center;">
                    <div class="banner-content">
                        <h2 class="banner-title">Premium Womens Collection</h2>
                        <p class="banner-subtitle">Experience luxury timepieces crafted with precision and elegance.
                            Discover our exclusive collection of premium watches designed for the modern connoisseur.
                        </p>
                        <a href="/shop" class="banner-btn">Explore Collection</a>
                    </div>
                </div>
            </div>
        </div>

        <!-- Banner Indicators Below -->
        <div class="banner-indicators-container">
            <div class="d-flex justify-content-center mt-3">
                <div class="carousel-indicators d-flex gap-2" id="bannerIndicators">
                    <div class="carousel-dot active" data-slide="0"></div>
                    <div class="carousel-dot" data-slide="1"></div>
                    <div class="carousel-dot" data-slide="2"></div>
                </div>
            </div>
        </div>
    </section>

    <!-- Best Selling Products Section -->
    <section class="container mb-5" id="best-selling">
        <h2 class="section-title">Best Selling</h2>
        <p class="section-subtitle">Our most popular timepieces loved by customers worldwide</p>

        <% if (products && products.length> 0) { %>
            <!-- Products Grid (shows 4 at a time) -->
            <div class="row" id="bestSellingGrid">
                <!-- Products will be loaded here by JavaScript -->
            </div>

            <!-- Carousel Controls (only show if more than 4 products) -->
            <% if (products.length> 4) { %>
                <div class="carousel-controls">
                    <button class="carousel-btn prev" id="bestSellingPrev" disabled></button>
                    <button class="carousel-btn next" id="bestSellingNext"></button>

                    <div class="d-flex justify-content-center">
                        <div class="carousel-indicators d-flex gap-2" id="bestSellingIndicators">
                            <!-- Dots will be generated by JavaScript -->
                        </div>
                    </div>
                </div>
                <% } %>

                    <div class="text-center mt-4">
                        <a href="/shop" class="view-more-btn">View All Products</a>
                    </div>

                    <!-- Hidden products data for JavaScript -->
                    <script type="application/json" id="bestSellingData">
                <%- JSON.stringify(products) %>
            </script>

                    <!-- Hidden wishlist data for JavaScript (duplicate for best selling) -->
                    <script type="application/json" id="userWishlistDataBestSelling">
                <%- JSON.stringify(userWishlistProductIds || []) %>
            </script>

                    <% } else { %>
                        <div class="col-12 text-center py-5">
                            <div class="no-products-message">
                                <i class="fas fa-star fa-3x text-muted mb-3"></i>
                                <h4 class="text-muted">No Best Selling Products Yet</h4>
                                <p class="text-muted">Add some products to showcase your best sellers here.</p>
                            </div>
                        </div>
                        <% } %>
    </section>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.6/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-j1CDi7MgGQ12Z7Qab0qlWQ/Qqz24Gc6BM0thvEMVjHnfYGF0rmFCozFSxQBxwHKO"
        crossorigin="anonymous"></script>
    
    <!-- Toast Container -->
    <div id="toast-container" style="position: fixed; bottom: 20px; right: 20px; z-index: 9999;"></div>
    
    <style>
        .toast {
            background: white;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            margin-bottom: 10px;
            padding: 16px 20px;
            min-width: 300px;
            max-width: 400px;
            display: flex;
            align-items: center;
            gap: 12px;
            transform: translateX(100%);
            transition: all 0.3s ease;
            border-left: 4px solid;
        }
        
        .toast.show {
            transform: translateX(0);
        }
        
        .toast.success {
            border-left-color: #10b981;
        }
        
        .toast.error {
            border-left-color: #ef4444;
        }
        
        .toast.warning {
            border-left-color: #f59e0b;
        }
        
        .toast.info {
            border-left-color: #3b82f6;
        }
        
        .toast-icon {
            font-size: 20px;
            flex-shrink: 0;
        }
        
        .toast.success .toast-icon {
            color: #10b981;
        }
        
        .toast.error .toast-icon {
            color: #ef4444;
        }
        
        .toast.warning .toast-icon {
            color: #f59e0b;
        }
        
        .toast.info .toast-icon {
            color: #3b82f6;
        }
        
        .toast-content {
            flex: 1;
        }
        
        .toast-title {
            font-weight: 600;
            margin-bottom: 4px;
            color: #111827;
        }
        
        .toast-message {
            color: #6b7280;
            font-size: 14px;
        }
        
        .toast-close {
            background: none;
            border: none;
            color: #9ca3af;
            cursor: pointer;
            font-size: 18px;
            padding: 0;
            width: 20px;
            height: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .toast-close:hover {
            color: #6b7280;
        }
    </style>
    
    <script>
        // Toast notification system
        function showToast(title, message, type = 'info', duration = 4000) {
            const container = document.getElementById('toast-container');
            const toast = document.createElement('div');
            toast.className = `toast ${type}`;
            
            const icons = {
                success: 'bi bi-check-circle-fill',
                error: 'bi bi-exclamation-circle-fill',
                warning: 'bi bi-exclamation-triangle-fill',
                info: 'bi bi-info-circle-fill'
            };
            
            toast.innerHTML = `
                <div class="toast-icon">
                    <i class="${icons[type]}"></i>
                </div>
                <div class="toast-content">
                    <div class="toast-title">${title}</div>
                    <div class="toast-message">${message}</div>
                </div>
                <button class="toast-close" onclick="removeToast(this.parentElement)">
                    <i class="bi bi-x"></i>
                </button>
            `;
            
            container.appendChild(toast);
            
            // Trigger animation
            setTimeout(() => toast.classList.add('show'), 100);
            
            // Auto remove
            setTimeout(() => removeToast(toast), duration);
        }
        
        function removeToast(toast) {
            if (toast && toast.parentElement) {
                toast.classList.remove('show');
                setTimeout(() => {
                    if (toast.parentElement) {
                        toast.parentElement.removeChild(toast);
                    }
                }, 300);
            }
        }
        // Product Carousel Class for 4-products-at-a-time functionality
        class ProductCarousel {
            constructor(sectionId) {
                this.sectionId = sectionId;
                this.grid = document.getElementById(`${sectionId}Grid`);
                this.prevBtn = document.getElementById(`${sectionId}Prev`);
                this.nextBtn = document.getElementById(`${sectionId}Next`);
                this.indicators = document.getElementById(`${sectionId}Indicators`);
                this.dataScript = document.getElementById(`${sectionId}Data`);

                this.currentSlide = 0;
                this.itemsPerSlide = 4;
                this.products = [];

                this.init();
            }

            init() {
                if (!this.dataScript) return;

                try {
                    this.products = JSON.parse(this.dataScript.textContent);
                    this.totalSlides = Math.ceil(this.products.length / this.itemsPerSlide);

                    if (this.totalSlides <= 1) return;

                    this.createIndicators();
                    this.bindEvents();
                    this.loadSlide(0);
                } catch (error) {
                    console.error('Error initializing carousel:', error);
                }
            }

            createIndicators() {
                if (!this.indicators) return;

                this.indicators.innerHTML = '';
                for (let i = 0; i < this.totalSlides; i++) {
                    const dot = document.createElement('div');
                    dot.className = `carousel-dot ${i === 0 ? 'active' : ''}`;
                    dot.addEventListener('click', () => this.goToSlide(i));
                    this.indicators.appendChild(dot);
                }
            }

            bindEvents() {
                if (this.prevBtn) {
                    this.prevBtn.addEventListener('click', () => this.prev());
                }
                if (this.nextBtn) {
                    this.nextBtn.addEventListener('click', () => this.next());
                }
            }

            prev() {
                if (this.currentSlide > 0) {
                    this.goToSlide(this.currentSlide - 1);
                }
            }

            next() {
                if (this.currentSlide < this.totalSlides - 1) {
                    this.goToSlide(this.currentSlide + 1);
                }
            }

            goToSlide(slideIndex) {
                this.currentSlide = slideIndex;
                this.loadSlide(slideIndex);
                this.updateControls();
            }

            loadSlide(slideIndex) {
                const startIndex = slideIndex * this.itemsPerSlide;
                const endIndex = startIndex + this.itemsPerSlide;
                const slideProducts = this.products.slice(startIndex, endIndex);
                const isNext = slideIndex > this.currentSlide;

                // Define enter class at the correct scope
                const enterClass = isNext ? 'slide-in-right' : 'slide-in-left';

                // Step 1: Animate current products out with slower timing
                const currentProducts = this.grid.querySelectorAll('.col-6');
                const exitClass = isNext ? 'slide-out-left' : 'slide-out-right';

                currentProducts.forEach((product, index) => {
                    setTimeout(() => {
                        product.classList.add('product-exit');
                        product.classList.add('product-exit-active');
                    }, index * 150); // Increased from 80ms to 150ms
                });

                // Step 2: After exit animation, load new products (slower timing)
                setTimeout(() => {
                    this.grid.innerHTML = '';

                    slideProducts.forEach((product, index) => {
                        const productHTML = `
                            <div class="col-6 col-md-3 mb-4 product-enter">
                                <div class="card product-card" onclick="window.location.href='/product/${product._id}'">
                                    ${product.offerDetails && product.offerDetails.hasOffer ? `
                                        <div class="discount-badge">
                                            ${product.offerDetails.bestOfferPercentage}% OFF
                                        </div>
                                    ` : ''}
                                    <img src="/uploads/products/${product.mainImage}"
                                         class="card-img-top product-img loading"
                                         alt="${product.productName}"
                                         onerror="this.src='https://images.unsplash.com/photo-1523275335684-37898b6baf30?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&q=80'"
                                         onload="this.classList.remove('loading'); this.classList.add('loaded');">

                                    <!-- Hover Action Overlay -->
                                    <div class="product-hover-overlay">
                                        <div class="product-action-icons">
                                            <button class="product-action-btn cart-btn"
                                                    onclick="event.stopPropagation(); addToCartFromDashboard('${product._id}')"
                                                    title="Add to Cart"
                                                    ${(product.quantity === 0 || product.status === 'Out of Stock') ? 'disabled' : ''}>
                                                <i class="bi bi-cart-plus"></i>
                                            </button>
                                            <button class="product-action-btn wishlist-btn ${window.userWishlistProductIds && window.userWishlistProductIds.includes(product._id) ? 'in-wishlist' : ''}"
                                                    onclick="event.stopPropagation(); toggleWishlistFromDashboard('${product._id}', this)"
                                                    title="${window.userWishlistProductIds && window.userWishlistProductIds.includes(product._id) ? 'Remove from Wishlist' : 'Add to Wishlist'}">
                                                <i class="bi bi-heart${window.userWishlistProductIds && window.userWishlistProductIds.includes(product._id) ? '-fill' : ''}"></i>
                                            </button>
                                        </div>
                                    </div>

                                    <div class="card-body">
                                        <div class="product-brand">${product.brand}</div>
                                        <h5 class="product-title">${product.productName}</h5>
                                        
                                        <!-- Star Rating System -->
                                        ${product.totalReviews > 0 ? `
                                            <div class="product-rating">
                                                ${Array.from({ length: 5 }, (_, i) => 
                                                    `<i class="bi bi-star-fill star ${product.averageRating >= (i + 1) ? '' : 'empty'}"></i>`
                                                ).join('')}
                                                <span class="rating-value">(${product.averageRating.toFixed(1)})</span>
                                            </div>
                                        ` : `
                                            <div class="product-rating">
                                                ${Array.from({ length: 5 }, (_, i) => 
                                                    `<i class="bi bi-star-fill star empty"></i>`
                                                ).join('')}
                                            </div>
                                        `}
                                        
                                        <div class="product-price">
                                            ${product.offerDetails && product.offerDetails.hasOffer ? `
                                                <span class="original-price">₹${Math.round(product.offerDetails.originalPrice)}</span>
                                                ₹${Math.round(product.offerDetails.finalPrice)}
                                            ` : `
                                                ₹${Math.round(product.salePrice)}
                                            `}
                                        </div>
                                    </div>
                                </div>
                            </div>
                        `;
                        this.grid.insertAdjacentHTML('beforeend', productHTML);
                    });

                    // Step 3: Animate new products in with slower stagger
                    setTimeout(() => {
                        const newProducts = this.grid.querySelectorAll('.product-enter');
                        newProducts.forEach((product, index) => {
                            setTimeout(() => {
                                product.classList.remove('product-enter');
                                product.classList.add('product-enter-active');
                                product.classList.add(enterClass);
                            }, index * 200); // Increased from 100ms to 200ms stagger
                        });
                    }, 100); // Increased from 50ms to 100ms

                }, 700); // Increased from 400ms to 700ms to wait for slower exit animation
            }



            updateControls() {
                // Update buttons
                if (this.prevBtn) {
                    this.prevBtn.disabled = this.currentSlide === 0;
                }
                if (this.nextBtn) {
                    this.nextBtn.disabled = this.currentSlide >= this.totalSlides - 1;
                }

                // Update indicators
                if (this.indicators) {
                    const dots = this.indicators.querySelectorAll('.carousel-dot');
                    dots.forEach((dot, index) => {
                        dot.classList.toggle('active', index === this.currentSlide);
                    });
                }
            }
        }

        // Page Loading Animation
        class PageLoader {
            constructor() {
                this.init();
            }

            init() {
                // Add loading class to body
                document.body.classList.add('page-loading');

                // Create page loading overlay
                this.createLoadingOverlay();

                // Simulate loading time and then show content (slower)
                setTimeout(() => {
                    this.hidePageLoader();
                }, 1500); // Increased from 1000ms to 1500ms
            }

            createLoadingOverlay() {
                const overlay = document.createElement('div');
                overlay.id = 'page-loader';
                overlay.style.cssText = `
                    position: fixed;
                    top: 0;
                    left: 0;
                    width: 100%;
                    height: 100%;
                    background: #ffffff;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    z-index: 9999;
                    transition: all 0.3s ease;
                `;

                overlay.innerHTML = `
                    <div class="loader"></div>
                `;

                document.body.appendChild(overlay);

                // Add loading styles
                const style = document.createElement('style');
                style.textContent = `
                    .page-loading { overflow: hidden; }
                `;
                document.head.appendChild(style);
            }

            hidePageLoader() {
                const overlay = document.getElementById('page-loader');
                if (overlay) {
                    overlay.style.opacity = '0';
                    overlay.style.transform = 'translateY(-20px)';
                    setTimeout(() => {
                        overlay.remove();
                        document.body.classList.remove('page-loading');
                        this.animatePageContent();
                    }, 800);
                }
            }

            animatePageContent() {
                // Slower fade in for sections
                const sections = document.querySelectorAll('section');
                sections.forEach((section, index) => {
                    section.style.opacity = '0';
                    section.style.transform = 'translateY(20px)';
                    section.style.transition = 'all 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94)';

                    setTimeout(() => {
                        section.style.opacity = '1';
                        section.style.transform = 'translateY(0)';
                    }, index * 300); // Increased from 100ms to 300ms
                });
            }
        }

        // Banner Carousel Class
        class BannerCarousel {
            constructor() {
                this.carousel = document.getElementById('bannerCarousel');
                if (!this.carousel) return;

                this.slides = this.carousel.querySelectorAll('.banner-slide');
                this.prevBtn = document.getElementById('bannerPrev');
                this.nextBtn = document.getElementById('bannerNext');
                this.indicators = document.getElementById('bannerIndicators');

                this.currentSlide = 0;
                this.totalSlides = this.slides.length;
                this.autoPlayInterval = null;

                this.init();
            }

            init() {
                if (this.totalSlides <= 1) return;

                this.bindEvents();
                this.startAutoPlay();
            }

            bindEvents() {
                if (this.prevBtn) {
                    this.prevBtn.addEventListener('click', () => this.prev());
                }
                if (this.nextBtn) {
                    this.nextBtn.addEventListener('click', () => this.next());
                }

                // Dot indicators
                if (this.indicators) {
                    const dots = this.indicators.querySelectorAll('.carousel-dot');
                    dots.forEach((dot, index) => {
                        dot.addEventListener('click', () => this.goToSlide(index));
                    });
                }

                // Pause on hover
                this.carousel.addEventListener('mouseenter', () => this.stopAutoPlay());
                this.carousel.addEventListener('mouseleave', () => this.startAutoPlay());
            }

            prev() {
                this.currentSlide = this.currentSlide > 0 ? this.currentSlide - 1 : this.totalSlides - 1;
                this.updateSlide();
            }

            next() {
                this.currentSlide = this.currentSlide < this.totalSlides - 1 ? this.currentSlide + 1 : 0;
                this.updateSlide();
            }

            goToSlide(index) {
                this.currentSlide = index;
                this.updateSlide();
            }

            updateSlide() {
                // Update slides
                this.slides.forEach((slide, index) => {
                    slide.classList.toggle('active', index === this.currentSlide);
                });

                // Update indicators
                if (this.indicators) {
                    const dots = this.indicators.querySelectorAll('.carousel-dot');
                    dots.forEach((dot, index) => {
                        dot.classList.toggle('active', index === this.currentSlide);
                    });
                }
            }

            startAutoPlay() {
                this.stopAutoPlay();
                this.autoPlayInterval = setInterval(() => {
                    this.next();
                }, 5000);
            }

            stopAutoPlay() {
                if (this.autoPlayInterval) {
                    clearInterval(this.autoPlayInterval);
                    this.autoPlayInterval = null;
                }
            }
        }


        // Initialize wishlist data globally
        window.userWishlistProductIds = [];
        try {
            const wishlistDataScript = document.getElementById('userWishlistData');
            if (wishlistDataScript) {
                window.userWishlistProductIds = JSON.parse(wishlistDataScript.textContent);
            }
        } catch (error) {
            console.error('Error loading wishlist data:', error);
            window.userWishlistProductIds = [];
        }

        // Initialize everything when DOM is loaded
        document.addEventListener('DOMContentLoaded', function () {
            // Show redirect message if product was blocked/unavailable
            <% if (typeof redirectMessage !== 'undefined' && redirectMessage) { %>
                setTimeout(() => {
                    showToast('<%= redirectMessage.title %>', '<%= redirectMessage.text %>', '<%= redirectMessage.type %>', 6000);
                }, 1000);
                <% delete session.redirectMessage; %>
            <% } %>

                // Initialize page loader
                new PageLoader();

            // Initialize product carousels after a longer delay
            setTimeout(() => {
                new ProductCarousel('newArrivals');
                new ProductCarousel('bestSelling');
                new BannerCarousel(); // Initialize banner carousel
            }, 2000); // Increased from 1200ms to 2000ms

            // Add smooth scrolling for anchor links
            document.querySelectorAll('a[href^="#"]').forEach(anchor => {
                anchor.addEventListener('click', function (e) {
                    e.preventDefault();
                    const target = document.querySelector(this.getAttribute('href'));
                    if (target) {
                        target.scrollIntoView({
                            behavior: 'smooth',
                            block: 'start'
                        });
                    }
                });
            });

        });

        // Dashboard-specific cart and wishlist functions
        async function addToCartFromDashboard(productId) {
            try {
                const response = await fetch('/add-to-cart', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ productId, quantity: 1 })
                });

                const result = await response.json();

                if (result.success) {
                    // Update cart counter if it exists
                    updateCartCounter(result.cartCount);

                    // Update wishlist counter if product was removed from wishlist
                    if (result.wishlistCount !== undefined) {
                        updateWishlistCounter(result.wishlistCount);
                    }

                    showToast(result.message || 'Added to cart!');
                } else {
                    showToast('Error', result.message || 'Failed to add to cart.', 'error');
                }
            } catch (error) {
                console.error('Cart error:', error);
                showToast('Error', 'Please login to add items to cart.', 'error');
            }
        }

        async function toggleWishlistFromDashboard(productId, buttonElement) {
            try {
                const isInWishlist = buttonElement.classList.contains('in-wishlist');
                const endpoint = isInWishlist ? '/wishlist/remove' : '/wishlist/add';
                
                const response = await fetch(endpoint, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ productId })
                });

                const result = await response.json();

                if (result.success) {
                    // Update wishlist counter if it exists
                    updateWishlistCounter(result.wishlistCount);

                    // Toggle button appearance
                    const heartIcon = buttonElement.querySelector('i');
                    if (heartIcon) {
                        if (isInWishlist) {
                            // Remove from wishlist
                            heartIcon.classList.remove('bi-heart-fill');
                            heartIcon.classList.add('bi-heart');
                            buttonElement.classList.remove('in-wishlist');
                            buttonElement.title = 'Add to Wishlist';
                            showToast(result.message || 'Removed from wishlist!', 'success');
                        } else {
                            // Add to wishlist
                            heartIcon.classList.remove('bi-heart');
                            heartIcon.classList.add('bi-heart-fill');
                            buttonElement.classList.add('in-wishlist');
                            buttonElement.title = 'Remove from Wishlist';
                            showToast(result.message || 'Added to wishlist!', 'success');
                        }
                    }
                } else {
                    showToast('Error', result.message || 'Failed to update wishlist.', 'error');
                }
            } catch (error) {
                console.error('Wishlist error:', error);
                showToast('Error', 'Please login to manage wishlist.', 'error');
            }
        }

        // Helper functions to update counters (if they exist in header)
        function updateCartCounter(count) {
            const cartCounter = document.querySelector('#cartCount');
            if (cartCounter) {
                if (count > 0) {
                    cartCounter.textContent = count;
                    cartCounter.style.display = 'flex';
                } else {
                    cartCounter.style.display = 'none';
                }
            }
        }

        function updateWishlistCounter(count) {
            const wishlistCounter = document.querySelector('#wishlistCount');
            if (wishlistCounter) {
                if (count > 0) {
                    wishlistCounter.textContent = count;
                    wishlistCounter.style.display = 'flex';
                } else {
                    wishlistCounter.style.display = 'none';
                }
            }
        }
    </script>

    <%- include("../partials/user/footer") %>
    
    </body>
    </html>