<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Product Details - ArvanClaire</title>
    <!-- Bootstrap Icons -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.3/font/bootstrap-icons.css">
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- SweetAlert2 CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
    <link rel="stylesheet" href="../../../styles/user/header.css">
</head>
<body>
    <!-- Include Header Content -->
    <%- include('../partials/user/header') %>

    <link rel="stylesheet" href="../../styles/user/product-details.css">

<div class="product-details-wrapper">
    <div class="product-details-container">
        <!-- Modern Breadcrumb -->
        <div class="breadcrumb-container">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item">
                        <a href="/">
                            Home
                        </a>
                    </li>
                    <li class="breadcrumb-item">
                        <a href="/shop">
                            Shop
                        </a>
                    </li>
                    <% if (product.category) { %>
                        <li class="breadcrumb-item">
                            <a href="/shop?category=<%= product.category._id %>">
                                <%= product.category.name %>
                            </a>
                        </li>
                    <% } %>
                    <li class="breadcrumb-item active" aria-current="page">
                        <%= product.productName %>
                    </li>
                </ol>
            </nav>
        </div>

        <!-- Product Main Section -->
        <div class="product-main">
            <div class="product-grid">
                <!-- Product Images -->
                <div class="product-images">
                    <div class="main-image-container image-zoom-container" id="mainImageContainer">
                        <img src="/Uploads/products/<%= product.mainImage %>"
                             alt="<%= product.productName %>"
                             class="main-image"
                             id="mainImage"
                             onclick="openFullscreenZoom()"
                             onerror="this.src='https://images.unsplash.com/photo-1523275335684-37898b6baf30?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&q=80'">

                        <!-- Magnifier Glass -->
                        <div class="magnifier" id="magnifier">
                            <img src="/Uploads/products/<%= product.mainImage %>"
                                 alt="<%= product.productName %>"
                                 class="magnifier-image"
                                 id="magnifierImage">
                        </div>
                    </div>

                    <div class="image-thumbnails">
                        <div class="thumbnail active" onclick="changeMainImage('/Uploads/products/<%= product.mainImage %>', this)">
                            <img src="/Uploads/products/<%= product.mainImage %>" alt="Main Image">
                        </div>
                        <% if (product.subImages && product.subImages.length > 0) { %>
                            <% product.subImages.slice(0, 3).forEach(image => { %>
                                <div class="thumbnail" onclick="changeMainImage('/Uploads/products/<%= image %>', this)">
                                    <img src="/Uploads/products/<%= image %>" alt="Product Image">
                                </div>
                            <% }) %>
                        <% } %>
                    </div>
                </div>

                <!-- Product Info -->
                <div class="product-info">
                    <div class="product-brand"><%= product.brand %></div>
                    <h1 class="product-title"><%= product.productName %></h1>

                    <div class="product-rating-summary">
                        <div class="rating-stars">
                            <% for (let i = 1; i <= 5; i++) { %>
                                <i class="bi bi-star-fill star <%= averageRating >= i ? '' : 'empty' %>"></i>
                            <% } %>
                        </div>
                        <span class="rating-text">
                            <%= averageRating ? averageRating.toFixed(1) : '0.0' %>
                            (<%= totalReviews %> <%= totalReviews === 1 ? 'review' : 'reviews' %>)
                        </span>
                    </div>

                    <div class="product-price">
                        <% if (product.offerDetails && product.offerDetails.hasOffer) { %>
                            <span class="current-price">₹<%= Math.round(product.offerDetails.finalPrice) %></span>
                            <span class="original-price">₹<%= Math.round(product.offerDetails.originalPrice) %></span>
                            <span class="discount-badge">
                                <%= product.offerDetails.bestOfferPercentage %>% OFF
                            </span>
                        <% } else { %>
                            <span class="current-price">₹<%= Math.round(product.salePrice) %></span>
                        <% } %>
                    </div>

                    <!-- Stock Status -->
                    <div class="stock-status <%=
                        product.status === 'Out of Stock' || product.quantity === 0 ? 'out-of-stock' :
                        product.status === 'Discontinued' ? 'discontinued' :
                        product.quantity <= 5 ? 'low-stock' : 'in-stock'
                    %>">
                        <div class="stock-icon">
                            <% if (product.status === 'Out of Stock' || product.quantity === 0) { %>
                                ✕
                            <% } else if (product.status === 'Discontinued') { %>
                                ⚠
                            <% } else if (product.quantity <= 5) { %>
                                !
                            <% } else { %>
                                ✓
                            <% } %>
                        </div>
                        <div class="stock-details">
                            <div class="stock-label">
                                <% if (product.status === 'Out of Stock' || product.quantity === 0) { %>
                                    Out of Stock
                                <% } else if (product.status === 'Discontinued') { %>
                                    Discontinued
                                <% } else if (product.quantity <= 5) { %>
                                    Low Stock
                                <% } else { %>
                                    In Stock
                                <% } %>
                            </div>
                            <div class="stock-quantity">
                                <% if (product.status === 'Discontinued') { %>
                                    This product is no longer available
                                <% } else if (product.status === 'Out of Stock' || product.quantity === 0) { %>
                                    Currently unavailable
                                <% } else if (product.quantity <= 5) { %>
                                    Only <%= product.quantity %> left in stock
                                <% } else { %>
                                    <%= product.quantity %> units available
                                <% } %>
                            </div>
                        </div>
                    </div>

                    <div class="product-description">
                        <%= product.description %>
                    </div>

                    <div class="product-actions">
                        <button class="btn-action btn-primary"
                                onclick="addToCart('<%= product._id %>')"
                                <%= (product.status === 'Out of Stock' || product.quantity === 0 || product.status === 'Discontinued') ? 'disabled' : '' %>>
                            <i class="bi bi-cart-plus"></i>
                            <% if (product.status === 'Out of Stock' || product.quantity === 0) { %>
                                Out of Stock
                            <% } else if (product.status === 'Discontinued') { %>
                                Discontinued
                            <% } else { %>
                                Add to Cart
                            <% } %>
                        </button>
                        <button class="btn-action btn-secondary" onclick="addToWishlist('<%= product._id %>', this)">
                            <i class="bi bi-heart"></i>
                            Add to Wishlist
                        </button>
                    </div>

                    <% if (product.features && product.features.trim()) { %>
                        <div class="product-features">
                            <h3 class="features-title">Key Features</h3>
                            <div class="features-list">
                                <%
                                // Split features by newlines or commas and display each
                                const featuresList = product.features.split(/[,\n]/).filter(f => f.trim());
                                featuresList.forEach(feature => { %>
                                    <div class="feature-item">
                                        <div class="feature-icon">
                                            <i class="bi bi-check"></i>
                                        </div>
                                        <%= feature.trim() %>
                                    </div>
                                <% }) %>
                            </div>
                        </div>
                    <% } %>
                </div>
            </div>
        </div>

        <!-- Reviews Section -->
        <div class="reviews-section">
            <div class="reviews-header">
                <h2 class="reviews-title">Customer Reviews</h2>
                <% if (user) { %>
                    <button class="btn-write-review" onclick="toggleReviewForm()">
                        <i class="bi bi-pencil"></i>
                        Write a Review
                    </button>
                <% } %>
            </div>

            <!-- Review Stats -->
            <div class="review-stats">
                <div class="overall-rating">
                    <div class="overall-score"><%= averageRating ? averageRating.toFixed(1) : '0.0' %></div>
                    <div class="overall-stars">
                        <% for (let i = 1; i <= 5; i++) { %>
                            <i class="bi bi-star-fill star <%= averageRating >= i ? '' : 'empty' %>"></i>
                        <% } %>
                    </div>
                    <div class="total-reviews"><%= totalReviews %> <%= totalReviews === 1 ? 'review' : 'reviews' %></div>
                </div>

                <div class="rating-breakdown">
                    <% for (let i = 5; i >= 1; i--) { %>
                        <div class="rating-row">
                            <div class="rating-label"><%= i %> star</div>
                            <div class="rating-bar">
                                <div class="rating-fill" style="width: <%= ratingBreakdown[i] || 0 %>%"></div>
                            </div>
                            <div class="rating-count"><%= ratingCounts[i] || 0 %></div>
                        </div>
                    <% } %>
                </div>
            </div>

            <!-- Review Form -->
            <% if (user) { %>
                <div class="review-form" id="reviewForm">
                    <form id="submitReviewForm">
                        <div class="form-group">
                            <label class="form-label">Rating</label>
                            <div class="rating-input" id="ratingInput">
                                <% for (let i = 1; i <= 5; i++) { %>
                                    <i class="bi bi-star-fill rating-star" data-rating="<%= i %>" onclick="setRating(<%= i %>)"></i>
                                <% } %>
                            </div>
                        </div>

                        <div class="form-group">
                            <label class="form-label" for="reviewTitle">Review Title</label>
                            <input type="text"
                                   id="reviewTitle"
                                   name="title"
                                   class="form-input"
                                   placeholder="Summarize your experience..."
                                   maxlength="100"
                                   required>
                        </div>

                        <div class="form-group">
                            <label class="form-label" for="reviewComment">Your Review</label>
                            <textarea id="reviewComment"
                                      name="comment"
                                      class="form-input form-textarea"
                                      placeholder="Share your thoughts about this product..."
                                      maxlength="1000"
                                      required></textarea>
                        </div>

                        <div class="form-actions">
                            <button type="submit" class="btn-submit">
                                <i class="bi bi-send"></i>
                                Submit Review
                            </button>
                            <button type="button" class="btn-cancel" onclick="toggleReviewForm()">
                                Cancel
                            </button>
                        </div>
                    </form>
                </div>
            <% } %>

            <!-- Reviews List -->
            <div class="reviews-list">
                <% if (reviews && reviews.length > 0) { %>
                    <% reviews.forEach(review => { %>
                        <div class="review-item">
                            <div class="review-header">
                                <div class="reviewer-info">
                                    <div class="reviewer-avatar">
                                        <%= review.user.fullname.charAt(0).toUpperCase() %>
                                    </div>
                                    <div class="reviewer-details">
                                        <h4><%= review.user.fullname %></h4>
                                        <div class="review-date">
                                            <%= new Date(review.createdAt).toLocaleDateString('en-US', {
                                                year: 'numeric',
                                                month: 'long',
                                                day: 'numeric'
                                            }) %>
                                        </div>
                                    </div>
                                </div>
                                <div class="review-rating">
                                    <% for (let i = 1; i <= 5; i++) { %>
                                        <i class="bi bi-star-fill star <%= review.rating >= i ? '' : 'empty' %>"></i>
                                    <% } %>
                                </div>
                            </div>

                            <div class="review-content">
                                <h3 class="review-title"><%= review.title %></h3>
                                <p class="review-text"><%= review.comment %></p>
                            </div>

                            <div class="review-actions">
                                <div class="review-helpful" onclick="markHelpful('<%= review._id %>')">
                                    <i class="bi bi-hand-thumbs-up"></i>
                                    Helpful (<%= review.helpfulVotes %>)
                                </div>
                            </div>
                        </div>
                    <% }) %>
                <% } else { %>
                    <div class="review-item">
                        <div class="review-content">
                            <h3 class="review-title">No reviews yet</h3>
                            <p class="review-text">Be the first to review this product and help other customers make informed decisions.</p>
                        </div>
                    </div>
                <% } %>
            </div>
        </div>

        <!-- Related Products Section -->
        <% if (relatedProducts && relatedProducts.length > 0) { %>
            <div class="related-products-section">
                <div class="related-products-header">
                    <h2 class="related-products-title">Related Products</h2>
                    <p class="related-products-subtitle">You might also like these products from the same category</p>
                </div>

                <div class="related-products-grid">
                    <% relatedProducts.forEach(relatedProduct => { %>
                        <div class="related-product-card" onclick="window.location.href='/product/<%= relatedProduct._id %>'">
                            <div class="related-product-image-container">
                                <% if (relatedProduct.offerDetails && relatedProduct.offerDetails.hasOffer) { %>
                                    <div class="related-product-discount">
                                        <%= relatedProduct.offerDetails.bestOfferPercentage %>% OFF
                                    </div>
                                <% } %>
                                <img src="/Uploads/products/<%= relatedProduct.mainImage %>"
                                     alt="<%= relatedProduct.productName %>"
                                     class="related-product-image"
                                     onerror="this.src='https://images.unsplash.com/photo-1523275335684-37898b6baf30?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&q=80'">

                                <!-- Hover Action Overlay -->
                                <div class="related-product-hover-overlay">
                                    <!-- View Details Button Row -->
                                    <div class="related-product-action-row">
                                        <a href="/product/<%= relatedProduct._id %>" class="related-product-view-details-btn">
                                            <i class="bi bi-eye"></i>
                                            View Details
                                        </a>
                                    </div>

                                    <!-- Cart and Wishlist Icons Row -->
                                    <div class="related-product-action-icons">
                                        <button class="related-product-action-btn cart-btn"
                                                onclick="event.stopPropagation(); addToCartFromRelated('<%= relatedProduct._id %>')"
                                                title="Add to Cart"
                                                <%= (relatedProduct.quantity === 0 || relatedProduct.status === 'Out of Stock') ? 'disabled' : '' %>>
                                            <i class="bi bi-cart-plus"></i>
                                        </button>
                                        <button class="related-product-action-btn wishlist-btn"
                                                onclick="event.stopPropagation(); addToWishlistFromRelated('<%= relatedProduct._id %>', this)"
                                                title="Add to Wishlist">
                                            <i class="bi bi-heart"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>

                            <div class="related-product-info">
                                <div class="related-product-brand"><%= relatedProduct.brand %></div>
                                <h3 class="related-product-name"><%= relatedProduct.productName %></h3>

                                <div class="related-product-price">
                                    <% if (relatedProduct.offerDetails && relatedProduct.offerDetails.hasOffer) { %>
                                        <span class="related-current-price">₹<%= Math.round(relatedProduct.offerDetails.finalPrice) %></span>
                                        <span class="related-original-price">₹<%= Math.round(relatedProduct.offerDetails.originalPrice) %></span>
                                    <% } else { %>
                                        <span class="related-current-price">₹<%= Math.round(relatedProduct.salePrice) %></span>
                                    <% } %>
                                </div>

                                <% if (relatedProduct.totalReviews > 0) { %>
                                    <div class="related-product-rating">
                                        <div class="related-rating-stars">
                                            <% for (let i = 1; i <= 5; i++) { %>
                                                <i class="bi bi-star-fill star <%= relatedProduct.averageRating >= i ? '' : 'empty' %>"></i>
                                            <% } %>
                                        </div>
                                        <span class="related-rating-count">(<%= relatedProduct.averageRating.toFixed(1) %>) - <%= relatedProduct.totalReviews %> <%= relatedProduct.totalReviews === 1 ? 'review' : 'reviews' %></span>
                                    </div>
                                <% } %>
                            </div>
                        </div>
                    <% }) %>
                </div>
            </div>
        <% } %>
    </div>
</div>

<!-- Scroll to Top Button -->
<button class="scroll-to-top" id="scrollToTop" onclick="scrollToTop()">
    <i class="bi bi-arrow-up"></i>
</button>

<!-- Fullscreen Image Modal -->
<div class="fullscreen-modal" id="fullscreenModal">
    <div class="fullscreen-content">
        <div class="fullscreen-controls">
            <button class="zoom-btn" onclick="toggleFullscreenZoom()" id="fullscreenZoomBtn" title="Zoom In/Out">
                <i class="bi bi-zoom-in"></i>
            </button>
            <button class="zoom-btn zoom-close" onclick="closeFullscreenZoom()" title="Close">
                <i class="bi bi-x"></i>
            </button>
        </div>

        <button class="fullscreen-nav prev" onclick="previousImage()" id="prevBtn" title="Previous Image">
            <i class="bi bi-chevron-left"></i>
        </button>

        <button class="fullscreen-nav next" onclick="nextImage()" id="nextBtn" title="Next Image">
            <i class="bi bi-chevron-right"></i>
        </button>

        <img src="" alt="" class="fullscreen-image" id="fullscreenImage">

        <div class="fullscreen-info">
            <div class="image-counter" id="imageCounter">1 / 4</div>
            <div class="image-title"><%= product.productName %></div>
        </div>
    </div>
</div>


<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    let selectedRating = 0;

    // Change main image
    function changeMainImage(imageSrc, thumbnail) {
        const mainImage = document.getElementById('mainImage');
        mainImage.src = imageSrc;

        // Update active thumbnail
        document.querySelectorAll('.thumbnail').forEach(thumb => {
            thumb.classList.remove('active');
        });
        thumbnail.classList.add('active');

        // Update zoom result background
        const zoomResult = document.getElementById('zoomResult');
        zoomResult.style.backgroundImage = `url(${imageSrc})`;
    }

    // Toggle review form
    function toggleReviewForm() {
        const form = document.getElementById('reviewForm');
        form.classList.toggle('active');

        if (form.classList.contains('active')) {
            form.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }
    }

    // Set rating
    function setRating(rating) {
        selectedRating = rating;
        const stars = document.querySelectorAll('.rating-star');

        stars.forEach((star, index) => {
            if (index < rating) {
                star.classList.add('active');
            } else {
                star.classList.remove('active');
            }
        });
    }

    // Submit review
    document.getElementById('submitReviewForm')?.addEventListener('submit', async function(e) {
        e.preventDefault();

        if (selectedRating === 0) {
            Swal.fire({
                icon: 'error',
                title: 'Rating Required',
                text: 'Please select a rating before submitting your review.',
                confirmButtonColor: '#111827'
            });
            return;
        }

        const formData = {
            rating: selectedRating,
            title: document.getElementById('reviewTitle').value,
            comment: document.getElementById('reviewComment').value
        };

        try {
            const response = await fetch('/product/<%= product._id %>/review', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(formData)
            });

            const result = await response.json();

            if (result.success) {
                Swal.fire({
                    icon: 'success',
                    title: 'Review Submitted!',
                    text: 'Thank you for your review. It will help other customers.',
                    confirmButtonColor: '#111827'
                }).then(() => {
                    location.reload();
                });
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: result.message || 'Failed to submit review. Please try again.',
                    confirmButtonColor: '#111827'
                });
            }
        } catch (error) {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Something went wrong. Please try again.',
                confirmButtonColor: '#111827'
            });
        }
    });

    // Mark review as helpful
    async function markHelpful(reviewId) {
        try {
            const response = await fetch(`/product/<%= product._id %>/review/${reviewId}/helpful`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                }
            });

            const result = await response.json();

            if (result.success) {
                location.reload();
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: result.message || 'Failed to mark as helpful.',
                    confirmButtonColor: '#111827'
                });
            }
        } catch (error) {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Something went wrong. Please try again.',
                confirmButtonColor: '#111827'
            });
        }
    }

    // Add to cart
    async function addToCart(productId) {
        // Check if product is available
        const productStatus = '<%= product.status %>';
        const productQuantity = <%= product.quantity %>;

        if (productStatus === 'Out of Stock' || productQuantity === 0) {
            showSweetAlert('This product is currently out of stock.', 'error');
            return;
        }

        if (productStatus === 'Discontinued') {
            showSweetAlert('This product is no longer available.', 'error');
            return;
        }

        try {
            const response = await fetch('/add-to-cart', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ productId, quantity: 1 })
            });

            const result = await response.json();

            if (result.success) {
                showSweetAlert('Added to cart!', 'success');
            } else {
                showSweetAlert(result.message || 'Failed to add to cart.', 'error');
            }
        } catch (error) {
            showSweetAlert('Please login to add items to cart.', 'error');
        }
    }

    // Note: addToWishlist function is now available globally from header.ejs

    // Enhanced product availability checking
    let availabilityCheckInterval;
    let lastAvailabilityCheck = Date.now();

    // Check product availability with smart intervals
    function startAvailabilityMonitoring() {
        // Initial check
        checkProductAvailability();

        // Set up periodic checking (every 2 minutes for better performance)
        availabilityCheckInterval = setInterval(checkProductAvailability, 120000);

        // Also check when user becomes active after being away
        document.addEventListener('visibilitychange', function() {
            if (!document.hidden && Date.now() - lastAvailabilityCheck > 60000) {
                checkProductAvailability();
            }
        });
    }

    async function checkProductAvailability() {
        try {
            lastAvailabilityCheck = Date.now();
            const response = await fetch(`/product/<%= product._id %>/status`);
            const result = await response.json();

            if (!result.success || !result.available) {
                // Clear the interval to stop further checks
                if (availabilityCheckInterval) {
                    clearInterval(availabilityCheckInterval);
                }

                // Show user-friendly message based on the specific reason
                let title = 'Product No Longer Available';
                let text = 'This product is no longer available. You will be redirected to our product listing.';
                let icon = 'warning';

                if (result.code === 'PRODUCT_DELETED') {
                    title = 'Product Removed';
                    text = 'This product has been removed from our catalog. Discover other great products in our collection.';
                    icon = 'info';
                } else if (result.code === 'PRODUCT_BLOCKED') {
                    title = 'Product Unavailable';
                    text = 'This product is currently unavailable. Please browse our other available products.';
                    icon = 'warning';
                } else if (result.code === 'PRODUCT_UNLISTED') {
                    title = 'Product Unlisted';
                    text = 'This product is currently not available for purchase. Check out our other available products.';
                    icon = 'info';
                } else if (result.code === 'CATEGORY_DELETED') {
                    title = 'Category Removed';
                    text = 'This product category has been removed from our catalog. Browse other available products.';
                    icon = 'info';
                } else if (result.code === 'CATEGORY_UNLISTED') {
                    title = 'Category Unavailable';
                    text = 'This product category is currently unavailable. Please check out our other products.';
                    icon = 'warning';
                }

                Swal.fire({
                    icon: icon,
                    title: title,
                    text: text,
                    confirmButtonText: 'Browse Products',
                    confirmButtonColor: '#111827',
                    allowOutsideClick: false,
                    allowEscapeKey: false,
                    showClass: {
                        popup: 'animate__animated animate__fadeInDown'
                    },
                    hideClass: {
                        popup: 'animate__animated animate__fadeOutUp'
                    }
                }).then(() => {
                    window.location.href = '/shop';
                });
            } else {
                // Update stock information if available
                if (result.status && result.status.stock !== undefined) {
                    updateStockDisplay(result.status.stock, result.status.isInStock);
                }
            }
        } catch (error) {
            // Silently handle errors - don't disturb user experience
            console.log('Product availability check failed:', error);
        }
    }

    // Update stock display dynamically
    function updateStockDisplay(stock, isInStock) {
        const stockElements = document.querySelectorAll('.stock-quantity');
        const addToCartBtn = document.querySelector('.btn-primary');

        stockElements.forEach(element => {
            if (stock === 0) {
                element.textContent = 'Currently unavailable';
            } else if (stock <= 5) {
                element.textContent = `Only ${stock} left in stock`;
            } else {
                element.textContent = `${stock} units available`;
            }
        });

        // Update add to cart button
        if (addToCartBtn && !isInStock) {
            addToCartBtn.disabled = true;
            addToCartBtn.innerHTML = '<i class="bi bi-cart-x"></i> Out of Stock';
        }
    }

    // Show redirect message if product was blocked/unavailable
    <% if (typeof redirectMessage !== 'undefined' && redirectMessage) { %>
        document.addEventListener('DOMContentLoaded', function() {
            Swal.fire({
                icon: '<%= redirectMessage.type %>',
                title: '<%= redirectMessage.title %>',
                text: '<%= redirectMessage.text %>',
                confirmButtonText: 'Browse Products',
                confirmButtonColor: '#111827',
                background: '#f8fafc',
                color: '#111827',
                showConfirmButton: true,
                timer: 6000,
                timerProgressBar: true,
                showClass: {
                    popup: 'animate__animated animate__fadeInDown'
                },
                hideClass: {
                    popup: 'animate__animated animate__fadeOutUp'
                }
            });
        });
        <% delete session.redirectMessage; %>
    <% } %>

    // Start monitoring when page loads
    startAvailabilityMonitoring();

    // Clean up interval when page unloads
    window.addEventListener('beforeunload', function() {
        if (availabilityCheckInterval) {
            clearInterval(availabilityCheckInterval);
        }
    });

    // Scroll to Top Functionality
    function scrollToTop() {
        window.scrollTo({
            top: 0,
            behavior: 'smooth'
        });
    }

    // Show/Hide Scroll to Top Button
    window.addEventListener('scroll', function() {
        const scrollButton = document.getElementById('scrollToTop');
        if (window.pageYOffset > 300) {
            scrollButton.classList.add('visible');
        } else {
            scrollButton.classList.remove('visible');
        }
    });



    // Image Zoom Functionality
    let currentImageIndex = 0;
    let productImages = [];
    let isFullscreenZoomed = false;
    let isDragging = false;
    let dragStart = { x: 0, y: 0 };
    let imagePosition = { x: 0, y: 0 };

    // Initialize zoom functionality
    function initializeImageZoom() {
        collectProductImages();
        setupMagnifier();
        setupKeyboardNavigation();
    }

    // Collect all product images
    function collectProductImages() {
        productImages = [];

        // Add main image
        const mainImage = '<%= product.mainImage %>';
        productImages.push({
            src: `/Uploads/products/${mainImage}`,
            alt: '<%= product.productName %>'
        });

        // Add sub images
        <% if (product.subImages && product.subImages.length > 0) { %>
            <% product.subImages.forEach(image => { %>
                productImages.push({
                    src: '/Uploads/products/<%= image %>',
                    alt: '<%= product.productName %>'
                });
            <% }) %>
        <% } %>

        // Find current image index
        const currentSrc = document.getElementById('mainImage').src;
        currentImageIndex = productImages.findIndex(img => currentSrc.includes(img.src.split('/').pop()));
        if (currentImageIndex === -1) currentImageIndex = 0;
    }

    // Setup magnifier glass effect
    function setupMagnifier() {
        const container = document.getElementById('mainImageContainer');
        const mainImage = document.getElementById('mainImage');
        const magnifier = document.getElementById('magnifier');
        const magnifierImage = document.getElementById('magnifierImage');

        // Only enable magnifier on desktop
        if (window.innerWidth <= 768) return;

        container.addEventListener('mouseenter', () => {
            magnifier.style.display = 'block';
        });

        container.addEventListener('mouseleave', () => {
            magnifier.style.display = 'none';
        });

        container.addEventListener('mousemove', (e) => {
            const rect = container.getBoundingClientRect();
            const x = e.clientX - rect.left;
            const y = e.clientY - rect.top;

            // Position magnifier
            const magnifierSize = 150;
            const magnifierX = Math.min(Math.max(x - magnifierSize / 2, 0), rect.width - magnifierSize);
            const magnifierY = Math.min(Math.max(y - magnifierSize / 2, 0), rect.height - magnifierSize);

            magnifier.style.left = magnifierX + 'px';
            magnifier.style.top = magnifierY + 'px';

            // Calculate magnified image position
            const zoomFactor = 3;
            const imgRect = mainImage.getBoundingClientRect();
            const imgX = (x / rect.width) * mainImage.naturalWidth * zoomFactor;
            const imgY = (y / rect.height) * mainImage.naturalHeight * zoomFactor;

            magnifierImage.style.width = mainImage.naturalWidth * zoomFactor + 'px';
            magnifierImage.style.height = mainImage.naturalHeight * zoomFactor + 'px';
            magnifierImage.style.left = -imgX + magnifierSize / 2 + 'px';
            magnifierImage.style.top = -imgY + magnifierSize / 2 + 'px';
        });
    }

    // Open fullscreen zoom
    function openFullscreenZoom() {
        const modal = document.getElementById('fullscreenModal');
        const fullscreenImage = document.getElementById('fullscreenImage');

        modal.classList.add('active');
        fullscreenImage.src = productImages[currentImageIndex].src;
        fullscreenImage.alt = productImages[currentImageIndex].alt;

        updateImageCounter();
        updateNavigationButtons();

        // Prevent body scroll
        document.body.style.overflow = 'hidden';

        // Reset zoom state
        isFullscreenZoomed = false;
        imagePosition = { x: 0, y: 0 };
        updateZoomButton();
        resetImageTransform();
    }

    // Close fullscreen zoom
    function closeFullscreenZoom() {
        const modal = document.getElementById('fullscreenModal');
        const fullscreenImage = document.getElementById('fullscreenImage');

        modal.classList.remove('active');
        fullscreenImage.classList.remove('zoomed');

        // Restore body scroll
        document.body.style.overflow = '';

        // Reset zoom state
        isFullscreenZoomed = false;
        imagePosition = { x: 0, y: 0 };
        resetImageTransform();
    }

    // Toggle fullscreen zoom
    function toggleFullscreenZoom() {
        const fullscreenImage = document.getElementById('fullscreenImage');
        isFullscreenZoomed = !isFullscreenZoomed;

        if (isFullscreenZoomed) {
            fullscreenImage.classList.add('zoomed');
            setupImageDragging();
        } else {
            fullscreenImage.classList.remove('zoomed');
            imagePosition = { x: 0, y: 0 };
            resetImageTransform();
        }

        updateZoomButton();
    }

    // Update zoom button icon
    function updateZoomButton() {
        const zoomBtn = document.getElementById('fullscreenZoomBtn');
        const icon = zoomBtn.querySelector('i');

        if (isFullscreenZoomed) {
            icon.className = 'bi bi-zoom-out';
            zoomBtn.title = 'Zoom Out';
        } else {
            icon.className = 'bi bi-zoom-in';
            zoomBtn.title = 'Zoom In';
        }
    }

    // Setup image dragging for zoomed state
    function setupImageDragging() {
        const fullscreenImage = document.getElementById('fullscreenImage');

        fullscreenImage.addEventListener('mousedown', startDrag);
        fullscreenImage.addEventListener('touchstart', startDrag);
    }

    function startDrag(e) {
        if (!isFullscreenZoomed) return;

        isDragging = true;
        const clientX = e.type === 'touchstart' ? e.touches[0].clientX : e.clientX;
        const clientY = e.type === 'touchstart' ? e.touches[0].clientY : e.clientY;

        dragStart.x = clientX - imagePosition.x;
        dragStart.y = clientY - imagePosition.y;

        document.addEventListener('mousemove', drag);
        document.addEventListener('touchmove', drag);
        document.addEventListener('mouseup', stopDrag);
        document.addEventListener('touchend', stopDrag);

        e.preventDefault();
    }

    function drag(e) {
        if (!isDragging || !isFullscreenZoomed) return;

        const clientX = e.type === 'touchmove' ? e.touches[0].clientX : e.clientX;
        const clientY = e.type === 'touchmove' ? e.touches[0].clientY : e.clientY;

        imagePosition.x = clientX - dragStart.x;
        imagePosition.y = clientY - dragStart.y;

        // Limit dragging bounds
        const maxOffset = 200;
        imagePosition.x = Math.max(-maxOffset, Math.min(maxOffset, imagePosition.x));
        imagePosition.y = Math.max(-maxOffset, Math.min(maxOffset, imagePosition.y));

        updateImageTransform();
        e.preventDefault();
    }

    function stopDrag() {
        isDragging = false;
        document.removeEventListener('mousemove', drag);
        document.removeEventListener('touchmove', drag);
        document.removeEventListener('mouseup', stopDrag);
        document.removeEventListener('touchend', stopDrag);
    }

    function updateImageTransform() {
        const fullscreenImage = document.getElementById('fullscreenImage');
        const scale = isFullscreenZoomed ? 2 : 1;
        fullscreenImage.style.transform = `scale(${scale}) translate(${imagePosition.x}px, ${imagePosition.y}px)`;
    }

    function resetImageTransform() {
        const fullscreenImage = document.getElementById('fullscreenImage');
        fullscreenImage.style.transform = 'scale(1) translate(0px, 0px)';
    }

    // Navigation functions
    function previousImage() {
        if (currentImageIndex > 0) {
            currentImageIndex--;
            updateCurrentImage();
        }
    }

    function nextImage() {
        if (currentImageIndex < productImages.length - 1) {
            currentImageIndex++;
            updateCurrentImage();
        }
    }

    function updateCurrentImage() {
        const fullscreenImage = document.getElementById('fullscreenImage');
        const mainImage = document.getElementById('mainImage');
        const magnifierImage = document.getElementById('magnifierImage');

        // Update fullscreen image
        fullscreenImage.src = productImages[currentImageIndex].src;
        fullscreenImage.alt = productImages[currentImageIndex].alt;

        // Update main image
        mainImage.src = productImages[currentImageIndex].src;

        // Update magnifier image
        magnifierImage.src = productImages[currentImageIndex].src;

        // Reset zoom state
        isFullscreenZoomed = false;
        imagePosition = { x: 0, y: 0 };
        fullscreenImage.classList.remove('zoomed');
        updateZoomButton();
        resetImageTransform();

        // Update counter and navigation
        updateImageCounter();
        updateNavigationButtons();
        updateActiveThumbnail();
    }

    function updateImageCounter() {
        const counter = document.getElementById('imageCounter');
        counter.textContent = `${currentImageIndex + 1} / ${productImages.length}`;
    }

    function updateNavigationButtons() {
        const prevBtn = document.getElementById('prevBtn');
        const nextBtn = document.getElementById('nextBtn');

        prevBtn.style.display = currentImageIndex > 0 ? 'flex' : 'none';
        nextBtn.style.display = currentImageIndex < productImages.length - 1 ? 'flex' : 'none';
    }

    function updateActiveThumbnail() {
        const thumbnails = document.querySelectorAll('.thumbnail');
        thumbnails.forEach((thumb, index) => {
            thumb.classList.remove('active');
            if (index === currentImageIndex) {
                thumb.classList.add('active');
            }
        });
    }

    // Setup keyboard navigation
    function setupKeyboardNavigation() {
        document.addEventListener('keydown', (e) => {
            const modal = document.getElementById('fullscreenModal');
            if (!modal.classList.contains('active')) return;

            switch(e.key) {
                case 'Escape':
                    closeFullscreenZoom();
                    break;
                case 'ArrowLeft':
                    previousImage();
                    break;
                case 'ArrowRight':
                    nextImage();
                    break;
                case ' ':
                case 'Enter':
                    e.preventDefault();
                    toggleFullscreenZoom();
                    break;
            }
        });
    }

    // Enhanced change main image function
    function changeMainImage(imageSrc, thumbnail) {
        const mainImage = document.getElementById('mainImage');
        const magnifierImage = document.getElementById('magnifierImage');

        mainImage.src = imageSrc;
        magnifierImage.src = imageSrc;

        // Update active thumbnail
        document.querySelectorAll('.thumbnail').forEach(thumb => {
            thumb.classList.remove('active');
        });
        thumbnail.classList.add('active');

        // Update current image index
        currentImageIndex = productImages.findIndex(img => imageSrc.includes(img.src.split('/').pop()));
        if (currentImageIndex === -1) currentImageIndex = 0;
    }

    // Close modal when clicking outside
    document.addEventListener('click', function(e) {
        const modal = document.getElementById('fullscreenModal');
        const content = modal.querySelector('.fullscreen-content');

        if (e.target === modal && !content.contains(e.target)) {
            closeFullscreenZoom();
        }
    });

    // Related products cart and wishlist functions
    async function addToCartFromRelated(productId) {
        try {
            const response = await fetch('/add-to-cart', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ productId, quantity: 1 })
            });

            const result = await response.json();

            if (result.success) {
                // Update cart counter if it exists
                updateCartCounter(result.cartCount);

                // Update wishlist counter if product was removed from wishlist
                if (result.wishlistCount !== undefined) {
                    updateWishlistCounter(result.wishlistCount);
                }

                showSweetAlert('Added to cart!', 'success');
            } else {
                showSweetAlert(result.message || 'Failed to add to cart.', 'error');
            }
        } catch (error) {
            console.error('Cart error:', error);
            showSweetAlert('Please login to add items to cart.', 'error');
        }
    }

    async function addToWishlistFromRelated(productId, buttonElement) {
        try {
            const response = await fetch('/wishlist/add', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ productId })
            });

            const result = await response.json();

            if (result.success) {
                // Update wishlist counter if it exists
                updateWishlistCounter(result.wishlistCount);

                // Change button appearance to indicate it's in wishlist
                const heartIcon = buttonElement.querySelector('i');
                if (heartIcon) {
                    heartIcon.classList.remove('bi-heart');
                    heartIcon.classList.add('bi-heart-fill');
                    buttonElement.classList.add('in-wishlist');
                    buttonElement.disabled = true;
                    buttonElement.title = 'Already in wishlist';
                }

                showSweetAlert('Added to wishlist!', 'success');
            } else {
                showSweetAlert(result.message || 'Failed to add to wishlist.', 'error');
            }
        } catch (error) {
            console.error('Wishlist error:', error);
            showSweetAlert('Please login to add items to wishlist.', 'error');
        }
    }

    // Helper functions to update counters (if they exist in header)
    function updateCartCounter(count) {
        const cartCounter = document.querySelector('#cartCount');
        if (cartCounter) {
            if (count > 0) {
                cartCounter.textContent = count;
                cartCounter.style.display = 'flex';
            } else {
                cartCounter.style.display = 'none';
            }
        }
    }

    function updateWishlistCounter(count) {
        const wishlistCounter = document.querySelector('#wishlistCount');
        if (wishlistCounter) {
            if (count > 0) {
                wishlistCounter.textContent = count;
                wishlistCounter.style.display = 'flex';
            } else {
                wishlistCounter.style.display = 'none';
            }
        }
    }

    // Initialize zoom functionality when page loads
    document.addEventListener('DOMContentLoaded', function() {
        initializeImageZoom();

        // Re-setup magnifier on window resize
        window.addEventListener('resize', function() {
            if (window.innerWidth > 768) {
                setupMagnifier();
            }
        });

        // Add entrance animations for related products
        const relatedCards = document.querySelectorAll('.related-product-card');
        relatedCards.forEach((card, index) => {
            card.style.opacity = '0';
            card.style.transform = 'translateY(20px)';
            card.style.transition = 'all 0.6s ease';

            setTimeout(() => {
                card.style.opacity = '1';
                card.style.transform = 'translateY(0)';
            }, index * 100);
        });
    });
</script>

<!-- Include Footer Content -->
    <%- include('../partials/user/footer') %>
</body>
</html>