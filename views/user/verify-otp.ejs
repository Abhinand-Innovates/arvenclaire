<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Signup OTP Verification</title>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&display=swap" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Inter', sans-serif;
        }
        body {
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            background: #ffffff;
            color: #1a1a1a;
        }
        .otp-card {
            background: #ffffff;
            padding: 2.5rem;
            border-radius: 12px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
            width: 100%;
            max-width: 500px;
            text-align: center;
        }
        .otp-card h2 {
            font-size: 24px;
            font-weight: 600;
            color: #1a1a1a;
            margin-bottom: 10px;
        }
        .otp-card p {
            font-size: 14px;
            color: #4a4a4a;
            margin-bottom: 20px;
        }
        .otp-container {
            display: flex;
            gap: 12px;
            justify-content: center;
            margin: 20px 0;
        }
        .otp-input {
            width: 50px;
            height: 50px;
            text-align: center;
            font-size: 18px;
            border: 2px solid #e0e0e0;
            border-radius: 8px;
            background: #ffffff;
            color: #1a1a1a;
            transition: all 0.3s ease;
        }
        .otp-input:focus {
            outline: none;
            border-color: #1a1a1a;
            box-shadow: 0 0 5px rgba(26, 26, 26, 0.2);
        }
        .otp-input.error {
            border-color: #ff4d4d;
            background: #ffe6e6;
            animation: shake 0.3s ease;
        }
        .otp-input.success {
            border-color: #4caf50;
            background: #e8f5e9;
        }
        #error-message {
            color: #ff4d4d;
            font-size: 14px;
            min-height: 20px;
            margin: 10px 0;
            transition: opacity 0.3s ease;
        }
        #timer {
            font-size: 16px;
            font-weight: 500;
            color: #1a1a1a;
            margin: 20px 0;
            transition: color 0.4s ease;
        }
        #timer.expired {
            color: #ff4d4d;
            animation: fadeIn 0.5s ease;
        }
        .btn {
            display: flex;
            gap: 10px;
            justify-content: center;
            margin-top: 20px;
        }
        .btn button {
            padding: 12px 24px;
            font-size: 16px;
            font-weight: 500;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            transition: background-color 0.2s ease, transform 0.1s ease;
        }
        #verify-btn {
            background: #1a1a1a;
            color: #ffffff;
        }
        #verify-btn:hover:not(:disabled) {
            background: #333333;
            transform: translateY(-2px);
        }
        #verify-btn:disabled {
            background: #e0e0e0;
            color: #4a4a4a;
            cursor: not-allowed;
        }
        #verify-btn.loading {
            background: #e0e0e0;
            position: relative;
            color: transparent;
        }
        #verify-btn.loading::after {
            content: '';
            border: 3px solid #ffffff;
            border-top: 3px solid #1a1a1a;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            animation: spin 1s linear infinite;
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
        }
        #resend-btn {
            background: #4a4a4a;
            color: #ffffff;
        }
        #resend-btn:hover:not(:disabled) {
            background: #666666;
            transform: translateY(-2px);
        }
        #resend-btn:disabled {
            background: #e0e0e0;
            color: #4a4a4a;
            cursor: not-allowed;
        }
        #resend-btn.loading {
            background: #e0e0e0;
            position: relative;
            color: transparent;
        }
        #resend-btn.loading::after {
            content: '';
            border: 3px solid #ffffff;
            border-top: 3px solid #1a1a1a;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            animation: spin 1s linear infinite;
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
        }
        @keyframes spin {
            0% { transform: translate(-50%, -50%) rotate(0deg); }
            100% { transform: translate(-50%, -50%) rotate(360deg); }
        }
        @keyframes shake {
            0%, 100% { transform: translateX(0); }
            25% { transform: translateX(-5px); }
            75% { transform: translateX(5px); }
        }
        @keyframes fadeIn {
            0% { opacity: 0; }
            100% { opacity: 1; }
        }
        @media (max-width: 480px) {
            .otp-card {
                padding: 1.5rem;
                margin: 0 1rem;
            }
            .otp-input {
                width: 40px;
                height: 40px;
                font-size: 16px;
            }
            .btn button {
                padding: 10px 20px;
                font-size: 14px;
            }
        }
    </style>
</head>
<body>
    <div class="otp-card">
        <h2>Verify Your OTP</h2>
        <p>Enter the 6-digit code sent to your email</p>
        <div class="otp-container">
            <input type="text" class="otp-input" maxlength="1" inputmode="numeric" pattern="[0-9]*" />
            <input type="text" class="otp-input" maxlength="1" inputmode="numeric" pattern="[0-9]*" />
            <input type="text" class="otp-input" maxlength="1" inputmode="numeric" pattern="[0-9]*" />
            <input type="text" class="otp-input" maxlength="1" inputmode="numeric" pattern="[0-9]*" />
            <input type="text" class="otp-input" maxlength="1" inputmode="numeric" pattern="[0-9]*" />
            <input type="text" class="otp-input" maxlength="1" inputmode="numeric" pattern="[0-9]*" />
        </div>
        <div id="error-message"></div>
        <div id="timer">Timer: 00:30</div>
        <div class="btn">
            <button id="verify-btn" disabled>Verify OTP</button>
            <button id="resend-btn" disabled>Resend OTP</button>
        </div>
    </div>

    <script>
        // Helper function to show toast messages
        function showToast(message, type) {
            // Create toast container if it doesn't exist
            let toastContainer = document.getElementById('toast-container');
            if (!toastContainer) {
                toastContainer = document.createElement('div');
                toastContainer.id = 'toast-container';
                toastContainer.style.cssText = `
                    position: fixed;
                    bottom: 20px;
                    right: 20px;
                    z-index: 9999;
                    display: flex;
                    flex-direction: column;
                    gap: 10px;
                `;
                document.body.appendChild(toastContainer);
            }

            // Create toast element
            const toast = document.createElement('div');
            toast.style.cssText = `
                background: ${type === 'success' ? '#4caf50' : '#f44336'};
                color: white;
                padding: 12px 20px;
                border-radius: 8px;
                box-shadow: 0 4px 12px rgba(0,0,0,0.15);
                font-size: 14px;
                font-weight: 500;
                max-width: 350px;
                word-wrap: break-word;
                opacity: 0;
                transform: translateX(100%);
                transition: all 0.3s ease;
                display: flex;
                align-items: center;
                gap: 8px;
            `;

            // Add icon
            const icon = document.createElement('i');
            icon.className = type === 'success' ? 'fas fa-check-circle' : 'fas fa-exclamation-circle';
            toast.appendChild(icon);

            // Add message
            const messageSpan = document.createElement('span');
            messageSpan.textContent = message;
            toast.appendChild(messageSpan);

            toastContainer.appendChild(toast);

            // Animate in
            setTimeout(() => {
                toast.style.opacity = '1';
                toast.style.transform = 'translateX(0)';
            }, 10);

            // Auto remove
            setTimeout(() => {
                toast.style.opacity = '0';
                toast.style.transform = 'translateX(100%)';
                setTimeout(() => {
                    if (toast.parentNode) {
                        toast.parentNode.removeChild(toast);
                    }
                }, 300);
            }, type === 'success' ? 3000 : 5000);
        }

        // OTP Validation Class
        class OTPValidator {
            constructor() {
                this.otpInputs = document.querySelectorAll('.otp-input');
                this.errorMessage = document.getElementById('error-message');
                this.verifyButton = document.getElementById('verify-btn');
                this.setupEventListeners();
            }

            setupEventListeners() {
                this.otpInputs.forEach((input, index) => {
                    input.addEventListener('input', (e) => this.handleInput(e, index));
                    input.addEventListener('keydown', (e) => this.handleKeyDown(e, index));
                    input.addEventListener('paste', (e) => this.handlePaste(e));
                    input.addEventListener('blur', () => this.validateInput(input));
                });
            }

            handleInput(e, index) {
                const value = e.target.value;
                
                if (!/^\d*$/.test(value)) {
                    e.target.value = '';
                    this.showError('Only numbers are allowed');
                    this.markInputAsError(e.target);
                    return;
                }

                this.clearError();
                this.markInputAsSuccess(e.target);

                if (value.length === 1 && index < this.otpInputs.length - 1) {
                    this.otpInputs[index + 1].focus();
                }

                this.toggleVerifyButton();
            }

            handleKeyDown(e, index) {
                if (e.key === 'Backspace') {
                    if (e.target.value === '' && index > 0) {
                        this.otpInputs[index - 1].focus();
                    }
                }
                
                if (e.key === 'ArrowLeft' && index > 0) {
                    this.otpInputs[index - 1].focus();
                    e.preventDefault();
                }
                if (e.key === 'ArrowRight' && index < this.otpInputs.length - 1) {
                    this.otpInputs[index + 1].focus();
                    e.preventDefault();
                }

                if (e.key === 'Enter') {
                    this.verifyOTP();
                }
            }

            handlePaste(e) {
                e.preventDefault();
                const pastedData = e.clipboardData.getData('text').trim();
                
                if (!/^\d{6}$/.test(pastedData)) {
                    this.showError('Please paste a valid 6-digit OTP');
                    return;
                }

                for (let i = 0; i < 6; i++) {
                    this.otpInputs[i].value = pastedData[i];
                    this.markInputAsSuccess(this.otpInputs[i]);
                }

                this.clearError();
                this.toggleVerifyButton();
                this.otpInputs[5].focus();
            }

            validateInput(input) {
                if (input.value && !/^\d$/.test(input.value)) {
                    this.markInputAsError(input);
                    this.showError('Invalid character entered');
                } else if (input.value) {
                    this.markInputAsSuccess(input);
                } else {
                    this.clearInputState(input);
                }
            }

            getOTPValue() {
                return Array.from(this.otpInputs).map(input => input.value.trim()).join('');
            }

            validateOTP() {
                const otpValue = this.getOTPValue();
                
                if (otpValue.length !== 6) {
                    this.showError('Please enter all 6 digits');
                    this.highlightEmptyInputs();
                    return false;
                }

                if (!/^\d{6}$/.test(otpValue)) {
                    this.showError('OTP must contain only numbers');
                    return false;
                }

                if (otpValue === '000000') {
                    this.showError('Invalid OTP. All zeros are not allowed.');
                    this.highlightAllInputsAsError();
                    return false;
                }

                const isSequential = /^(012345|123456|234567|345678|456789|567890|654321|543210|432109|321098|210987|109876)$/.test(otpValue);
                if (isSequential) {
                    this.showError('Suspicious OTP. Sequential numbers are not allowed.');
                    this.highlightAllInputsAsError();
                    return false;
                }

                this.clearError();
                return true;
            }

            highlightEmptyInputs() {
                this.otpInputs.forEach(input => {
                    if (!input.value.trim()) {
                        this.markInputAsError(input);
                    }
                });
            }

            showError(message) {
                this.errorMessage.textContent = message;
                this.errorMessage.style.color = '#ff4d4d';
            }

            clearError() {
                this.errorMessage.textContent = '';
            }

            markInputAsError(input) {
                input.classList.remove('success');
                input.classList.add('error');
            }

            markInputAsSuccess(input) {
                input.classList.remove('error');
                input.classList.add('success');
            }

            clearInputState(input) {
                input.classList.remove('error', 'success');
            }

            clearAllInputs() {
                this.otpInputs.forEach(input => {
                    input.value = '';
                    this.clearInputState(input);
                });
                this.clearError();
                this.toggleVerifyButton();
                this.otpInputs[0].focus();
            }

            toggleVerifyButton() {
                const otpValue = this.getOTPValue();
                this.verifyButton.disabled = otpValue.length !== 6 || this.verifyButton.classList.contains('expired');
            }

            verifyOTP() {
                if (!this.validateOTP()) {
                    return;
                }

                const otpValue = this.getOTPValue();
                
                this.verifyButton.classList.add('loading');
                this.verifyButton.disabled = true;
                this.verifyButton.textContent = '';

                fetch("/verify-otp", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify({ otp: otpValue })
                })
                .then(response => response.json().catch(() => {
                    throw new Error('Invalid response format');
                }))
                .then(data => {
                    if (typeof data !== 'object' || data === null) {
                        throw new Error('Invalid response format');
                    }

                    if (data.success) {
                        showToast("OTP verified successfully", "success");
                        setTimeout(() => {
                            window.location.href = data.redirectUrl || '/dashboard';
                        }, 1500);
                    } else {
                        this.showError(data.message || 'Invalid OTP. Please try again.');
                        this.highlightAllInputsAsError();
                    }
                })
                .catch(error => {
                    console.error("Error:", error);
                    let errorMessage = "Unable to verify OTP. Please check your connection and try again.";
                    if (error.message.includes('Invalid response format')) {
                        errorMessage = "Server response was invalid. Please try again.";
                    } else if (error.message.includes('Failed to fetch')) {
                        errorMessage = "Network error. Please check your internet connection.";
                    }
                    this.showError(errorMessage);
                    this.highlightAllInputsAsError();
                })
                .finally(() => {
                    this.verifyButton.classList.remove('loading');
                    this.verifyButton.disabled = this.verifyButton.classList.contains('expired');
                    this.verifyButton.textContent = 'Verify OTP';
                });
            }

            highlightAllInputsAsError() {
                this.otpInputs.forEach(input => {
                    this.markInputAsError(input);
                });
            }
        }

        // Timer Management Class
        class TimerManager {
            constructor(duration = 30) {
                this.duration = duration;
                this.timerElement = document.getElementById('timer');
                this.resendButton = document.getElementById('resend-btn');
                this.verifyButton = document.getElementById('verify-btn');
                this.timeLeft = 0;
                this.timerInterval = null;
                this.initialize();
            }

            initialize() {
                const storedEndTime = sessionStorage.getItem('signupOtpTimerEndTime');
                const currentTime = Date.now();
                
                if (storedEndTime) {
                    const endTime = parseInt(storedEndTime);
                    const remainingSeconds = Math.max(0, Math.ceil((endTime - currentTime) / 1000));
                    
                    if (!isNaN(endTime) && remainingSeconds > 0) {
                        this.timeLeft = remainingSeconds;
                    } else {
                        this.timeLeft = 0;
                        this.expire();
                    }
                } else {
                    this.timeLeft = this.duration;
                    this.storeEndTime();
                }
                
                this.updateDisplay();
                if (this.timeLeft > 0) {
                    this.start();
                }
            }

            start() {
                this.timerInterval = setInterval(() => {
                    this.timeLeft--;
                    this.updateDisplay();
                    
                    if (this.timeLeft <= 0) {
                        this.expire();
                    }
                }, 1000);
            }

            updateDisplay() {
                const minutes = Math.floor(this.timeLeft / 60);
                const seconds = this.timeLeft % 60;
                this.timerElement.textContent = `Timer: ${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
                
                if (this.timeLeft <= 10) {
                    this.timerElement.style.color = '#ff4d4d';
                } else {
                    this.timerElement.style.color = '#1a1a1a';
                }
            }

            expire() {
                clearInterval(this.timerInterval);
                this.timerElement.textContent = 'Time expired';
                this.timerElement.classList.add('expired');
                this.resendButton.disabled = false;
                this.verifyButton.disabled = true;
                this.verifyButton.classList.add('expired');
                sessionStorage.removeItem('signupOtpTimerEndTime');
                
                Swal.fire({
                    icon: 'warning',
                    title: 'OTP Expired',
                    text: 'Please request a new OTP',
                    timer: 3000,
                    showConfirmButton: false
                });
            }

            reset() {
                clearInterval(this.timerInterval);
                this.timeLeft = this.duration;
                this.timerElement.classList.remove('expired');
                this.resendButton.disabled = true;
                this.verifyButton.disabled = false;
                this.verifyButton.classList.remove('expired');
                this.storeEndTime();
                this.updateDisplay();
                this.start();
            }

            storeEndTime() {
                const endTime = Date.now() + (this.timeLeft * 1000);
                sessionStorage.setItem('signupOtpTimerEndTime', endTime.toString());
            }
        }

        // Initialize components
        const otpValidator = new OTPValidator();
        const timerManager = new TimerManager(30);

        // Verify button event listener
        document.getElementById('verify-btn').addEventListener('click', () => {
            otpValidator.verifyOTP();
        });

        // Resend button event listener
        document.getElementById('resend-btn').addEventListener('click', () => {
            const resendBtn = document.getElementById('resend-btn');
            resendBtn.classList.add('loading');
            resendBtn.disabled = true;
            resendBtn.textContent = '';

            Swal.fire({
                title: 'Sending OTP...',
                allowOutsideClick: false,
                didOpen: () => {
                    Swal.showLoading();
                }
            });

            fetch('/resend-otp', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({}) // Add user identifier (e.g., email) if required
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                Swal.close(); // Close the loading dialog
                if (data.success) {
                    showToast('A new OTP has been sent to your email.', 'success');
                    timerManager.reset();
                    otpValidator.clearAllInputs();
                } else {
                    showToast(data.message || 'Failed to resend OTP. Please try again.', 'error');
                    resendBtn.disabled = false;
                }
            })
            .catch(error => {
                console.error('Error:', error);
                Swal.close(); // Close the loading dialog
                showToast('Failed to resend OTP. Please try again.', 'error');
                resendBtn.disabled = false;
            })
            .finally(() => {
                resendBtn.classList.remove('loading');
                resendBtn.textContent = 'Resend OTP';
            });
        });

        // Auto-clear error message after 5 seconds
        let errorTimeout;
        const originalShowError = otpValidator.showError;
        otpValidator.showError = function(message) {
            originalShowError.call(this, message);
            clearTimeout(errorTimeout);
            errorTimeout = setTimeout(() => {
                this.clearError();
            }, 5000);
        };

        // Prevent form submission on Enter key globally
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Enter') {
                e.preventDefault();
                otpValidator.verifyOTP();
            }
        });

        // Focus management
        document.addEventListener('click', (e) => {
            if (!e.target.classList.contains('otp-input') && !e.target.classList.contains('btn')) {
                const emptyInput = Array.from(otpValidator.otpInputs).find(input => !input.value);
                if (emptyInput) {
                    emptyInput.focus();
                } else {
                    otpValidator.otpInputs[5].focus();
                }
            }
        });
    </script>
</body>
</html>