<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Category Management - ArvanClaire</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.2/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/sweetalert2/11.10.5/sweetalert2.all.min.js"></script>
    <link rel="stylesheet" href="/styles/admin/get-category.css">
</head>
<body>
    <!-- Include Admin Sidebar -->
    <%- include("../partials/admin/sidebar") %>

    <!-- Main Content -->
    <div class="main-content">
        <!-- Breadcrumbs -->
        <nav aria-label="breadcrumb" class="mb-3">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="/admin-dashboard">Dashboard</a></li>
                <li class="breadcrumb-item active" aria-current="page">Category Management</li>
            </ol>
        </nav>

        <!-- Page Header -->
        <div class="page-header">
            <div class="header-content">
                <div class="header-left">
                    <h1 class="page-title">Category Management</h1>
                    <p class="page-subtitle">Organize and manage your product categories</p>
                </div>
                <div class="header-right">
                    <button class="add-category-btn" onclick="showAddModal()">
                        <i class="fas fa-plus"></i>
                        <span>Add New Category</span>
                    </button>
                </div>
            </div>
        </div>

        <!-- Search and Stats Section -->
        <div class="search-stats-card">
            <div class="search-section">
                <div class="search-header">
                    <h3 class="search-title">
                        <i class="fas fa-search"></i>
                        Search Categories
                    </h3>
                </div>
                <div class="search-wrapper">
                    <div class="search-input-container">
                        <input type="text" class="form-control search-input" placeholder="Search by category name or description..." id="searchInput">
                    </div>
                </div>
            </div>
        </div>

        <!-- Categories Table Section -->
        <div class="categories-card">
            <div class="card-header">
                <div class="header-left">
                    <h3 class="card-title">
                        <i class="fas fa-list"></i>
                        All Categories
                    </h3>
                    <p class="card-subtitle">Manage your product categories and their settings</p>
                </div>
                <div class="header-right">
                    <div class="category-count">
                        <span class="count-badge" id="categoryCount">0 categories</span>
                    </div>
                </div>
            </div>

            <div class="table-wrapper">
                <table class="modern-table" id="categoryTable">
                    <thead>
                        <tr>
                            <th class="col-number">#</th>
                            <th class="col-name">Category Name</th>
                            <th class="col-description">Description</th>
                            <th class="col-offer">Offer %</th>
                            <th class="col-status">Status</th>
                            <th class="col-date">Created Date</th>
                            <th class="col-actions">Actions</th>
                        </tr>
                    </thead>
                    <tbody id="categoryTableBody">
                        <tr>
                            <td colspan="7" class="loading-state">
                                <div class="loading-content">
                                    <i class="fas fa-spinner fa-spin"></i>
                                    <span>Loading categories...</span>
                                </div>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>

            <!-- Pagination -->
            <div class="pagination-wrapper">
                <div class="pagination-info" id="paginationInfo">
                    Showing 0 to 0 of 0 entries
                </div>
                <nav aria-label="Category pagination">
                    <ul class="pagination" id="paginationControls">
                        <li class="page-item disabled">
                            <a class="page-link" href="#" aria-label="Previous">
                                <i class="fas fa-chevron-left"></i>
                            </a>
                        </li>
                        <li class="page-item active">
                            <a class="page-link" href="#">1</a>
                        </li>
                        <li class="page-item">
                            <a class="page-link" href="#" aria-label="Next">
                                <i class="fas fa-chevron-right"></i>
                            </a>
                        </li>
                    </ul>
                </nav>
            </div>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.2/js/bootstrap.bundle.min.js"></script>
    <script>
        let categories = [];
        let filteredCategories = [];

        // Search functionality
        const searchInput = document.getElementById('searchInput');
        if (searchInput) {
            searchInput.addEventListener('input', function() {
                applySearchFilter();
            });
        }

        function applySearchFilter() {
            const searchTerm = searchInput.value.toLowerCase().trim();
            if (searchTerm === '') {
                filteredCategories = [...categories];
            } else {
                filteredCategories = categories.filter(category =>
                    category.name.toLowerCase().includes(searchTerm) ||
                    (category.description && category.description.toLowerCase().includes(searchTerm))
                );
            }
            renderTable();
            updateCategoryCount();
        }

        function updateCategoryCount() {
            const countBadge = document.getElementById('categoryCount');
            if (countBadge) {
                countBadge.textContent = `${filteredCategories.length} categories`;
            }
        }

        // Fetch categories from backend
        async function fetchCategories() {
            try {
                const response = await fetch('/get-categories');
                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || `HTTP error! status: ${response.status}`);
                }
                categories = await response.json();
                applySearchFilter();
            } catch (error) {
                console.error('Error fetching categories:', error);
                Swal.fire({
                    title: 'Error!',
                    text: `Could not fetch categories: ${error.message}`,
                    icon: 'error',
                    confirmButtonColor: '#000000'
                });
                document.getElementById('categoryTableBody').innerHTML = `
                    <tr>
                        <td colspan="7" class="error-state">
                            <div class="error-content">
                                <i class="fas fa-exclamation-triangle"></i>
                                <span>Failed to load categories</span>
                            </div>
                        </td>
                    </tr>
                `;
            }
        }

        // Render table with filtered data
        function renderTable() {
            const tbody = document.getElementById('categoryTableBody');
            const paginationInfo = document.getElementById('paginationInfo');

            if (!tbody || !paginationInfo) {
                console.error('Table body or pagination info element not found.');
                return;
            }

            if (filteredCategories.length === 0) {
                const searchTerm = searchInput.value.trim();
                tbody.innerHTML = `
                    <tr>
                        <td colspan="7" class="empty-state">
                            <div class="empty-content">
                                <i class="fas fa-${searchTerm ? 'search' : 'folder-open'}"></i>
                                <h5>${searchTerm ? 'No categories found' : 'No categories available'}</h5>
                                <p>${searchTerm ? 'Try adjusting your search terms.' : 'Add a new category to get started.'}</p>
                                ${!searchTerm ? '<button class="empty-action-btn" onclick="showAddModal()"><i class="fas fa-plus"></i> Add First Category</button>' : ''}
                            </div>
                        </td>
                    </tr>
                `;
                paginationInfo.textContent = 'Showing 0 to 0 of 0 entries';
                return;
            }

            tbody.innerHTML = filteredCategories.map((category, index) => `
                <tr>
                    <td>
                        <div class="row-number">${index + 1}</div>
                    </td>
                    <td>
                        <div class="category-name-cell">
                            <div class="category-icon">
                                <i class="fas fa-tag"></i>
                            </div>
                            <div class="category-info">
                                <div class="category-name">${category.name}</div>
                            </div>
                        </div>
                    </td>
                    <td>
                        <div class="description-cell" title="${category.description || 'No description'}">
                            ${category.description || '<span class="text-muted">No description</span>'}
                        </div>
                    </td>
                    <td>
                        <div class="offer-display">
                            ${category.categoryOffer > 0 ? 
                                `<span class="offer-value">${category.categoryOffer}%</span>` : 
                                `<span class="no-offer-text">0%</span>`
                            }
                        </div>
                    </td>
                    <td>
                        <label class="status-toggle">
                            <input type="checkbox" ${category.isListed ? 'checked' : ''} onchange="toggleStatus('${category._id}', this)">
                            <span class="toggle-slider"></span>
                        </label>
                    </td>
                    <td>
                        <div class="date-cell">
                            <i class="fas fa-calendar-alt"></i>
                            <span>${category.date}</span>
                        </div>
                    </td>
                    <td>
                        <div class="action-buttons">
                        <button class="btn btn-sm btn-success" onclick="showOfferModal('${category._id}')" title="Manage Offer">
                        <i class="fas fa-percentage"></i>
                        </button>
                        <button class="btn btn-sm btn-primary" onclick="showEditModal('${category._id}')" title="Edit Category">
                        <i class="fas fa-edit"></i>
                        </button>
                        <button class="btn btn-sm btn-danger" onclick="deleteCategory('${category._id}')" title="Delete Category">
                        <i class="fas fa-trash"></i>
                        </button>
                        </div>
                    </td>
                </tr>
            `).join('');

            paginationInfo.textContent = `Showing 1 to ${filteredCategories.length} of ${filteredCategories.length} entries`;
        }

        // Show Category Offer Modal
        function showOfferModal(categoryId) {
            const category = categories.find(c => c._id === categoryId);
            if (!category) {
                Swal.fire({
                    title: 'Error!',
                    text: 'Category not found.',
                    icon: 'error',
                    confirmButtonColor: '#000000'
                });
                return;
            }
            
            Swal.fire({
                title: `<i class="fas fa-percentage me-2"></i>Set Offer for "${category.name}"`,
                html: `
                    <div class="text-start">
                        <div class="mb-3">
                            <label for="swal-offer" class="form-label">Category Offer Percentage <span class="text-danger">*</span></label>
                            <input type="number" id="swal-offer" class="swal2-input" value="${category.categoryOffer || 0}" min="0" max="100" step="1" placeholder="Enter offer percentage (0-100)" style="display: block; width: 100%; margin: 0;">
                            <small class="text-muted">Enter a value between 0 and 100. This offer will apply to all products in this category.</small>
                        </div>
                        <div class="alert alert-info">
                            <i class="fas fa-info-circle me-2"></i>
                            <strong>Note:</strong> If a product has its own offer, the system will automatically apply the higher offer between the product offer and category offer.
                        </div>
                    </div>
                `,
                showCancelButton: true,
                confirmButtonText: '<i class="fas fa-check"></i> Update Offer',
                cancelButtonText: '<i class="fas fa-times"></i> Cancel',
                confirmButtonColor: '#000000',
                cancelButtonColor: '#6c757d',
                width: '500px',
                customClass: {
                    popup: 'modern-swal'
                },
                preConfirm: () => {
                    const offer = parseFloat(document.getElementById('swal-offer').value);
                    
                    if (isNaN(offer)) {
                        Swal.showValidationMessage('Please enter a valid number');
                        return false;
                    }
                    
                    if (offer < 0 || offer > 100) {
                        Swal.showValidationMessage('Offer must be between 0 and 100');
                        return false;
                    }
                    
                    return { categoryOffer: offer };
                }
            }).then(async (result) => {
                if (result.isConfirmed) {
                    await updateCategoryOffer(categoryId, result.value.categoryOffer);
                }
            });
        }

        // Update category offer function
        async function updateCategoryOffer(categoryId, offerPercentage) {
            try {
                const response = await fetch(`/get-categories/${categoryId}/offer`, {
                    method: 'PATCH',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ categoryOffer: offerPercentage })
                });
                
                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || `HTTP error! status: ${response.status}`);
                }
                
                const data = await response.json();
                
                // Update local data
                const category = categories.find(c => c._id === categoryId);
                if (category) category.categoryOffer = offerPercentage;
                const filteredCategory = filteredCategories.find(c => c._id === categoryId);
                if (filteredCategory) filteredCategory.categoryOffer = offerPercentage;
                
                // Re-render table to show updated offer
                renderTable();
                
                Swal.fire({
                    title: 'Success!',
                    text: data.message,
                    icon: 'success',
                    timer: 3000,
                    showConfirmButton: false,
                    customClass: {
                        popup: 'modern-swal'
                    }
                });
            } catch (error) {
                console.error('Error updating category offer:', error);
                Swal.fire({
                    title: 'Error!',
                    text: `Could not update offer: ${error.message}`,
                    icon: 'error',
                    confirmButtonColor: '#000000',
                    customClass: {
                        popup: 'modern-swal'
                    }
                });
            }
        }

        // Show Add Category Modal
        function showAddModal() {
            Swal.fire({
                title: '<i class="fas fa-plus-circle me-2"></i>Add New Category',
                html: `
                    <div class="text-start">
                        <div class="mb-3">
                            <label for="swal-name" class="form-label">Category Name <span class="text-danger">*</span></label>
                            <input type="text" id="swal-name" class="swal2-input" placeholder="Enter category name" style="display: block; width: 100%; margin: 0;">
                        </div>
                        <div class="mb-3">
                            <label for="swal-desc" class="form-label">Description</label>
                            <textarea id="swal2-textarea" class="swal2-textarea" placeholder="Enter category description..." style="display: block; width: 100%; margin: 0; height: 100px;"></textarea>
                        </div>
                        <div class="mb-3">
                            <label for="swal-status" class="form-label">Status <span class="text-danger">*</span></label>
                            <select id="swal-status" class="form-control" style="display: block; width: 100%; margin: 0;">
                                <option value="true" selected>Active</option>
                                <option value="false">Inactive</option>
                            </select>
                        </div>
                    </div>
                `,
                showCancelButton: true,
                confirmButtonText: '<i class="fas fa-check"></i> Save Category',
                cancelButtonText: '<i class="fas fa-times"></i> Cancel',
                confirmButtonColor: '#000000',
                cancelButtonColor: '#6c757d',
                width: '500px',
                customClass: {
                    popup: 'modern-swal'
                },
                preConfirm: () => {
                    const name = document.getElementById('swal-name').value.trim();
                    const description = document.getElementById('swal2-textarea').value.trim();
                    const status = document.getElementById('swal-status').value === 'true';
                    
                    if (!name) {
                        Swal.showValidationMessage('Please enter a category name');
                        return false;
                    }
                    if (categories.some(c => c.name.toLowerCase() === name.toLowerCase())) {
                        Swal.showValidationMessage('A category with this name already exists.');
                        return false;
                    }
                    return { name, description, status };
                }
            }).then(async (result) => {
                if (result.isConfirmed) {
                    await addCategory(result.value);
                }
            });
        }

        // Add new category
        async function addCategory(categoryData) {
            try {
                const response = await fetch('/get-categories', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(categoryData)
                });
                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || `HTTP error! status: ${response.status}`);
                }
                await fetchCategories();
                Swal.fire({
                    title: 'Success!',
                    text: 'Category added successfully!',
                    icon: 'success',
                    confirmButtonColor: '#000000',
                    customClass: {
                        popup: 'modern-swal'
                    }
                });
            } catch (error) {
                console.error('Error adding category:', error);
                Swal.fire({
                    title: 'Error!',
                    text: `Could not add category: ${error.message}`,
                    icon: 'error',
                    confirmButtonColor: '#000000',
                    customClass: {
                        popup: 'modern-swal'
                    }
                });
            }
        }

        // Toggle status function
        async function toggleStatus(categoryId, toggleElement) {
            const newStatus = toggleElement.checked;
            
            try {
                const response = await fetch(`/get-categories/${categoryId}/status`, {
                    method: 'PATCH',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ status: newStatus })
                });
                if (!response.ok) {
                    toggleElement.checked = !newStatus;
                    const errorData = await response.json();
                    throw new Error(errorData.message || `HTTP error! status: ${response.status}`);
                }
                const data = await response.json();
                const category = categories.find(c => c._id === categoryId);
                if (category) category.isListed = newStatus;
                const filteredCategory = filteredCategories.find(c => c._id === categoryId);
                if (filteredCategory) filteredCategory.isListed = newStatus;
                
                Swal.fire({
                    title: 'Success!',
                    text: data.message,
                    icon: 'success',
                    timer: 2000,
                    showConfirmButton: false,
                    customClass: {
                        popup: 'modern-swal'
                    }
                });
            } catch (error) {
                console.error('Error toggling status:', error);
                toggleElement.checked = !newStatus;
                Swal.fire({
                    title: 'Error!',
                    text: `Could not update status: ${error.message}`,
                    icon: 'error',
                    confirmButtonColor: '#000000',
                    customClass: {
                        popup: 'modern-swal'
                    }
                });
            }
        }

        // Show Edit Category Modal
        function showEditModal(categoryId) {
            const category = categories.find(c => c._id === categoryId);
            if (!category) {
                Swal.fire({
                    title: 'Error!',
                    text: 'Category not found.',
                    icon: 'error',
                    confirmButtonColor: '#000000',
                    customClass: {
                        popup: 'modern-swal'
                    }
                });
                return;
            }
            
            Swal.fire({
                title: '<i class="fas fa-edit me-2"></i>Edit Category',
                html: `
                    <div class="text-start">
                        <div class="mb-3">
                            <label for="swal-edit-name" class="form-label">Category Name <span class="text-danger">*</span></label>
                            <input type="text" id="swal-edit-name" class="swal2-input" value="${category.name}" style="display: block; width: 100%; margin: 0;">
                        </div>
                        <div class="mb-3">
                            <label for="swal-edit-desc" class="form-label">Description</label>
                            <textarea id="swal-edit-desc" class="swal2-textarea" style="display: block; width: 100%; margin: 0; height: 100px;">${category.description || ''}</textarea>
                        </div>
                        <div class="mb-3">
                            <label for="swal-edit-status" class="form-label">Status <span class="text-danger">*</span></label>
                            <select id="swal-edit-status" class="swal2-input" style="display: block; width: 100%; margin: 0;">
                                <option value="true" ${category.isListed ? 'selected' : ''}>Active</option>
                                <option value="false" ${!category.isListed ? 'selected' : ''}>Inactive</option>
                            </select>
                        </div>
                    </div>
                `,
                showCancelButton: true,
                confirmButtonText: '<i class="fas fa-save me-2"></i>Update Category',
                cancelButtonText: '<i class="fas fa-times me-2"></i>Cancel',
                confirmButtonColor: '#000000',
                cancelButtonColor: '#6c757d',
                width: '500px',
                customClass: {
                    popup: 'modern-swal'
                },
                preConfirm: () => {
                    const name = document.getElementById('swal-edit-name').value.trim();
                    const description = document.getElementById('swal-edit-desc').value.trim();
                    const status = document.getElementById('swal-edit-status').value === 'true';
                    
                    if (!name) {
                        Swal.showValidationMessage('Please enter a category name');
                        return false;
                    }
                    if (categories.some(c => c._id !== categoryId && c.name.toLowerCase() === name.toLowerCase())) {
                        Swal.showValidationMessage('Another category with this name already exists.');
                        return false;
                    }
                    return { name, description, status };
                }
            }).then(async (result) => {
                if (result.isConfirmed) {
                    await updateCategory(categoryId, result.value);
                }
            });
        }

        // Update category function
        async function updateCategory(categoryId, categoryData) {
            try {
                const response = await fetch(`/get-categories/${categoryId}`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(categoryData)
                });
                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || `HTTP error! status: ${response.status}`);
                }
                await fetchCategories();
                Swal.fire({
                    title: 'Success!',
                    text: 'Category updated successfully!',
                    icon: 'success',
                    confirmButtonColor: '#000000',
                    customClass: {
                        popup: 'modern-swal'
                    }
                });
            } catch (error) {
                console.error('Error updating category:', error);
                Swal.fire({
                    title: 'Error!',
                    text: `Could not update category: ${error.message}`,
                    icon: 'error',
                    confirmButtonColor: '#000000',
                    customClass: {
                        popup: 'modern-swal'
                    }
                });
            }
        }

        // Delete category function (Soft Delete)
        async function deleteCategory(categoryId) {
            const category = categories.find(c => c._id === categoryId);
            if (!category) {
                Swal.fire({
                    title: 'Error!',
                    text: 'Category not found.',
                    icon: 'error',
                    confirmButtonColor: '#000000',
                    customClass: {
                        popup: 'modern-swal'
                    }
                });
                return;
            }

            Swal.fire({
                title: 'Delete Category?',
                html: `
                    <div class="text-start">
                        <p>You are about to delete the category <strong>"${category.name}"</strong>.</p>
                        <div class="alert alert-info">
                            <i class="fas fa-info-circle me-2"></i>
                            <strong>Note:</strong> This is a soft delete. The category will be hidden but can be restored later if needed.
                        </div>
                        <p class="text-muted">Products in this category will become inaccessible to users until the category is restored.</p>
                    </div>
                `,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#dc3545',
                cancelButtonColor: '#6c757d',
                confirmButtonText: '<i class="fas fa-trash me-2"></i>Yes, delete it!',
                cancelButtonText: '<i class="fas fa-times me-2"></i>Cancel',
                width: '500px',
                customClass: {
                    popup: 'modern-swal'
                }
            }).then(async (result) => {
                if (result.isConfirmed) {
                    try {
                        // Show loading state
                        Swal.fire({
                            title: 'Deleting Category...',
                            text: 'Please wait while we process your request.',
                            icon: 'info',
                            allowOutsideClick: false,
                            allowEscapeKey: false,
                            showConfirmButton: false,
                            customClass: {
                                popup: 'modern-swal'
                            },
                            didOpen: () => {
                                Swal.showLoading();
                            }
                        });

                        const response = await fetch(`/get-categories/${categoryId}`, {
                            method: 'DELETE',
                            headers: { 'Content-Type': 'application/json' }
                        });

                        if (!response.ok) {
                            const errorData = await response.json();
                            throw new Error(errorData.message || `HTTP error! status: ${response.status}`);
                        }

                        const result = await response.json();

                        // Remove the category from local arrays
                        categories = categories.filter(c => c._id !== categoryId);
                        applySearchFilter();

                        // Show success message
                        Swal.fire({
                            title: 'Deleted Successfully!',
                            html: `
                                <div class="text-start">
                                    <p>${result.message}</p>
                                    <div class="alert alert-success">
                                        <i class="fas fa-check-circle me-2"></i>
                                        The category has been soft deleted and is no longer visible to users.
                                    </div>
                                    <p class="text-muted">You can restore this category later if needed.</p>
                                </div>
                            `,
                            icon: 'success',
                            confirmButtonText: 'OK',
                            confirmButtonColor: '#000000',
                            customClass: {
                                popup: 'modern-swal'
                            }
                        });

                    } catch (error) {
                        console.error('Error deleting category:', error);
                        Swal.fire({
                            title: 'Delete Failed!',
                            text: `Could not delete category: ${error.message}`,
                            icon: 'error',
                            confirmButtonText: 'OK',
                            confirmButtonColor: '#000000',
                            customClass: {
                                popup: 'modern-swal'
                            }
                        });
                    }
                }
            });
        }

        // Initialize the table on page load
        document.addEventListener('DOMContentLoaded', function() {
            fetchCategories();
        });
    </script>
</body>
</html>