<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <title>Return Requests</title>
    <style>
        body {
            background-color: #f8f9fa;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        .main-content {
            margin-left: 250px;
            padding: 20px;
            min-height: 100vh;
        }
        .page-header {
            background: white;
            padding: 2rem;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            margin-bottom: 2rem;
        }
        .page-title {
            color: #2c3e50;
            font-weight: 600;
            margin-bottom: 0.5rem;
        }
        .page-subtitle {
            color: #6c757d;
            margin: 0;
        }
        .table-container {
            background: white;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        .table-header {
            padding: 1.5rem;
            border-bottom: 1px solid #dee2e6;
            background: #f8f9fa;
        }
        .controls-row {
            display: flex;
            justify-content: space-between;
            align-items: center;
            gap: 1rem;
            flex-wrap: wrap;
        }
        .search-box {
            position: relative;
            max-width: 300px;
            flex: 1;
        }
        .search-box input {
            padding-left: 2.5rem;
        }
        .search-box i {
            position: absolute;
            left: 12px;
            top: 50%;
            transform: translateY(-50%);
            color: #6c757d;
        }
        .table-responsive {
            max-height: 600px;
            overflow-y: auto;
        }
        .return-table {
            margin: 0;
        }
        .return-table th {
            background: #f8f9fa;
            border-bottom: 2px solid #dee2e6;
            font-weight: 600;
            color: #2c3e50;
            position: sticky;
            top: 0;
            z-index: 10;
        }
        .return-table td {
            vertical-align: middle;
            border-bottom: 1px solid #e9ecef;
        }
        .return-table tr:hover {
            background-color: #f8f9fa;
        }
        .status-badge {
            padding: 0.4rem 0.8rem;
            border-radius: 20px;
            font-size: 0.75rem;
            font-weight: 600;
            text-transform: uppercase;
        }
        .status-pending { background: #fff3cd; color: #856404; }
        .status-completed { background: #d4edda; color: #155724; }
        .status-rejected { background: #f8d7da; color: #721c24; }
        .customer-info {
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }
        .customer-avatar {
            width: 35px;
            height: 35px;
            border-radius: 50%;
            background: #007bff;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: 600;
            font-size: 0.8rem;
        }
        .customer-details h6 {
            margin: 0;
            font-size: 0.9rem;
            font-weight: 600;
        }
        .customer-details small {
            color: #6c757d;
        }
        .product-info {
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }
        .product-image {
            width: 40px;
            height: 40px;
            object-fit: cover;
            border-radius: 6px;
            border: 1px solid #dee2e6;
        }
        .product-details h6 {
            margin: 0;
            font-size: 0.85rem;
            font-weight: 600;
        }
        .product-details small {
            color: #6c757d;
        }
        .btn-sm {
            padding: 0.4rem 0.8rem;
            font-size: 0.8rem;
        }
        .pagination-container {
            padding: 1.5rem;
            border-top: 1px solid #dee2e6;
            background: #f8f9fa;
        }
        @media (max-width: 768px) {
            .main-content {
                margin-left: 0;
                padding: 15px;
            }
            .controls-row {
                flex-direction: column;
                align-items: stretch;
            }
            .search-box {
                max-width: 100%;
            }
        }
    </style>
</head>
<body>
    <%- include("../partials/admin/sidebar") %>

    <div class="main-content">
        <!-- Breadcrumbs -->
        <nav aria-label="breadcrumb" class="mb-3">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="/admin-dashboard">Dashboard</a></li>
                <li class="breadcrumb-item"><a href="/get-orders">Orders</a></li>
                <li class="breadcrumb-item active">Return Requests</li>
            </ol>
        </nav>

        <!-- Page Header -->
        <div class="page-header">
            <h1 class="page-title">Return Requests Management</h1>
            <p class="page-subtitle">Manage and track all customer return requests</p>
        </div>

        <!-- Table Container -->
        <div class="table-container">
            <!-- Table Header with Controls -->
            <div class="table-header">
                <div class="controls-row">
                    <div class="search-box">
                        <i class="fas fa-search"></i>
                        <input type="text" class="form-control" id="returnSearch" 
                               placeholder="Search orders, customers..." value="<%= searchTerm %>">
                    </div>
                    <div class="d-flex gap-2">
                        <select class="form-select" id="statusFilter">
                            <option value="" <%= statusFilter === '' ? 'selected' : '' %>>All Status</option>
                            <option value="Return Request" <%= statusFilter === 'Return Request' ? 'selected' : '' %>>Pending</option>
                            <option value="Returned" <%= statusFilter === 'Returned' ? 'selected' : '' %>>Completed</option>
                            <option value="Rejected" <%= statusFilter === 'Rejected' ? 'selected' : '' %>>Rejected</option>
                        </select>
                    </div>
                </div>
            </div>

            <!-- Table -->
            <div class="table-responsive">
                <table class="table return-table">
                    <thead>
                        <tr>
                            <th>Order ID</th>
                            <th>Customer</th>
                            <th>Product</th>
                            <th>Amount</th>
                            <th>Request Date</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% if (returnRequests && returnRequests.length > 0) { %>
                            <% returnRequests.forEach((order) => { %>
                                <tr>
                                    <td>
                                        <div>
                                            <strong><%= order.orderId %></strong>
                                            <br>
                                            <small class="text-muted"><%= new Date(order.createdAt).toLocaleDateString() %></small>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="customer-info">
                                            <div class="customer-avatar">
                                                <%= (order.userId?.fullname || order.shippingAddress?.name || 'U').charAt(0).toUpperCase() %>
                                            </div>
                                            <div class="customer-details">
                                                <h6><%= order.userId?.fullname || order.shippingAddress?.name || 'N/A' %></h6>
                                                <small><%= order.userId?.email || 'N/A' %></small>
                                            </div>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="product-info">
                                            <% if (order.orderedItems && order.orderedItems.length > 0) { %>
                                                <img src="<%= order.orderedItems[0].product?.productImages?.[0] || '/images/placeholder-product.jpg' %>" 
                                                     alt="Product" class="product-image">
                                                <div class="product-details">
                                                    <h6><%= order.orderedItems[0].product?.productName || 'Product' %></h6>
                                                    <small>Qty: <%= order.orderedItems.reduce((total, item) => total + item.quantity, 0) %></small>
                                                    <% if (order.orderedItems.length > 1) { %>
                                                        <br><small class="text-muted">+<%= order.orderedItems.length - 1 %> more</small>
                                                    <% } %>
                                                </div>
                                            <% } else { %>
                                                <img src="/images/placeholder-product.jpg" alt="Product" class="product-image">
                                                <div class="product-details">
                                                    <h6>Product</h6>
                                                    <small>Qty: 0</small>
                                                </div>
                                            <% } %>
                                        </div>
                                    </td>
                                    <td>
                                        <strong>₹<%= order.finalAmount.toLocaleString() %></strong>
                                    </td>
                                    <td>
                                        <% 
                                            let displayDate = order.returnRequestedAt || order.updatedAt;
                                        %>
                                        <%= new Date(displayDate).toLocaleDateString() %>
                                        <br>
                                        <small class="text-muted"><%= new Date(displayDate).toLocaleTimeString() %></small>
                                    </td>
                                    <td>
                                        <% 
                                            let displayStatus = order.status;
                                            let statusClass = 'pending';
                                            
                                            if (order.returnRejectedAt && order.status === 'Delivered') {
                                                displayStatus = 'Rejected';
                                                statusClass = 'rejected';
                                            } else if (order.status === 'Return Request') {
                                                displayStatus = 'Pending';
                                                statusClass = 'pending';
                                            } else if (order.status === 'Returned') {
                                                displayStatus = 'Completed';
                                                statusClass = 'completed';
                                            }
                                        %>
                                        <span class="status-badge status-<%= statusClass %>">
                                            <%= displayStatus %>
                                        </span>
                                    </td>
                                    <td>
                                        <div class="d-flex gap-1">
                                            <% if (order.status === 'Return Request') { %>
                                                <button class="btn btn-success btn-sm" onclick="approveReturn('<%= order._id %>')">
                                                    <i class="fas fa-check"></i>
                                                </button>
                                                <button class="btn btn-danger btn-sm" onclick="rejectReturn('<%= order._id %>')">
                                                    <i class="fas fa-times"></i>
                                                </button>
                                            <% } %>
                                            <button class="btn btn-info btn-sm" onclick="viewReturnDetails('<%= order._id %>')">
                                                <i class="fas fa-eye"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            <% }) %>
                        <% } else { %>
                            <tr>
                                <td colspan="7" class="text-center py-4">
                                    <div class="text-muted">
                                        <i class="fas fa-inbox fa-3x mb-3"></i>
                                        <h5>No Return Requests Found</h5>
                                        <p>There are currently no return requests to display.</p>
                                    </div>
                                </td>
                            </tr>
                        <% } %>
                    </tbody>
                </table>
            </div>

            <!-- Pagination -->
            <% if (returnRequests && returnRequests.length > 0) { %>
                <div class="pagination-container">
                    <div class="d-flex justify-content-between align-items-center">
                        <div class="text-muted">
                            Showing <%= startIdx + 1 %> to <%= endIdx %> of <%= totalRequests %> requests
                        </div>
                        <nav>
                            <ul class="pagination pagination-sm mb-0">
                                <li class="page-item <%= currentPage === 1 ? 'disabled' : '' %>">
                                    <a class="page-link" href="#" onclick="goToPage(<%= currentPage - 1 %>)">Previous</a>
                                </li>
                                <% for(let i = 1; i <= totalPages; i++) { %>
                                    <li class="page-item <%= i === currentPage ? 'active' : '' %>">
                                        <a class="page-link" href="#" onclick="goToPage(<%= i %>)"><%= i %></a>
                                    </li>
                                <% } %>
                                <li class="page-item <%= currentPage === totalPages ? 'disabled' : '' %>">
                                    <a class="page-link" href="#" onclick="goToPage(<%= currentPage + 1 %>)">Next</a>
                                </li>
                            </ul>
                        </nav>
                    </div>
                </div>
            <% } %>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
    <script>
        // Simple JavaScript for the return request page
        document.addEventListener('DOMContentLoaded', function() {
            // Search functionality
            const searchInput = document.getElementById('returnSearch');
            if (searchInput) {
                searchInput.addEventListener('input', debounce(handleSearch, 300));
            }

            // Status filter
            const statusFilter = document.getElementById('statusFilter');
            if (statusFilter) {
                statusFilter.addEventListener('change', handleStatusFilter);
            }
        });

        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }

        function handleSearch() {
            const searchTerm = document.getElementById('returnSearch').value;
            const statusFilter = document.getElementById('statusFilter').value;
            updateURL(searchTerm, statusFilter);
        }

        function handleStatusFilter() {
            const searchTerm = document.getElementById('returnSearch').value;
            const statusFilter = document.getElementById('statusFilter').value;
            updateURL(searchTerm, statusFilter);
        }

        function updateURL(search, status) {
            const url = new URL(window.location);
            if (search) url.searchParams.set('search', search);
            else url.searchParams.delete('search');
            if (status) url.searchParams.set('status', status);
            else url.searchParams.delete('status');
            url.searchParams.delete('page'); // Reset to first page
            window.location.href = url.toString();
        }

        function goToPage(page) {
            const url = new URL(window.location);
            url.searchParams.set('page', page);
            window.location.href = url.toString();
        }

        // Approve return request
        async function approveReturn(requestId) {
            const result = await Swal.fire({
                title: 'Approve Return Request',
                text: 'Are you sure you want to approve this return request?',
                icon: 'question',
                showCancelButton: true,
                confirmButtonText: 'Yes, Approve',
                cancelButtonText: 'Cancel',
                confirmButtonColor: '#28a745',
                input: 'textarea',
                inputPlaceholder: 'Add admin note (optional)...',
                inputAttributes: {
                    'aria-label': 'Admin note'
                }
            });

            if (result.isConfirmed) {
                try {
                    const response = await fetch(`/return-requests/${requestId}/approve`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ adminNote: result.value || '' })
                    });

                    const data = await response.json();

                    if (data.success) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Approved!',
                            text: data.message,
                            confirmButtonColor: '#28a745'
                        }).then(() => {
                            window.location.reload();
                        });
                    } else {
                        throw new Error(data.message);
                    }
                } catch (error) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: error.message || 'Failed to approve return request',
                        confirmButtonColor: '#dc3545'
                    });
                }
            }
        }

        // Reject return request
        async function rejectReturn(requestId) {
            const result = await Swal.fire({
                title: 'Reject Return Request',
                text: 'Please provide a reason for rejecting this return request:',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Reject',
                cancelButtonText: 'Cancel',
                confirmButtonColor: '#dc3545',
                input: 'textarea',
                inputPlaceholder: 'Enter rejection reason...',
                inputAttributes: {
                    'aria-label': 'Rejection reason'
                },
                inputValidator: (value) => {
                    if (!value) {
                        return 'You need to provide a rejection reason!'
                    }
                }
            });

            if (result.isConfirmed) {
                try {
                    const response = await fetch(`/return-requests/${requestId}/reject`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ rejectionReason: result.value })
                    });

                    const data = await response.json();

                    if (data.success) {
                        Swal.fire({
                            icon: 'info',
                            title: 'Rejected',
                            text: data.message,
                            confirmButtonColor: '#6c757d'
                        }).then(() => {
                            window.location.reload();
                        });
                    } else {
                        throw new Error(data.message);
                    }
                } catch (error) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: error.message || 'Failed to reject return request',
                        confirmButtonColor: '#dc3545'
                    });
                }
            }
        }

        // View return details
        async function viewReturnDetails(requestId) {
            try {
                Swal.fire({
                    title: 'Loading...',
                    text: 'Fetching return request details...',
                    allowOutsideClick: false,
                    didOpen: () => {
                        Swal.showLoading();
                    }
                });

                const response = await fetch(`/get-orders/${requestId}`);
                const result = await response.json();

                if (!result.success) {
                    throw new Error(result.message || 'Failed to fetch order details');
                }

                const order = result.order;
                
                // Build product list
                let productList = '';
                if (order.orderedItems && order.orderedItems.length > 0) {
                    order.orderedItems.forEach(item => {
                        productList += `
                            <div class="d-flex align-items-center mb-2 p-2 bg-light rounded">
                                <img src="${item.product?.productImages?.[0] || '/images/placeholder-product.jpg'}" 
                                     alt="Product" style="width: 50px; height: 50px; object-fit: cover; border-radius: 6px; margin-right: 10px;">
                                <div>
                                    <h6 class="mb-1">${item.product?.productName || 'Product Name'}</h6>
                                    <small class="text-muted">Qty: ${item.quantity} | Price: ₹${item.price?.toLocaleString() || '0'}</small>
                                </div>
                            </div>
                        `;
                    });
                }

                // Determine status
                let currentStatus = order.status;
                if (order.returnRejectedAt && order.status === 'Delivered') {
                    currentStatus = 'Rejected';
                } else if (order.status === 'Return Request') {
                    currentStatus = 'Pending Review';
                } else if (order.status === 'Returned') {
                    currentStatus = 'Completed';
                }

                const detailsHtml = `
                    <div class="text-start">
                        <div class="text-center mb-3">
                            <span class="badge bg-primary fs-6">${currentStatus}</span>
                        </div>
                        
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <h6><i class="fas fa-shopping-cart me-2"></i>Order Information</h6>
                                <p><strong>Order ID:</strong> ${order.orderId}</p>
                                <p><strong>Order Date:</strong> ${new Date(order.createdAt).toLocaleDateString()}</p>
                                <p><strong>Total Amount:</strong> ₹${order.finalAmount.toLocaleString()}</p>
                            </div>
                            <div class="col-md-6">
                                <h6><i class="fas fa-user me-2"></i>Customer Information</h6>
                                <p><strong>Name:</strong> ${order.userId?.fullname || order.shippingAddress?.name || 'N/A'}</p>
                                <p><strong>Email:</strong> ${order.userId?.email || 'N/A'}</p>
                                <p><strong>Phone:</strong> ${order.shippingAddress?.phone || 'N/A'}</p>
                            </div>
                        </div>

                        <div class="mb-3">
                            <h6><i class="fas fa-box me-2"></i>Products</h6>
                            ${productList}
                        </div>

                        ${order.returnReason ? `
                        <div class="mb-3">
                            <h6><i class="fas fa-comment-alt me-2"></i>Return Reason</h6>
                            <div class="p-3 bg-light rounded border-start border-primary border-4">
                                <em>${order.returnReason}</em>
                            </div>
                        </div>
                        ` : ''}

                        ${order.adminNote ? `
                        <div class="mb-3">
                            <h6><i class="fas fa-user-shield me-2"></i>Admin Note</h6>
                            <div class="p-3 bg-success bg-opacity-10 rounded border-start border-success border-4">
                                <em>${order.adminNote}</em>
                            </div>
                        </div>
                        ` : ''}

                        ${order.rejectionReason ? `
                        <div class="mb-3">
                            <h6><i class="fas fa-exclamation-triangle me-2"></i>Rejection Reason</h6>
                            <div class="p-3 bg-danger bg-opacity-10 rounded border-start border-danger border-4">
                                <em>${order.rejectionReason}</em>
                            </div>
                        </div>
                        ` : ''}
                    </div>
                `;

                Swal.fire({
                    title: `Return Request Details - ${order.orderId}`,
                    html: detailsHtml,
                    width: '800px',
                    confirmButtonText: 'Close',
                    confirmButtonColor: '#6c757d'
                });

            } catch (error) {
                console.error('Error fetching return details:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message || 'Failed to load return request details',
                    confirmButtonColor: '#dc3545'
                });
            }
        }
    </script>
</body>
</html>