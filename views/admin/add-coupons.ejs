<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add Coupon - ArvanClaire</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.2/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/sweetalert2/11.10.5/sweetalert2.all.min.js"></script>
    
    <link rel="stylesheet" href="../../styles/admin/add.coupon.css">

</head>
<body>
    <%- include("../partials/admin/sidebar") %>

    <div class="main-content">
        <!-- Breadcrumbs -->
        <nav aria-label="breadcrumb" class="mb-3">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="/admin-dashboard">Dashboard</a></li>
                <li class="breadcrumb-item"><a href="/coupons">Coupons</a></li>
                <li class="breadcrumb-item active" aria-current="page">Add Coupon</li>
            </ol>
        </nav>

        <!-- Page Header -->
        <div class="page-header">
            <h1 class="page-title">
                <i class="fas fa-plus"></i>
                Add New Coupon
            </h1>
            <p class="page-subtitle">Fill in the details below to add a new coupon to your store</p>
        </div>

        <div class="form-container">
            <div class="form-body">
                <% if (typeof errors !== 'undefined' && errors.general) { %>
                    <div class="alert alert-danger" role="alert">
                        <i class="fas fa-exclamation-triangle"></i> <%= errors.general %>
                    </div>
                <% } %>
                <form id="couponForm" method="POST" action="/add-coupon">
                    <!-- Coupon Details Section -->
                    <div class="form-section">
                        <h3 class="section-title">
                            <i class="fas fa-ticket-alt"></i> Coupon Details
                        </h3>
                        <div class="form-row">
                            <div class="form-group">
                                <label for="code" class="form-label">Coupon Code <span class="required">*</span></label>
                                <div class="input-group">
                                    <input type="text" class="form-control" id="code" name="code" maxlength="20" value="<%= typeof formData !== 'undefined' && formData && formData.code ? formData.code : '' %>" required>
                                    <button class="btn btn-outline-secondary" type="button" id="generateCode">Generate</button>
                                </div>
                                <div class="char-counter" id="codeCounter">0/20 characters</div>
                                <div class="error-message">Coupon code is required</div>
                            </div>
                            <div class="form-group">
                                <label for="description" class="form-label">Description <span class="required">*</span></label>
                                <input type="text" class="form-control" id="description" name="description" maxlength="100" value="<%= typeof formData !== 'undefined' && formData && formData.description ? formData.description : '' %>" required>
                                <div class="char-counter" id="descriptionCounter">0/100 characters</div>
                                <div class="error-message">Description is required</div>
                            </div>
                        </div>
                        <div class="form-row">
                            <div class="form-group">
                                <label for="discountType" class="form-label">Discount Type <span class="required">*</span></label>
                                <select class="form-select" id="discountType" name="discountType" required>
                                    <option value="">Select discount type</option>
                                    <option value="percentage" <%= typeof formData !== 'undefined' && formData && formData.discountType === 'percentage' ? 'selected' : '' %>>Percentage</option>
                                    <option value="flat" <%= typeof formData !== 'undefined' && formData && formData.discountType === 'flat' ? 'selected' : '' %>>Flat</option>
                                </select>
                                <div class="error-message">Please select a discount type</div>
                            </div>
                            <div class="form-group">
                                <label for="discountValue" class="form-label">Discount Value <span class="required">*</span></label>
                                <input type="number" class="form-control" id="discount" name="discount" step="0.01" min="0" value="<%= typeof formData !== 'undefined' && formData.discount ? formData.discount : '' %>" required>
                                <div class="error-message">Discount value is required</div>
                            </div>
                        </div>
                        <div class="form-group mt-3">
                            <label class="form-label">Coupon Preview:</label>
                            <div class="coupon-preview">
                                <h5 id="previewCode">COUPONCODE</h5>
                                <p id="previewDescription">Coupon description goes here.</p>
                                <strong id="previewDiscount">Discount: 10% OFF</strong>
                                <br>
                                <small id="previewExpiry">Expires on: YYYY-MM-DD</small>
                            </div>
                        </div>
                        <div class="form-row">
                            <div class="form-group">
                                <label for="minPurchaseAmount" class="form-label">Minimum Purchase Amount <span class="required">*</span></label>
                                <input type="number" class="form-control" id="minPurchase" name="minPurchase" step="0.01" min="0" value="<%= typeof formData !== 'undefined' && formData.minPurchase ? formData.minPurchase : '' %>" required>
                                <div class="error-message">Minimum purchase amount is required</div>
                            </div>
                            <div class="form-group">
                                <label for="isActive" class="form-label">Status</label>
                                <div class="form-check form-switch">
                                    <input class="form-check-input" type="checkbox" id="isActive" name="isActive" <%= typeof formData !== 'undefined' && formData.isActive ? 'checked' : 'checked' %>>
                                    <label class="form-check-label" for="isActive">Is Active</label>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Validity Section -->
                    <div class="form-section">
                        <h3 class="section-title">
                            <i class="fas fa-calendar-alt"></i> Validity
                        </h3>
                        <div class="form-row">
                            <div class="form-group">
                                <label for="startDate" class="form-label">Start Date <span class="required">*</span></label>
                                <input type="date" class="form-control" id="startDate" name="startDate" value="<%= typeof formData !== 'undefined' && formData.startDate ? formData.startDate : '' %>" required>
                                <div class="error-message">Start date is required</div>
                            </div>
                            <div class="form-group">
                                <label for="endDate" class="form-label">End Date <span class="required">*</span></label>
                                <input type="date" class="form-control" id="expiry" name="expiry" value="<%= typeof formData !== 'undefined' && formData.expiry ? formData.expiry : '' %>" required>
                                <div class="error-message">End date is required</div>
                            </div>
                        </div>
                    </div>

                    <!-- Usage Limits Section -->
                    <div class="form-section">
                        <h3 class="section-title">
                            <i class="fas fa-users"></i> Usage Limits
                        </h3>
                        <div class="form-row">
                            <div class="form-group">
                                <label for="globalUsageLimit" class="form-label">Global Usage Limit <span class="required">*</span></label>
                                <input type="number" class="form-control" id="usageLimit" name="usageLimit" min="1" value="<%= typeof formData !== 'undefined' && formData.usageLimit ? formData.usageLimit : '' %>" required>
                                <div class="error-message">Global usage limit is required</div>
                            </div>
                            <div class="form-group">
                                <label for="perUserLimit" class="form-label">Per User Limit <span class="required">*</span></label>
                                <input type="number" class="form-control" id="userUsageLimit" name="userUsageLimit" min="1" value="<%= typeof formData !== 'undefined' && formData.userUsageLimit ? formData.userUsageLimit : '' %>" required>
                                <div class="error-message">Per user limit is required</div>
                            </div>
                        </div>
                    </div>

                    <!-- Applicability Section -->
                    <div class="form-section">
                        <h3 class="section-title">
                            <i class="fas fa-tags"></i> Applicability
                        </h3>
                        <div class="form-row">
                            <div class="form-group">
                                <label for="applicableCategories" class="form-label">Applicable Categories</label>
                                <select class="form-select" id="applicableCategories" name="applicableCategories" multiple>
                                    <option value="">All Categories</option>
                                    <% categories.forEach(category => { %>
                                    <option value="<%= category._id %>"><%= category.name %></option>
                                    <% }); %>
                                </select>
                                <small class="form-text text-muted">Hold down Ctrl (or Command on Mac) to select multiple categories.</small>
                            </div>
                            <div class="form-group">
                                <label for="maxDiscount" class="form-label">Maximum Discount Amount <span class="required">*</span></label>
                                <input type="number" class="form-control" id="maxDiscount" name="maxDiscount" step="0.01" min="0" value="<%= typeof formData !== 'undefined' && formData.maxDiscount ? formData.maxDiscount : '' %>" required>
                                <div class="error-message">Maximum discount amount is required</div>
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="applicableProducts" class="form-label">Applicable Products</label>
                            <select class="form-select" id="applicableProducts" name="applicableProducts" multiple>
                                <% products.forEach(product => { %>
                                <option value="<%= product._id %>"><%= product.productName %></option>
                                <% }); %>
                            </select>
                            <small class="form-text text-muted">Hold down Ctrl (or Command on Mac) to select multiple products.</small>
                        </div>
                    </div>

                    <!-- Form Actions -->
                    <div class="form-actions">
                        <a href="/coupons" class="btn btn-secondary">
                            <i class="fas fa-times"></i> Cancel
                        </a>
                        <button type="submit" class="btn btn-primary">
                            <i class="fas fa-save"></i> Save Coupon
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.2/js/bootstrap.bundle.min.js"></script>
    <script>
        // Initialize form validation
        document.addEventListener('DOMContentLoaded', function() {
            setupFieldValidation();
            updatePreview();
            toggleMaxDiscountVisibility(); // Initialize visibility on page load
        });

        // Generate coupon code with enhanced feedback
        document.getElementById('generateCode').addEventListener('click', () => {
            const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
            let result = '';
            for (let i = 0; i < 10; i++) {
                result += chars.charAt(Math.floor(Math.random() * chars.length));
            }
            document.getElementById('code').value = result;
            updatePreview();
            
            // Show success toast
            Swal.fire({
                toast: true,
                position: 'top-end',
                icon: 'success',
                title: 'Coupon code generated!',
                showConfirmButton: false,
                timer: 2000,
                timerProgressBar: true
            });
        });

        // Setup real-time validation for all form fields
        function setupFieldValidation() {
            // Coupon Code validation
            const code = document.getElementById('code');
            if (code) {
                code.addEventListener('input', validateCouponCode);
                code.addEventListener('blur', validateCouponCode);
            }

            // Description validation
            const description = document.getElementById('description');
            if (description) {
                description.addEventListener('input', validateDescription);
                description.addEventListener('blur', validateDescription);
            }

            // Discount Type validation
            const discountType = document.getElementById('discountType');
            if (discountType) {
                discountType.addEventListener('change', function() {
                    validateDiscountType();
                    toggleMaxDiscountVisibility(); // Toggle visibility when discount type changes
                });
                discountType.addEventListener('blur', validateDiscountType);
            }

            // Discount Value validation
            const discount = document.getElementById('discount');
            if (discount) {
                discount.addEventListener('input', validateDiscountValue);
                discount.addEventListener('blur', validateDiscountValue);
            }

            // Min Purchase validation
            const minPurchase = document.getElementById('minPurchase');
            if (minPurchase) {
                minPurchase.addEventListener('input', validateMinPurchase);
                minPurchase.addEventListener('blur', validateMinPurchase);
            }

            // Max Discount validation
            const maxDiscount = document.getElementById('maxDiscount');
            if (maxDiscount) {
                maxDiscount.addEventListener('input', validateMaxDiscount);
                maxDiscount.addEventListener('blur', validateMaxDiscount);
            }

            // Start Date validation
            const startDate = document.getElementById('startDate');
            if (startDate) {
                startDate.addEventListener('change', validateStartDate);
                startDate.addEventListener('blur', validateStartDate);
            }

            // End Date validation
            const expiry = document.getElementById('expiry');
            if (expiry) {
                expiry.addEventListener('change', validateEndDate);
                expiry.addEventListener('blur', validateEndDate);
            }

            // Usage Limit validation
            const usageLimit = document.getElementById('usageLimit');
            if (usageLimit) {
                usageLimit.addEventListener('input', validateUsageLimit);
                usageLimit.addEventListener('blur', validateUsageLimit);
            }

            // User Usage Limit validation
            const userUsageLimit = document.getElementById('userUsageLimit');
            if (userUsageLimit) {
                userUsageLimit.addEventListener('input', validateUserUsageLimit);
                userUsageLimit.addEventListener('blur', validateUserUsageLimit);
            }
        }

        // Function to toggle Maximum Discount field visibility based on Discount Type
        function toggleMaxDiscountVisibility() {
            const discountType = document.getElementById('discountType').value;
            const maxDiscountGroup = document.getElementById('maxDiscount').closest('.form-group');
            
            if (discountType === 'flat') {
                // Hide Maximum Discount field for Flat discount type
                maxDiscountGroup.style.display = 'none';
                // Remove required validation for hidden field
                document.getElementById('maxDiscount').removeAttribute('required');
            } else if (discountType === 'percentage') {
                // Show Maximum Discount field for Percentage discount type
                maxDiscountGroup.style.display = 'block';
                // Add required validation for visible field
                document.getElementById('maxDiscount').setAttribute('required', 'required');
            } else {
                // Default behavior - hide when no discount type is selected
                maxDiscountGroup.style.display = 'none';
                document.getElementById('maxDiscount').removeAttribute('required');
            }
        }

        // Individual field validation functions
        function validateCouponCode() {
            const code = document.getElementById('code');
            const codeGroup = code.closest('.form-group');
            const errorMsg = codeGroup.querySelector('.error-message');
            const value = code.value.trim();

            if (!value) {
                showFieldError(codeGroup, errorMsg, 'Coupon code is required');
                return false;
            } else if (value.length < 3) {
                showFieldError(codeGroup, errorMsg, 'Coupon code must be at least 3 characters long');
                return false;
            } else if (value.length > 20) {
                showFieldError(codeGroup, errorMsg, 'Coupon code cannot exceed 20 characters');
                return false;
            } else if (!/^[A-Z0-9]+$/.test(value)) {
                showFieldError(codeGroup, errorMsg, 'Coupon code can only contain uppercase letters and numbers');
                return false;
            } else {
                hideFieldError(codeGroup, errorMsg);
                return true;
            }
        }

        function validateDescription() {
            const description = document.getElementById('description');
            const descriptionGroup = description.closest('.form-group');
            const errorMsg = descriptionGroup.querySelector('.error-message');
            const value = description.value.trim();

            if (!value) {
                showFieldError(descriptionGroup, errorMsg, 'Description is required');
                return false;
            } else if (value.length < 5) {
                showFieldError(descriptionGroup, errorMsg, 'Description must be at least 5 characters long');
                return false;
            } else if (value.length > 100) {
                showFieldError(descriptionGroup, errorMsg, 'Description cannot exceed 100 characters');
                return false;
            } else {
                hideFieldError(descriptionGroup, errorMsg);
                return true;
            }
        }

        function validateDiscountType() {
            const discountType = document.getElementById('discountType');
            const discountTypeGroup = discountType.closest('.form-group');
            const errorMsg = discountTypeGroup.querySelector('.error-message');

            if (!discountType.value.trim()) {
                showFieldError(discountTypeGroup, errorMsg, 'Please select a discount type');
                return false;
            } else {
                hideFieldError(discountTypeGroup, errorMsg);
                return true;
            }
        }

        function validateDiscountValue() {
            const discount = document.getElementById('discount');
            const discountGroup = discount.closest('.form-group');
            const errorMsg = discountGroup.querySelector('.error-message');
            const discountType = document.getElementById('discountType').value;
            const value = discount.value.trim();

            if (!value) {
                showFieldError(discountGroup, errorMsg, 'Discount value is required');
                return false;
            }

            const discountValue = parseFloat(value);
            if (isNaN(discountValue)) {
                showFieldError(discountGroup, errorMsg, 'Please enter a valid discount value');
                return false;
            } else if (discountValue <= 0) {
                showFieldError(discountGroup, errorMsg, 'Discount value must be greater than 0');
                return false;
            } else if (discountType === 'percentage' && discountValue > 100) {
                showFieldError(discountGroup, errorMsg, 'Percentage discount cannot exceed 100%');
                return false;
            } else if (discountType === 'flat' && discountValue > 100000) {
                showFieldError(discountGroup, errorMsg, 'Flat discount cannot exceed ₹1,00,000');
                return false;
            } else {
                hideFieldError(discountGroup, errorMsg);
                return true;
            }
        }

        function validateMinPurchase() {
            const minPurchase = document.getElementById('minPurchase');
            const minPurchaseGroup = minPurchase.closest('.form-group');
            const errorMsg = minPurchaseGroup.querySelector('.error-message');
            const value = minPurchase.value.trim();

            if (!value) {
                showFieldError(minPurchaseGroup, errorMsg, 'Minimum purchase amount is required');
                return false;
            }

            const minPurchaseValue = parseFloat(value);
            if (isNaN(minPurchaseValue)) {
                showFieldError(minPurchaseGroup, errorMsg, 'Please enter a valid amount');
                return false;
            } else if (minPurchaseValue < 0) {
                showFieldError(minPurchaseGroup, errorMsg, 'Minimum purchase amount cannot be negative');
                return false;
            } else if (minPurchaseValue > 1000000) {
                showFieldError(minPurchaseGroup, errorMsg, 'Minimum purchase amount cannot exceed ₹10,00,000');
                return false;
            } else {
                hideFieldError(minPurchaseGroup, errorMsg);
                return true;
            }
        }

        function validateMaxDiscount() {
            const maxDiscount = document.getElementById('maxDiscount');
            const maxDiscountGroup = maxDiscount.closest('.form-group');
            const errorMsg = maxDiscountGroup.querySelector('.error-message');
            const value = maxDiscount.value.trim();

            // Only validate if the field is visible (for percentage discount type)
            if (maxDiscountGroup.style.display === 'none') {
                return true; // Skip validation for hidden field
            }

            if (!value) {
                showFieldError(maxDiscountGroup, errorMsg, 'Maximum discount amount is required');
                return false;
            }

            const maxDiscountValue = parseFloat(value);
            if (isNaN(maxDiscountValue)) {
                showFieldError(maxDiscountGroup, errorMsg, 'Please enter a valid amount');
                return false;
            } else if (maxDiscountValue <= 0) {
                showFieldError(maxDiscountGroup, errorMsg, 'Maximum discount amount must be greater than 0');
                return false;
            } else if (maxDiscountValue > 100000) {
                showFieldError(maxDiscountGroup, errorMsg, 'Maximum discount amount cannot exceed ₹1,00,000');
                return false;
            } else {
                hideFieldError(maxDiscountGroup, errorMsg);
                return true;
            }
        }

        function validateStartDate() {
            const startDate = document.getElementById('startDate');
            const startDateGroup = startDate.closest('.form-group');
            const errorMsg = startDateGroup.querySelector('.error-message');

            if (!startDate.value) {
                showFieldError(startDateGroup, errorMsg, 'Start date is required');
                return false;
            } else {
                hideFieldError(startDateGroup, errorMsg);
                validateEndDate(); // Re-validate end date when start date changes
                return true;
            }
        }

        function validateEndDate() {
            const startDate = document.getElementById('startDate');
            const expiry = document.getElementById('expiry');
            const expiryGroup = expiry.closest('.form-group');
            const errorMsg = expiryGroup.querySelector('.error-message');

            if (!expiry.value) {
                showFieldError(expiryGroup, errorMsg, 'End date is required');
                return false;
            } else if (startDate.value && expiry.value) {
                const start = new Date(startDate.value);
                const end = new Date(expiry.value);
                if (start >= end) {
                    showFieldError(expiryGroup, errorMsg, 'End date must be after start date');
                    return false;
                } else {
                    hideFieldError(expiryGroup, errorMsg);
                    return true;
                }
            } else {
                hideFieldError(expiryGroup, errorMsg);
                return true;
            }
        }

        function validateUsageLimit() {
            const usageLimit = document.getElementById('usageLimit');
            const usageLimitGroup = usageLimit.closest('.form-group');
            const errorMsg = usageLimitGroup.querySelector('.error-message');
            const value = usageLimit.value.trim();

            if (!value) {
                showFieldError(usageLimitGroup, errorMsg, 'Global usage limit is required');
                return false;
            }

            const usageLimitValue = parseInt(value);
            if (isNaN(usageLimitValue)) {
                showFieldError(usageLimitGroup, errorMsg, 'Please enter a valid number');
                return false;
            } else if (usageLimitValue <= 0) {
                showFieldError(usageLimitGroup, errorMsg, 'Usage limit must be greater than 0');
                return false;
            } else if (usageLimitValue > 100000) {
                showFieldError(usageLimitGroup, errorMsg, 'Usage limit cannot exceed 1,00,000');
                return false;
            } else {
                hideFieldError(usageLimitGroup, errorMsg);
                return true;
            }
        }

        function validateUserUsageLimit() {
            const userUsageLimit = document.getElementById('userUsageLimit');
            const userUsageLimitGroup = userUsageLimit.closest('.form-group');
            const errorMsg = userUsageLimitGroup.querySelector('.error-message');
            const value = userUsageLimit.value.trim();

            if (!value) {
                showFieldError(userUsageLimitGroup, errorMsg, 'Per user limit is required');
                return false;
            }

            const userUsageLimitValue = parseInt(value);
            if (isNaN(userUsageLimitValue)) {
                showFieldError(userUsageLimitGroup, errorMsg, 'Please enter a valid number');
                return false;
            } else if (userUsageLimitValue <= 0) {
                showFieldError(userUsageLimitGroup, errorMsg, 'Per user limit must be greater than 0');
                return false;
            } else if (userUsageLimitValue > 1000) {
                showFieldError(userUsageLimitGroup, errorMsg, 'Per user limit cannot exceed 1,000');
                return false;
            } else {
                hideFieldError(userUsageLimitGroup, errorMsg);
                return true;
            }
        }

        // Helper functions for showing/hiding field errors
        function showFieldError(fieldGroup, errorElement, message) {
            fieldGroup.classList.add('error');
            errorElement.textContent = message;
            errorElement.style.display = 'block';
        }

        function hideFieldError(fieldGroup, errorElement) {
            fieldGroup.classList.remove('error');
            errorElement.style.display = 'none';
        }

        // Validate entire form
        function validateForm() {
            let isValid = true;

            if (!validateCouponCode()) isValid = false;
            if (!validateDescription()) isValid = false;
            if (!validateDiscountType()) isValid = false;
            if (!validateDiscountValue()) isValid = false;
            if (!validateMinPurchase()) isValid = false;
            if (!validateMaxDiscount()) isValid = false;
            if (!validateStartDate()) isValid = false;
            if (!validateEndDate()) isValid = false;
            if (!validateUsageLimit()) isValid = false;
            if (!validateUserUsageLimit()) isValid = false;

            return isValid;
        }

        // Enhanced form submission with validation
        document.getElementById('couponForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            if (!validateForm()) {
                // Scroll to first error
                const firstError = document.querySelector('.form-group.error');
                if (firstError) {
                    firstError.scrollIntoView({ behavior: 'smooth', block: 'center' });
                }
                
                Swal.fire({
                    icon: 'error',
                    title: 'Validation Errors',
                    text: 'Please fix all validation errors before submitting.',
                    confirmButtonColor: '#000000'
                });
                return;
            }

            // Show confirmation dialog
            Swal.fire({
                title: 'Save Coupon?',
                text: 'Are you sure you want to create this coupon?',
                icon: 'question',
                showCancelButton: true,
                confirmButtonColor: '#000000',
                cancelButtonColor: '#6c757d',
                confirmButtonText: 'Yes, save it!',
                cancelButtonText: 'Cancel'
            }).then((result) => {
                if (result.isConfirmed) {
                    // Show loading
                    Swal.fire({
                        title: 'Saving Coupon...',
                        allowOutsideClick: false,
                        didOpen: () => {
                            Swal.showLoading();
                        }
                    });
                    
                    // Submit the form
                    this.submit();
                }
            });
        });

        // Real-time discount validation
        document.getElementById('discountType').addEventListener('change', validateDiscount);
        document.getElementById('discount').addEventListener('input', validateDiscount);

        function validateDiscount() {
            const discountType = document.getElementById('discountType').value;
            const discountInput = document.getElementById('discount');
            const discount = parseFloat(discountInput.value);

            if (discountType === 'percentage') {
                discountInput.setAttribute('max', '100');
                discountInput.setAttribute('placeholder', 'Enter percentage (1-100)');
                if (discount > 100) {
                    discountInput.value = '100';
                }
            } else {
                discountInput.removeAttribute('max');
                discountInput.setAttribute('placeholder', 'Enter flat amount');
            }
        }

        // Set minimum date to today
        const today = new Date().toISOString().split('T')[0];
        document.getElementById('startDate').setAttribute('min', today);
        document.getElementById('expiry').setAttribute('min', today);

        // Update end date minimum when start date changes
        document.getElementById('startDate').addEventListener('change', function() {
            const startDate = this.value;
            document.getElementById('expiry').setAttribute('min', startDate);
        });

        // Update preview
        const updatePreview = () => {
            const code = document.getElementById('code').value || 'COUPONCODE';
            const description = document.getElementById('description').value || 'Coupon description goes here.';
            const discountType = document.getElementById('discountType').value;
            const discount = document.getElementById('discount').value || 0;
            const expiry = document.getElementById('expiry').value;

            document.getElementById('previewCode').textContent = code;
            document.getElementById('previewDescription').textContent = description;

            let discountText = 'Discount: ';
            if (discountType === 'percentage') {
                discountText += `${discount}% OFF`;
            } else {
                discountText += `₹${discount} OFF`;
            }
            document.getElementById('previewDiscount').textContent = discountText;

            let expiryText = 'Expires on: ';
            if (expiry) {
                const date = new Date(expiry);
                expiryText += date.toLocaleDateString('en-IN', { day: '2-digit', month: 'short', year: 'numeric' });
            } else {
                expiryText += 'YYYY-MM-DD';
            }
            document.getElementById('previewExpiry').textContent = expiryText;
        };

        document.getElementById('code').addEventListener('input', updatePreview);
        document.getElementById('description').addEventListener('input', updatePreview);
        document.getElementById('discountType').addEventListener('change', updatePreview);
        document.getElementById('discount').addEventListener('input', updatePreview);
        document.getElementById('expiry').addEventListener('change', updatePreview);

        // Character counters
        document.getElementById('code').addEventListener('input', function() {
            const counter = document.getElementById('codeCounter');
            counter.textContent = `${this.value.length}/20 characters`;
        });

        document.getElementById('description').addEventListener('input', function() {
            const counter = document.getElementById('descriptionCounter');
            counter.textContent = `${this.value.length}/100 characters`;
        });
    </script>
</body>
</html>