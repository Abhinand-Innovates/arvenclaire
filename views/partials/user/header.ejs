<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ArvanClaire - Luxury Watches</title>
    <!-- Bootstrap Icons -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.3/font/bootstrap-icons.css">
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- SweetAlert2 CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
    <link rel="stylesheet" href="../../../styles/user/header.css">

    <!-- SweetAlert2 Custom Styles -->

</head>

<body>
    <!-- Mobile Navigation Sidebar -->
    <div class="mobile-nav-overlay" id="mobileNavOverlay"></div>
    <div class="mobile-nav-sidebar" id="mobileNavSidebar">
        <!-- Header -->
        <div class="mobile-nav-header">
            <% if (typeof user !== 'undefined' && user) { %>
                <a href="/dashboard" class="mobile-nav-brand">ARVENCLAIRE</a>
            <% } else { %>
                <a href="/" class="mobile-nav-brand">ARVENCLAIRE</a>
            <% } %>
            <button class="mobile-nav-close" id="mobileNavClose">
                <i class="bi bi-x"></i>
            </button>
        </div>

        <!-- Navigation Menu -->
        <div class="mobile-nav-menu">
            <% if (typeof user !== 'undefined' && user) { %>
                <a href="/dashboard" class="mobile-nav-item">
                    <i class="bi bi-house"></i>Home
                </a>
            <% } else { %>
                <a href="/" class="mobile-nav-item">
                    <i class="bi bi-house"></i>Home
                </a>
            <% } %>
            <a href="/shop" class="mobile-nav-item">
                <i class="bi bi-shop"></i>Shop
            </a>
            <a href="/about" class="mobile-nav-item">
                <i class="bi bi-info-circle"></i>About
            </a>
            <a href="/contact" class="mobile-nav-item">
                <i class="bi bi-envelope"></i>Contact
            </a>
        </div>

        <!-- User Section -->
        <% if (typeof user !== 'undefined' && user) { %>
            <div class="mobile-nav-user">
                <div class="mobile-user-info">
                    <div class="mobile-user-avatar">
                        <%= (user.fullname || user.name || user.displayName || user.googleName || 'User').charAt(0).toUpperCase() %>
                    </div>
                    <div class="mobile-user-details">
                        <h4><%= user.fullname || user.name || user.displayName || user.googleName || 'User' %></h4>
                        <p><%= user.email || 'No email provided' %></p>
                    </div>
                </div>
                <a href="/profile" class="mobile-nav-item">
                    <i class="bi bi-person"></i>My Account
                </a>
                <button class="mobile-nav-logout mobile-logout-btn">
                    <i class="bi bi-box-arrow-right me-2"></i>Logout
                </button>
            </div>
        <% } else { %>
            <!-- Auth Section for Guests -->
            <div class="mobile-nav-auth">
                <a href="/login" class="mobile-auth-btn login">
                    <i class="bi bi-box-arrow-in-right me-2"></i>Login
                </a>
                <a href="/signup" class="mobile-auth-btn signup">
                    <i class="bi bi-person-plus me-2"></i>Sign Up
                </a>
            </div>
        <% } %>
    </div>

    <!-- Navigation -->
    <nav class="navbar navbar-expand-lg navbar-light py-3 shadow-sm fixed-top" style="background-color: #ffffff !important;">
        <div class="container">
            <!-- Left side container: Burger + Brand (Mobile Only) -->
            <div class="navbar-left-container d-lg-none">
                <!-- Burger Button -->
                <button class="navbar-toggler" type="button" id="mobileNavToggle">
                    <span class="navbar-toggler-icon"></span>
                </button>

                <!-- Website Name/Brand -->
                <% if (typeof user !== 'undefined' && user) { %>
                    <a class="navbar-brand" href="/dashboard"
                        style="font-family: 'Times New Roman', Times, serif;">ARVENCLAIRE</a>
                <% } else { %>
                    <a class="navbar-brand" href="/"
                        style="font-family: 'Times New Roman', Times, serif;">ARVENCLAIRE</a>
                <% } %>
            </div>

            <!-- Desktop Brand (Desktop Only) -->
            <% if (typeof user !== 'undefined' && user) { %>
                <a class="navbar-brand d-none d-lg-block" href="/dashboard"
                    style="font-family: 'Times New Roman', Times, serif;">ARVENCLAIRE</a>
            <% } else { %>
                <a class="navbar-brand d-none d-lg-block" href="/"
                    style="font-family: 'Times New Roman', Times, serif;">ARVENCLAIRE</a>
            <% } %>

            <!-- Mobile Icons Container (Mobile Only) -->
            <div class="mobile-icons-container d-lg-none">
                <!-- Wishlist Icon -->
                <a href="/wishlist" class="text-dark cart-icon" id="wishlistIconMobile">
                    <i class="bi bi-heart"></i>
                    <span class="wishlist-count" id="wishlistCountMobile" style="display: none;">0</span>
                </a>

                <!-- Cart Icon -->
                <a href="/cart" class="text-dark cart-icon" id="cartIconMobile">
                    <i class="bi bi-cart"></i>
                    <span class="cart-count" id="cartCountMobile" style="display: none;">0</span>
                </a>

                <!-- Account Icon Dropdown -->
                <div class="dropdown">
                    <button class="account-icon btn p-0" type="button" id="accountDropdownMobile"
                        style="border: none; background: none;">
                        <i class="bi bi-person-circle"></i>
                    </button>
                    
                    <% if (typeof user !=='undefined' && user) { %>
                        <!-- Logged In User Dropdown -->
                        <ul class="dropdown-menu account-dropdown">
                            <!-- User Information Header -->
                            <li class="user-info-header">
                                <div class="d-flex align-items-center p-3">
                                    <div class="user-avatar me-3">
                                        <%= (user.fullname || user.name || user.displayName || user.googleName || 'User').charAt(0).toUpperCase() %>
                                    </div>
                                    <div class="user-details">
                                        <div class="user-name"><%= user.fullname || user.name || user.displayName || user.googleName || 'User' %></div>
                                        <div class="user-email"><%= user.email || 'No email provided' %></div>
                                    </div>
                                </div>
                            </li>
                            <li><hr class="dropdown-divider"></li>
                            <!-- Menu Items -->
                            <li><a class="dropdown-item" href="/profile"><i class="bi bi-person me-2"></i>My Account</a>
                            </li>
                            <li>
                                <hr class="dropdown-divider">
                            </li>
                            <li><a class="dropdown-item logout-btn" href="/logout"><i
                                        class="bi bi-box-arrow-right me-2"></i>Logout</a></li>
                        </ul>
                    <% } else { %>
                        <!-- Guest User Dropdown -->
                        <ul class="dropdown-menu account-dropdown">
                            <li><a class="dropdown-item" href="/login"><i class="bi bi-box-arrow-in-right me-2"></i>Login</a></li>
                            <li><a class="dropdown-item" href="/signup"><i class="bi bi-person-plus me-2"></i>Sign Up</a></li>
                        </ul>
                    <% } %>
                </div>
            </div>

            <!-- Desktop Navigation (Hidden on Mobile) -->
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav me-auto">
                    <li class="nav-item">
                        <% if (typeof user !== 'undefined' && user) { %>
                            <a class="nav-link active" href="/dashboard">Home</a>
                        <% } else { %>
                            <a class="nav-link active" href="/">Home</a>
                        <% } %>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/shop">Shop</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/about">About</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/contact">Contact</a>
                    </li>
                </ul>

                <!-- Desktop Search Bar -->
                <form class="d-flex me-3 mb-2 mb-lg-0" id="navbarSearchForm">
                    <div class="input-group">
                        <input class="form-control search-box"
                               type="search"
                               id="navbarSearchInput"
                               name="search"
                               placeholder="Search products or brands..."
                               autocomplete="off">
                        <button class="search-btn" type="submit">
                            <i class="bi bi-search"></i>
                        </button>
                    </div>
                </form>

                <!-- Desktop Icons -->
                <div class="d-flex align-items-center">
                    <!-- Wishlist Icon -->
                    <a href="/wishlist" class="me-3 text-dark cart-icon" id="wishlistIcon">
                        <i class="bi bi-heart"></i>
                        <span class="wishlist-count" id="wishlistCount" style="display: none;">0</span>
                    </a>

                    <!-- Cart Icon -->
                    <a href="/cart" class="me-3 text-dark cart-icon" id="cartIcon">
                        <i class="bi bi-cart"></i>
                        <span class="cart-count" id="cartCount" style="display: none;">0</span>
                    </a>

                    <!-- Account Icon Dropdown -->
                    <div class="dropdown">
                        <button class="account-icon btn p-0" type="button" id="accountDropdown"
                            style="border: none; background: none;">
                            <i class="bi bi-person-circle"></i>
                        </button>
                        
                        <% if (typeof user !=='undefined' && user) { %>
                            <!-- Logged In User Dropdown -->
                            <ul class="dropdown-menu account-dropdown">
                                <!-- User Information Header -->
                                <li class="user-info-header">
                                    <div class="d-flex align-items-center p-3">
                                        <div class="user-avatar me-3">
                                            <%= (user.fullname || user.name || user.displayName || user.googleName || 'User').charAt(0).toUpperCase() %>
                                        </div>
                                        <div class="user-details">
                                            <div class="user-name"><%= user.fullname || user.name || user.displayName || user.googleName || 'User' %></div>
                                            <div class="user-email"><%= user.email || 'No email provided' %></div>
                                        </div>
                                    </div>
                                </li>
                                <li><hr class="dropdown-divider"></li>
                                <!-- Menu Items -->
                                <li><a class="dropdown-item" href="/profile"><i class="bi bi-person me-2"></i>My Account</a>
                                </li>
                                <li>
                                    <hr class="dropdown-divider">
                                </li>
                                <li><a class="dropdown-item logout-btn" href="/logout"><i
                                            class="bi bi-box-arrow-right me-2"></i>Logout</a></li>
                            </ul>
                        <% } else { %>
                            <!-- Guest User Dropdown -->
                            <ul class="dropdown-menu account-dropdown">
                                <li><a class="dropdown-item" href="/login"><i class="bi bi-box-arrow-in-right me-2"></i>Login</a></li>
                                <li><a class="dropdown-item" href="/signup"><i class="bi bi-person-plus me-2"></i>Sign Up</a></li>
                            </ul>
                        <% } %>
                    </div>
                </div>
            </div>
        </div>
    </nav>



    <!-- SweetAlert2 JavaScript -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.6/dist/js/bootstrap.bundle.min.js" integrity="sha384-j1CDi7MgGQ12Z7Qab0qlWQ/Qqz24Gc6BM0thvEMVjHnfYGF0rmFCozFSxQBxwHKO" crossorigin="anonymous"></script>

    <script>
        // SweetAlert2 Notification System
        function showSweetAlert(message, type = 'success', duration = 3000) {
            let icon, title;

            switch(type) {
                case 'success':
                    icon = 'success';
                    title = 'Success!';
                    break;
                case 'error':
                    icon = 'error';
                    title = 'Error!';
                    break;
                case 'info':
                    icon = 'info';
                    title = 'Information';
                    break;
                default:
                    icon = 'success';
                    title = 'Success!';
            }

            Swal.fire({
                icon: icon,
                title: title,
                text: message,
                position: 'bottom-end',
                showConfirmButton: false,
                timer: duration,
                timerProgressBar: true,
                toast: true,
                background: '#ffffff',
                color: '#111827',
                iconColor: type === 'success' ? '#059669' : type === 'error' ? '#dc2626' : '#2563eb',
                customClass: {
                    popup: 'swal2-toast-custom'
                },
                didOpen: (toast) => {
                    toast.addEventListener('mouseenter', Swal.stopTimer);
                    toast.addEventListener('mouseleave', Swal.resumeTimer);
                }
            });
        }

        // Backward compatibility - keep showToast function name
        function showToast(message, type = 'success', duration = 3000) {
            showSweetAlert(message, type, duration);
        }

        document.addEventListener('DOMContentLoaded', function () {
            // Mobile Navigation Functionality
            const mobileNavToggle = document.getElementById('mobileNavToggle');
            const mobileNavOverlay = document.getElementById('mobileNavOverlay');
            const mobileNavSidebar = document.getElementById('mobileNavSidebar');
            const mobileNavClose = document.getElementById('mobileNavClose');

            // Open mobile navigation
            if (mobileNavToggle) {
                mobileNavToggle.addEventListener('click', function() {
                    mobileNavOverlay.classList.add('show');
                    mobileNavSidebar.classList.add('show');
                    document.body.style.overflow = 'hidden';
                });
            }

            // Close mobile navigation
            function closeMobileNav() {
                mobileNavOverlay.classList.remove('show');
                mobileNavSidebar.classList.remove('show');
                document.body.style.overflow = '';
            }

            if (mobileNavClose) {
                mobileNavClose.addEventListener('click', closeMobileNav);
            }

            if (mobileNavOverlay) {
                mobileNavOverlay.addEventListener('click', closeMobileNav);
            }

            // Close on escape key
            document.addEventListener('keydown', function(e) {
                if (e.key === 'Escape' && mobileNavSidebar.classList.contains('show')) {
                    closeMobileNav();
                }
            });

            // Set active nav item in mobile menu
            const currentPath = window.location.pathname;
            const mobileNavItems = document.querySelectorAll('.mobile-nav-item');
            mobileNavItems.forEach(item => {
                const itemPath = new URL(item.href).pathname;
                if (itemPath === currentPath ||
                    (currentPath === '/dashboard' && itemPath === '/dashboard') ||
                    (currentPath === '/' && itemPath === '/') ||
                    (currentPath === '/shop' && itemPath === '/shop') ||
                    (currentPath === '/about' && itemPath === '/about') ||
                    (currentPath === '/contact' && itemPath === '/contact')) {
                    item.classList.add('active');
                }
            });

            // Simple navbar active link management
            const navLinks = document.querySelectorAll('.navbar-nav .nav-link');

            // Remove active class from all links
            navLinks.forEach(link => {
                link.classList.remove('active');

                // Add active class to current page link
                const linkPath = new URL(link.href).pathname;
                if (linkPath === currentPath ||
                    (currentPath === '/dashboard' && linkPath === '/dashboard') ||
                    (currentPath === '/' && linkPath === '/') ||
                    (currentPath === '/shop' && linkPath === '/shop') ||
                    (currentPath === '/about' && linkPath === '/about') ||
                    (currentPath === '/contact' && linkPath === '/contact') ||
                    (currentPath === '/' && linkPath === '/dashboard')) {
                    link.classList.add('active');
                }
            });

            // Simple click effect for nav links
            navLinks.forEach(link => {
                link.addEventListener('click', function(e) {
                    // Remove active from all links
                    navLinks.forEach(l => l.classList.remove('active'));
                    // Add active to clicked link
                    this.classList.add('active');
                });
            });

            // Account dropdown functionality - Fixed version
            function initializeDropdown(dropdownButtonId) {
                const accountDropdown = document.getElementById(dropdownButtonId);
                if (!accountDropdown) {
                    console.log(`${dropdownButtonId} not found`);
                    return;
                }

                const dropdownContainer = accountDropdown.closest('.dropdown');
                const dropdownMenu = dropdownContainer ? dropdownContainer.querySelector('.dropdown-menu') : null;

                if (accountDropdown && dropdownMenu) {
                    console.log(`${dropdownButtonId} dropdown elements found`);

                    // Manual dropdown toggle
                    accountDropdown.addEventListener('click', function (e) {
                        e.preventDefault();
                        e.stopPropagation();

                        console.log(`${dropdownButtonId} dropdown clicked`);

                        const isOpen = dropdownMenu.classList.contains('show');

                        // Close all other dropdowns first
                        document.querySelectorAll('.dropdown-menu.show').forEach(menu => {
                            menu.classList.remove('show');
                        });

                        // Toggle current dropdown
                        if (!isOpen) {
                            dropdownMenu.classList.add('show');
                            accountDropdown.setAttribute('aria-expanded', 'true');
                            console.log(`${dropdownButtonId} dropdown opened`);
                        } else {
                            dropdownMenu.classList.remove('show');
                            accountDropdown.setAttribute('aria-expanded', 'false');
                            console.log(`${dropdownButtonId} dropdown closed`);
                        }
                    });

                    // Close dropdown when clicking outside
                    document.addEventListener('click', function (e) {
                        if (!dropdownContainer.contains(e.target)) {
                            dropdownMenu.classList.remove('show');
                            accountDropdown.setAttribute('aria-expanded', 'false');
                        }
                    });

                    // Close dropdown when pressing Escape
                    document.addEventListener('keydown', function (e) {
                        if (e.key === 'Escape') {
                            dropdownMenu.classList.remove('show');
                            accountDropdown.setAttribute('aria-expanded', 'false');
                        }
                    });
                } else {
                    console.log(`${dropdownButtonId} dropdown menu not found`);
                }
            }

            // Initialize both desktop and mobile dropdowns
            initializeDropdown('accountDropdown');
            initializeDropdown('accountDropdownMobile');

            // Logout functionality with SweetAlert2
            const logoutBtns = document.querySelectorAll('.logout-btn, .mobile-logout-btn');
            logoutBtns.forEach(logoutBtn => {
                logoutBtn.addEventListener('click', function (e) {
                    e.preventDefault();

                    // Show SweetAlert2 confirmation dialog
                    Swal.fire({
                        title: 'Are you sure?',
                        text: 'You will be logged out of your account.',
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#dc3545',
                        cancelButtonColor: '#6c757d',
                        confirmButtonText: 'Yes, logout!',
                        cancelButtonText: 'Cancel',
                        reverseButtons: true,
                        customClass: {
                            popup: 'logout-swal-popup',
                            title: 'logout-swal-title',
                            content: 'logout-swal-content',
                            confirmButton: 'logout-swal-confirm',
                            cancelButton: 'logout-swal-cancel'
                        }
                    }).then((result) => {
                        if (result.isConfirmed) {
                            // Show loading state
                            Swal.fire({
                                title: 'Logging out...',
                                text: 'Please wait while we log you out.',
                                icon: 'info',
                                allowOutsideClick: false,
                                allowEscapeKey: false,
                                showConfirmButton: false,
                                didOpen: () => {
                                    Swal.showLoading();
                                }
                            });

                            // Redirect to logout route
                            window.location.href = '/logout';
                        }
                    });
                });
            });

            // Global AJAX error handler for blocked users
            // Override fetch to handle blocked user responses
            const originalFetch = window.fetch;
            window.fetch = function(...args) {
                return originalFetch.apply(this, args)
                    .then(response => {
                        // Check if response indicates user is blocked
                        if (response.status === 401) {
                            return response.json().then(data => {
                                if (data.blocked) {
                                    Swal.fire({
                                        icon: 'warning',
                                        title: 'Account Blocked',
                                        text: data.message || 'Your account has been blocked. Please contact support.',
                                        confirmButtonColor: '#dc3545',
                                        confirmButtonText: 'Go to Login'
                                    }).then(() => {
                                        window.location.href = data.redirect || '/login?blocked=true';
                                    });
                                    throw new Error('User blocked');
                                }
                                throw new Error(data.message || 'Authentication failed');
                            });
                        }
                        return response;
                    });
            };

            // Handle XMLHttpRequest for older AJAX calls
            const originalOpen = XMLHttpRequest.prototype.open;
            XMLHttpRequest.prototype.open = function(...args) {
                this.addEventListener('load', function() {
                    if (this.status === 401) {
                        try {
                            const data = JSON.parse(this.responseText);
                            if (data.blocked) {
                                Swal.fire({
                                    icon: 'warning',
                                    title: 'Account Blocked',
                                    text: data.message || 'Your account has been blocked. Please contact support.',
                                    confirmButtonColor: '#dc3545',
                                    confirmButtonText: 'Go to Login'
                                }).then(() => {
                                    window.location.href = data.redirect || '/login?blocked=true';
                                });
                            }
                        } catch (e) {
                            // Not JSON response, ignore
                        }
                    }
                });
                return originalOpen.apply(this, args);
            };

            // Navbar Search Functionality
            initializeNavbarSearch();

            // Load wishlist and cart counts for logged-in users only
            <% if (typeof user !== 'undefined' && user) { %>
                loadWishlistCount();
                loadCartCount();
            <% } %>
        });

        // Navbar Search Implementation
        function initializeNavbarSearch() {
            const searchForm = document.getElementById('navbarSearchForm');
            const searchInput = document.getElementById('navbarSearchInput');

            if (!searchForm || !searchInput) return;

            // Form submission handler
            searchForm.addEventListener('submit', function(e) {
                e.preventDefault();
                performSearch();
            });

            // Perform search using existing shop route
            function performSearch() {
                const query = searchInput.value.trim();

                if (!query) {
                    // If no search query, just go to shop page
                    window.location.href = '/shop';
                    return;
                }

                // Send the query to existing shop route
                window.location.href = `/shop?search=${encodeURIComponent(query)}`;
            }
        }

        // Wishlist functionality
        async function loadWishlistCount() {
            try {
                const response = await fetch('/wishlist/count');
                if (response.ok) {
                    const data = await response.json();
                    updateWishlistCounter(data.count);
                } else if (response.status === 401) {
                    // User not authenticated, hide counter
                    updateWishlistCounter(0);
                }
            } catch (error) {
                // Silently handle error for guests
                updateWishlistCounter(0);
            }
        }

        function updateWishlistCounter(count) {
            // Update desktop counter
            const wishlistCountElement = document.getElementById('wishlistCount');
            if (wishlistCountElement) {
                if (count > 0) {
                    wishlistCountElement.textContent = count;
                    wishlistCountElement.style.display = 'flex';
                } else {
                    wishlistCountElement.style.display = 'none';
                }
            }

            // Update mobile counter
            const wishlistCountMobile = document.getElementById('wishlistCountMobile');
            if (wishlistCountMobile) {
                if (count > 0) {
                    wishlistCountMobile.textContent = count;
                    wishlistCountMobile.style.display = 'flex';
                } else {
                    wishlistCountMobile.style.display = 'none';
                }
            }
        }

        // Cart functionality
        async function loadCartCount() {
            try {
                const response = await fetch('/cart/count');
                if (response.ok) {
                    const data = await response.json();
                    updateCartCounter(data.count);
                } else if (response.status === 401) {
                    // User not authenticated, hide counter
                    updateCartCounter(0);
                }
            } catch (error) {
                // Silently handle error for guests
                updateCartCounter(0);
            }
        }

        function updateCartCounter(count) {
            // Update desktop counter
            const cartCountElement = document.getElementById('cartCount');
            if (cartCountElement) {
                if (count > 0) {
                    cartCountElement.textContent = count;
                    cartCountElement.style.display = 'flex';
                } else {
                    cartCountElement.style.display = 'none';
                }
            }

            // Update mobile counter
            const cartCountMobile = document.getElementById('cartCountMobile');
            if (cartCountMobile) {
                if (count > 0) {
                    cartCountMobile.textContent = count;
                    cartCountMobile.style.display = 'flex';
                } else {
                    cartCountMobile.style.display = 'none';
                }
            }
        }

        // Global function to toggle wishlist (called from product pages)
        async function toggleWishlist(productId, buttonElement) {
            try {
                const isInWishlist = buttonElement.classList.contains('in-wishlist');
                const endpoint = isInWishlist ? '/wishlist/remove' : '/wishlist/add';
                
                const response = await fetch(endpoint, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ productId })
                });

                const result = await response.json();

                if (result.success) {
                    // Update wishlist counter
                    updateWishlistCounter(result.wishlistCount);

                    // Toggle button appearance
                    const heartIcon = buttonElement.querySelector('i');
                    if (heartIcon) {
                        if (isInWishlist) {
                            // Remove from wishlist
                            heartIcon.classList.remove('bi-heart-fill');
                            heartIcon.classList.add('bi-heart');
                            buttonElement.classList.remove('in-wishlist');
                            buttonElement.innerHTML = buttonElement.innerHTML.replace('Remove from Wishlist', 'Add to Wishlist');
                            showSweetAlert('Removed from wishlist!', 'success');
                        } else {
                            // Add to wishlist
                            heartIcon.classList.remove('bi-heart');
                            heartIcon.classList.add('bi-heart-fill');
                            buttonElement.classList.add('in-wishlist');
                            buttonElement.innerHTML = buttonElement.innerHTML.replace('Add to Wishlist', 'Remove from Wishlist');
                            showSweetAlert('Added to wishlist!', 'success');
                        }
                    }
                } else {
                    showSweetAlert(result.message || 'Failed to update wishlist.', 'error');
                }
            } catch (error) {
                console.error('Wishlist error:', error);
                showSweetAlert('Please login to manage wishlist.', 'error');
            }
        }

        // Backward compatibility - keep addToWishlist function name
        async function addToWishlist(productId, buttonElement) {
            return toggleWishlist(productId, buttonElement);
        }

        // Function to update wishlist button state across the page
        function updateWishlistButtonState(productId, isInWishlist) {
            // Find all wishlist buttons for this product
            const wishlistButtons = document.querySelectorAll(`[onclick*="${productId}"]`);

            wishlistButtons.forEach(button => {
                const heartIcon = button.querySelector('i');
                if (heartIcon && heartIcon.classList.contains('bi-heart')) {
                    if (isInWishlist) {
                        heartIcon.style.color = '#e74c3c';
                        heartIcon.classList.remove('bi-heart');
                        heartIcon.classList.add('bi-heart-fill');
                        button.disabled = true;
                        button.title = 'Already in wishlist';
                    } else {
                        heartIcon.style.color = '';
                        heartIcon.classList.remove('bi-heart-fill');
                        heartIcon.classList.add('bi-heart');
                        button.disabled = false;
                        button.title = 'Add to wishlist';
                    }
                }
            });
        }

        // Global function to remove from wishlist
        async function removeFromWishlist(productId) {
            try {
                const response = await fetch('/wishlist/remove', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ productId })
                });

                const result = await response.json();

                if (result.success) {
                    // Update wishlist counter
                    updateWishlistCounter(result.wishlistCount);

                    // Update button states
                    updateWishlistButtonState(productId, false);

                    // Show success message
                    showSweetAlert('Removed from wishlist!', 'success');

                    // Reload page if on wishlist page
                    if (window.location.pathname === '/wishlist') {
                        setTimeout(() => {
                            window.location.reload();
                        }, 1000);
                    }
                } else {
                    showSweetAlert(result.message, 'error');
                }
            } catch (error) {
                console.error('Error removing from wishlist:', error);
                showSweetAlert('Failed to remove item from wishlist.', 'error');
            }
        }
    </script>
    </body>
    </html>